
Traffic_Lights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030bc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003244  08003244  00004244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800328c  0800328c  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  0800328c  0800328c  0000428c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003294  08003294  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003294  08003294  00004294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003298  08003298  00004298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800329c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005010  2**0
                  CONTENTS
 10 .bss          000000b8  20000010  20000010  00005010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  00005010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cce1  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bc2  00000000  00000000  00011d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  000138e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000982  00000000  00000000  00014500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e83  00000000  00000000  00014e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e0e1  00000000  00000000  00035d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb008  00000000  00000000  00043de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010edee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003338  00000000  00000000  0010ee34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c3  00000000  00000000  0011216c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800322c 	.word	0x0800322c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800322c 	.word	0x0800322c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SysTick_Handler>:

extern TIM_HandleTypeDef timer5;
extern UART_HandleTypeDef uart4;

void SysTick_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004cc:	f000 fc60 	bl	8000d90 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004d0:	f000 fd8f 	bl	8000ff2 <HAL_SYSTICK_IRQHandler>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&timer5);
 80004dc:	4802      	ldr	r0, [pc, #8]	@ (80004e8 <TIM5_IRQHandler+0x10>)
 80004de:	f001 fd4d 	bl	8001f7c <HAL_TIM_IRQHandler>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2000002c 	.word	0x2000002c

080004ec <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	Delay(200); // Delay 200ms
 80004f0:	20c8      	movs	r0, #200	@ 0xc8
 80004f2:	f000 fa55 	bl	80009a0 <Delay>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80004f6:	2004      	movs	r0, #4
 80004f8:	f000 ffd0 	bl	800149c <HAL_GPIO_EXTI_IRQHandler>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	Delay(200); // Delay 200ms
 8000504:	20c8      	movs	r0, #200	@ 0xc8
 8000506:	f000 fa4b 	bl	80009a0 <Delay>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800050a:	2008      	movs	r0, #8
 800050c:	f000 ffc6 	bl	800149c <HAL_GPIO_EXTI_IRQHandler>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&uart4);
 8000518:	4802      	ldr	r0, [pc, #8]	@ (8000524 <UART4_IRQHandler+0x10>)
 800051a:	f001 ff8d 	bl	8002438 <HAL_UART_IRQHandler>
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000074 	.word	0x20000074

08000528 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	// Halt execution, when HardFault error occurs.
	for(;;);
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <HardFault_Handler+0x4>

08000530 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	// Halt execution, when MemManage error occurs.
	for(;;);
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <MemManage_Handler+0x4>

08000538 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
	// Halt execution, when BusFault error occurs.
	for(;;);
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <BusFault_Handler+0x4>

08000540 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	// Halt execution, when UsageFault error occurs.
	for(;;);
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <UsageFault_Handler+0x4>

08000548 <main>:
volatile uint8_t current_pattern = 0,next_pattern = 0, maintenance = 0,blue_on = 0, counter = 0;
char *buffer = "ATTENTION AHEAD!  LIGHTS UNDER MAINTENANCE!!!\r\n";


int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0

	/* Initializes low level hardware at the processor level */
	HAL_Init();
 800054c:	f000 fbce 	bl	8000cec <HAL_Init>

	// Sets other clock sources besides HSI.
	if( SystemClock_Config(HSE_4) != Execution_Succesfull)
 8000550:	2002      	movs	r0, #2
 8000552:	f000 f839 	bl	80005c8 <SystemClock_Config>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <main+0x18>
		return Execution_Failed;
 800055c:	2301      	movs	r3, #1
 800055e:	e02b      	b.n	80005b8 <main+0x70>

	//volatile uint64_t freq = HAL_RCC_GetHCLKFreq(); // Checks the speed of the Enabled Clock Source

	// Configure PORTB with the LEDs.
	if( GPIO_Configuration() != Execution_Succesfull)
 8000560:	f000 f8d4 	bl	800070c <GPIO_Configuration>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <main+0x26>
		return Execution_Failed;
 800056a:	2301      	movs	r3, #1
 800056c:	e024      	b.n	80005b8 <main+0x70>

	// Configure TIMER5 for handling the LED blinking via interrupts.
	if ( Timer_Configuration(&timer5) != Execution_Succesfull)
 800056e:	4813      	ldr	r0, [pc, #76]	@ (80005bc <main+0x74>)
 8000570:	f000 f8fa 	bl	8000768 <Timer_Configuration>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <main+0x36>
		return Execution_Failed;
 800057a:	2301      	movs	r3, #1
 800057c:	e01c      	b.n	80005b8 <main+0x70>

	// Configure the buttons in PORTA's GPIOs.
	if ( Button_Configuration() != Execution_Succesfull)
 800057e:	f000 f919 	bl	80007b4 <Button_Configuration>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <main+0x44>
		return Execution_Failed;
 8000588:	2301      	movs	r3, #1
 800058a:	e015      	b.n	80005b8 <main+0x70>

	// Configure the UART4 module to print a message when in maintenance.
	if( UART4_Configuration(&uart4) != Execution_Succesfull)
 800058c:	480c      	ldr	r0, [pc, #48]	@ (80005c0 <main+0x78>)
 800058e:	f000 f93f 	bl	8000810 <UART4_Configuration>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <main+0x54>
		return Execution_Failed;
 8000598:	2301      	movs	r3, #1
 800059a:	e00d      	b.n	80005b8 <main+0x70>

	// Initial State.
	next_pattern = 2;
 800059c:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <main+0x7c>)
 800059e:	2202      	movs	r2, #2
 80005a0:	701a      	strb	r2, [r3, #0]
	Choose_Pattern();
 80005a2:	f000 f967 	bl	8000874 <Choose_Pattern>

	// Start TIMER5.
	if( HAL_TIM_Base_Start_IT(&timer5) != HAL_OK )
 80005a6:	4805      	ldr	r0, [pc, #20]	@ (80005bc <main+0x74>)
 80005a8:	f001 fc78 	bl	8001e9c <HAL_TIM_Base_Start_IT>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <main+0x6e>
		return Execution_Failed;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e000      	b.n	80005b8 <main+0x70>

	// Infinite loop.
	for(;;);
 80005b6:	e7fe      	b.n	80005b6 <main+0x6e>

	return Execution_Succesfull;
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000002c 	.word	0x2000002c
 80005c0:	20000074 	.word	0x20000074
 80005c4:	200000bd 	.word	0x200000bd

080005c8 <SystemClock_Config>:

ReturnStatus SystemClock_Config(Clock_Source_t clk)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	memset(&osc_init, 0, sizeof(osc_init));
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fdfa 	bl	80031d4 <memset>
	memset(&clk_init, 0, sizeof(clk_init));
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2214      	movs	r2, #20
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fdf3 	bl	80031d4 <memset>

	switch (clk)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b03      	cmp	r3, #3
 80005f2:	f200 8084 	bhi.w	80006fe <SystemClock_Config+0x136>
 80005f6:	a201      	add	r2, pc, #4	@ (adr r2, 80005fc <SystemClock_Config+0x34>)
 80005f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fc:	080006ff 	.word	0x080006ff
 8000600:	0800060d 	.word	0x0800060d
 8000604:	08000655 	.word	0x08000655
 8000608:	080006a9 	.word	0x080006a9
	{
		case HSI_16:
			break;
		case HSI_8:
			osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	623b      	str	r3, [r7, #32]
			osc_init.HSIState = RCC_HSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if ( HAL_RCC_OscConfig(&osc_init) != HAL_OK )
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f000 ff57 	bl	80014cc <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x60>
				return Execution_Failed;
 8000624:	2301      	movs	r3, #1
 8000626:	e06b      	b.n	8000700 <SystemClock_Config+0x138>

			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000630:	2380      	movs	r3, #128	@ 0x80
 8000632:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000638:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]

			if ( HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK )
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f9b9 	bl	80019bc <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d055      	beq.n	80006fc <SystemClock_Config+0x134>
				return Execution_Failed;
 8000650:	2301      	movs	r3, #1
 8000652:	e055      	b.n	8000700 <SystemClock_Config+0x138>
			break;

		case HSE_4:
			osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
			osc_init.HSEState = RCC_HSE_ON; // YOU HAVE TO CHECK ON THE SCHEMATIC WHETHER HSE IS BYPASSED OR NOT!!!
 8000658:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
			if ( HAL_RCC_OscConfig(&osc_init) != HAL_OK )
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f000 ff32 	bl	80014cc <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xaa>
				return Execution_Failed;
 800066e:	2301      	movs	r3, #1
 8000670:	e046      	b.n	8000700 <SystemClock_Config+0x138>

			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000672:	230f      	movs	r3, #15
 8000674:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000676:	2301      	movs	r3, #1
 8000678:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800067a:	2380      	movs	r3, #128	@ 0x80
 800067c:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000682:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000688:	61fb      	str	r3, [r7, #28]

			if ( HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK )
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f001 f993 	bl	80019bc <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xd8>
				return Execution_Failed;
 800069c:	2301      	movs	r3, #1
 800069e:	e02f      	b.n	8000700 <SystemClock_Config+0x138>

			__HAL_RCC_HSI_DISABLE(); //Disable HSI to reduce Power Consumption.
 80006a0:	4b19      	ldr	r3, [pc, #100]	@ (8000708 <SystemClock_Config+0x140>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]

			break;
 80006a6:	e02a      	b.n	80006fe <SystemClock_Config+0x136>

		case HSE_2:
				osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
				osc_init.HSEState = RCC_HSE_ON; // YOU HAVE TO CHECK ON THE SCHEMATIC WHETHER HSE IS BYPASSED OR NOT!!!
 80006ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
				if ( HAL_RCC_OscConfig(&osc_init) != HAL_OK )
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 ff08 	bl	80014cc <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xfe>
					return Execution_Failed;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e01c      	b.n	8000700 <SystemClock_Config+0x138>

				clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80006c6:	230f      	movs	r3, #15
 80006c8:	60fb      	str	r3, [r7, #12]
				clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006ca:	2301      	movs	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
				clk_init.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80006ce:	2390      	movs	r3, #144	@ 0x90
 80006d0:	617b      	str	r3, [r7, #20]
				clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d6:	61bb      	str	r3, [r7, #24]
				clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006dc:	61fb      	str	r3, [r7, #28]

				if ( HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK )
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 f969 	bl	80019bc <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x12c>
					return Execution_Failed;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e005      	b.n	8000700 <SystemClock_Config+0x138>

				__HAL_RCC_HSI_DISABLE(); //Disable HSI to reduce Power Consumption.
 80006f4:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <SystemClock_Config+0x140>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]

				break;
 80006fa:	e000      	b.n	80006fe <SystemClock_Config+0x136>
			break;
 80006fc:	bf00      	nop
				break;
#endif
		default:
	}

	return Execution_Succesfull;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3750      	adds	r7, #80	@ 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	42470000 	.word	0x42470000

0800070c <GPIO_Configuration>:


ReturnStatus GPIO_Configuration(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_led;
	memset(&gpio_led, 0, sizeof(gpio_led));
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2214      	movs	r2, #20
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fd5b 	bl	80031d4 <memset>

	// Enable the clock to GPIOD
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <GPIO_Configuration+0x54>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a0e      	ldr	r2, [pc, #56]	@ (8000760 <GPIO_Configuration+0x54>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <GPIO_Configuration+0x54>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

	gpio_led.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
 800073a:	23b3      	movs	r3, #179	@ 0xb3
 800073c:	607b      	str	r3, [r7, #4]
	gpio_led.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
	gpio_led.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
	gpio_led.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &gpio_led);
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <GPIO_Configuration+0x58>)
 8000750:	f000 fcee 	bl	8001130 <HAL_GPIO_Init>

	return Execution_Succesfull;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40020400 	.word	0x40020400

08000768 <Timer_Configuration>:

ReturnStatus Timer_Configuration(TIM_HandleTypeDef *timer)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	memset(timer, 0, sizeof(*timer));
 8000770:	2248      	movs	r2, #72	@ 0x48
 8000772:	2100      	movs	r1, #0
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f002 fd2d 	bl	80031d4 <memset>

	timer->Instance = TIM5;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <Timer_Configuration+0x48>)
 800077e:	601a      	str	r2, [r3, #0]
	timer->Init.CounterMode = TIM_COUNTERMODE_UP; // ==> For a basic counter isn't configurable
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
	timer->Init.Prescaler = 400;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800078c:	605a      	str	r2, [r3, #4]
	timer->Init.Period = 10000;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000794:	60da      	str	r2, [r3, #12]

	if ( HAL_TIM_Base_Init(timer) != HAL_OK)
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f001 fb30 	bl	8001dfc <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <Timer_Configuration+0x3e>
		return Execution_Failed;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e000      	b.n	80007a8 <Timer_Configuration+0x40>

	return Execution_Succesfull;
 80007a6:	2300      	movs	r3, #0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40000c00 	.word	0x40000c00

080007b4 <Button_Configuration>:

ReturnStatus Button_Configuration(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_button;
	memset(&gpio_button, 0, sizeof(gpio_button));
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2214      	movs	r2, #20
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 fd07 	bl	80031d4 <memset>

	// Enable the clock to GPIOA
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <Button_Configuration+0x54>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000808 <Button_Configuration+0x54>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <Button_Configuration+0x54>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

	gpio_button.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80007e2:	230c      	movs	r3, #12
 80007e4:	607b      	str	r3, [r7, #4]
	gpio_button.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
	gpio_button.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
	gpio_button.Mode = GPIO_MODE_IT_RISING;
 80007ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007f2:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_Init(GPIOA, &gpio_button);
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <Button_Configuration+0x58>)
 80007fa:	f000 fc99 	bl	8001130 <HAL_GPIO_Init>

	return Execution_Succesfull;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020000 	.word	0x40020000

08000810 <UART4_Configuration>:

ReturnStatus UART4_Configuration(UART_HandleTypeDef *uart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	memset(uart, 0, sizeof(*uart));
 8000818:	2248      	movs	r2, #72	@ 0x48
 800081a:	2100      	movs	r1, #0
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f002 fcd9 	bl	80031d4 <memset>

	uart->Instance = UART4;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <UART4_Configuration+0x60>)
 8000826:	601a      	str	r2, [r3, #0]
	uart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
	uart->Init.BaudRate = 115200;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
	uart->Init.Mode = UART_MODE_TX;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2208      	movs	r2, #8
 800083a:	615a      	str	r2, [r3, #20]
	uart->Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
	uart->Init.Parity = UART_PARITY_NONE;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
	uart->Init.StopBits = UART_STOPBITS_1;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
	uart->Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]

	if( HAL_UART_Init(uart) != HAL_OK )
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f001 fd69 	bl	800232c <HAL_UART_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <UART4_Configuration+0x54>
		return Execution_Failed;
 8000860:	2301      	movs	r3, #1
 8000862:	e000      	b.n	8000866 <UART4_Configuration+0x56>

	return Execution_Succesfull;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40004c00 	.word	0x40004c00

08000874 <Choose_Pattern>:

void Choose_Pattern(void)
{
 8000874:	b598      	push	{r3, r4, r7, lr}
 8000876:	af00      	add	r7, sp, #0
	switch (next_pattern)
 8000878:	4b42      	ldr	r3, [pc, #264]	@ (8000984 <Choose_Pattern+0x110>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b03      	cmp	r3, #3
 8000880:	d872      	bhi.n	8000968 <Choose_Pattern+0xf4>
 8000882:	a201      	add	r2, pc, #4	@ (adr r2, 8000888 <Choose_Pattern+0x14>)
 8000884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000888:	08000899 	.word	0x08000899
 800088c:	080008bf 	.word	0x080008bf
 8000890:	080008e5 	.word	0x080008e5
 8000894:	0800090b 	.word	0x0800090b
	{
		// Green Light on. Cars coming through.
		case 0:
			current_pattern = 0;
 8000898:	4b3b      	ldr	r3, [pc, #236]	@ (8000988 <Choose_Pattern+0x114>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
			if(maintenance == 0)
 800089e:	4b3b      	ldr	r3, [pc, #236]	@ (800098c <Choose_Pattern+0x118>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d165      	bne.n	8000974 <Choose_Pattern+0x100>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	21b2      	movs	r1, #178	@ 0xb2
 80008ac:	4838      	ldr	r0, [pc, #224]	@ (8000990 <Choose_Pattern+0x11c>)
 80008ae:	f000 fddb 	bl	8001468 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2101      	movs	r1, #1
 80008b6:	4836      	ldr	r0, [pc, #216]	@ (8000990 <Choose_Pattern+0x11c>)
 80008b8:	f000 fdd6 	bl	8001468 <HAL_GPIO_WritePin>
			}
			break;
 80008bc:	e05a      	b.n	8000974 <Choose_Pattern+0x100>

		// Yellow light on.
		case 1:
			current_pattern = 1;
 80008be:	4b32      	ldr	r3, [pc, #200]	@ (8000988 <Choose_Pattern+0x114>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
			if(maintenance == 0)
 80008c4:	4b31      	ldr	r3, [pc, #196]	@ (800098c <Choose_Pattern+0x118>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d154      	bne.n	8000978 <Choose_Pattern+0x104>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	21b1      	movs	r1, #177	@ 0xb1
 80008d2:	482f      	ldr	r0, [pc, #188]	@ (8000990 <Choose_Pattern+0x11c>)
 80008d4:	f000 fdc8 	bl	8001468 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2102      	movs	r1, #2
 80008dc:	482c      	ldr	r0, [pc, #176]	@ (8000990 <Choose_Pattern+0x11c>)
 80008de:	f000 fdc3 	bl	8001468 <HAL_GPIO_WritePin>
			}
			break;
 80008e2:	e049      	b.n	8000978 <Choose_Pattern+0x104>

		// Red light on. Stop!
		case 2:
			current_pattern = 2;
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <Choose_Pattern+0x114>)
 80008e6:	2202      	movs	r2, #2
 80008e8:	701a      	strb	r2, [r3, #0]
			if(maintenance == 0)
 80008ea:	4b28      	ldr	r3, [pc, #160]	@ (800098c <Choose_Pattern+0x118>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d143      	bne.n	800097c <Choose_Pattern+0x108>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5 | GPIO_PIN_7, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	21a3      	movs	r1, #163	@ 0xa3
 80008f8:	4825      	ldr	r0, [pc, #148]	@ (8000990 <Choose_Pattern+0x11c>)
 80008fa:	f000 fdb5 	bl	8001468 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2110      	movs	r1, #16
 8000902:	4823      	ldr	r0, [pc, #140]	@ (8000990 <Choose_Pattern+0x11c>)
 8000904:	f000 fdb0 	bl	8001468 <HAL_GPIO_WritePin>
			}
			break;
 8000908:	e038      	b.n	800097c <Choose_Pattern+0x108>

		// Maintenance state. Blue and Yellow LED blink.
		case 3:
			current_pattern = 3;
 800090a:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <Choose_Pattern+0x114>)
 800090c:	2203      	movs	r2, #3
 800090e:	701a      	strb	r2, [r3, #0]
			if( HAL_UART_Transmit_IT(&uart4, (uint8_t *)buffer, strlen(buffer)) != HAL_OK )
 8000910:	4b20      	ldr	r3, [pc, #128]	@ (8000994 <Choose_Pattern+0x120>)
 8000912:	681c      	ldr	r4, [r3, #0]
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <Choose_Pattern+0x120>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fc55 	bl	80001c8 <strlen>
 800091e:	4603      	mov	r3, r0
 8000920:	b29b      	uxth	r3, r3
 8000922:	461a      	mov	r2, r3
 8000924:	4621      	mov	r1, r4
 8000926:	481c      	ldr	r0, [pc, #112]	@ (8000998 <Choose_Pattern+0x124>)
 8000928:	f001 fd50 	bl	80023cc <HAL_UART_Transmit_IT>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d126      	bne.n	8000980 <Choose_Pattern+0x10c>
				return ;

			if(blue_on == 0)
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <Choose_Pattern+0x128>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10a      	bne.n	8000952 <Choose_Pattern+0xde>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_7, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2193      	movs	r1, #147	@ 0x93
 8000940:	4813      	ldr	r0, [pc, #76]	@ (8000990 <Choose_Pattern+0x11c>)
 8000942:	f000 fd91 	bl	8001468 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2120      	movs	r1, #32
 800094a:	4811      	ldr	r0, [pc, #68]	@ (8000990 <Choose_Pattern+0x11c>)
 800094c:	f000 fd8c 	bl	8001468 <HAL_GPIO_WritePin>
			else
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
			}
			break;
 8000950:	e017      	b.n	8000982 <Choose_Pattern+0x10e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2133      	movs	r1, #51	@ 0x33
 8000956:	480e      	ldr	r0, [pc, #56]	@ (8000990 <Choose_Pattern+0x11c>)
 8000958:	f000 fd86 	bl	8001468 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	2180      	movs	r1, #128	@ 0x80
 8000960:	480b      	ldr	r0, [pc, #44]	@ (8000990 <Choose_Pattern+0x11c>)
 8000962:	f000 fd81 	bl	8001468 <HAL_GPIO_WritePin>
			break;
 8000966:	e00c      	b.n	8000982 <Choose_Pattern+0x10e>
		default:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	21b3      	movs	r1, #179	@ 0xb3
 800096c:	4808      	ldr	r0, [pc, #32]	@ (8000990 <Choose_Pattern+0x11c>)
 800096e:	f000 fd7b 	bl	8001468 <HAL_GPIO_WritePin>
 8000972:	e006      	b.n	8000982 <Choose_Pattern+0x10e>
			break;
 8000974:	bf00      	nop
 8000976:	e004      	b.n	8000982 <Choose_Pattern+0x10e>
			break;
 8000978:	bf00      	nop
 800097a:	e002      	b.n	8000982 <Choose_Pattern+0x10e>
			break;
 800097c:	bf00      	nop
 800097e:	e000      	b.n	8000982 <Choose_Pattern+0x10e>
				return ;
 8000980:	bf00      	nop
	}
}
 8000982:	bd98      	pop	{r3, r4, r7, pc}
 8000984:	200000bd 	.word	0x200000bd
 8000988:	200000bc 	.word	0x200000bc
 800098c:	200000be 	.word	0x200000be
 8000990:	40020400 	.word	0x40020400
 8000994:	20000000 	.word	0x20000000
 8000998:	20000074 	.word	0x20000074
 800099c:	200000bf 	.word	0x200000bf

080009a0 <Delay>:

void Delay(uint32_t ms)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	DWT->CTRL |= (1 << 0); // Enable the DTW counter of the CortexM4
 80009a8:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <Delay+0x4c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0f      	ldr	r2, [pc, #60]	@ (80009ec <Delay+0x4c>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6013      	str	r3, [r2, #0]
	uint32_t start = DWT->CYCCNT;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <Delay+0x4c>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = ms * (HAL_RCC_GetHCLKFreq() / 1000);
 80009ba:	f001 f9eb 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 80009be:	4603      	mov	r3, r0
 80009c0:	4a0b      	ldr	r2, [pc, #44]	@ (80009f0 <Delay+0x50>)
 80009c2:	fba2 2303 	umull	r2, r3, r2, r3
 80009c6:	099a      	lsrs	r2, r3, #6
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	60bb      	str	r3, [r7, #8]

	while ((DWT->CYCCNT - start) < ticks);
 80009d0:	bf00      	nop
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <Delay+0x4c>)
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d8f8      	bhi.n	80009d2 <Delay+0x32>
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	e0001000 	.word	0xe0001000
 80009f0:	10624dd3 	.word	0x10624dd3

080009f4 <HAL_TIM_PeriodElapsedCallback>:

// Called every 1 second.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	UNUSED(htim);
	if( maintenance == 1 )
 80009fc:	4b29      	ldr	r3, [pc, #164]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d109      	bne.n	8000a1a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		blue_on ^= 1;
 8000a06:	4b28      	ldr	r3, [pc, #160]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	f083 0301 	eor.w	r3, r3, #1
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b25      	ldr	r3, [pc, #148]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000a14:	701a      	strb	r2, [r3, #0]
		Choose_Pattern();
 8000a16:	f7ff ff2d 	bl	8000874 <Choose_Pattern>
	}
	if( counter == 15 && current_pattern == 2 )
 8000a1a:	4b24      	ldr	r3, [pc, #144]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d10d      	bne.n	8000a40 <HAL_TIM_PeriodElapsedCallback+0x4c>
 8000a24:	4b22      	ldr	r3, [pc, #136]	@ (8000ab0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d108      	bne.n	8000a40 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		counter = 0;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
		next_pattern = 0;
 8000a34:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
		Choose_Pattern();
 8000a3a:	f7ff ff1b 	bl	8000874 <Choose_Pattern>
 8000a3e:	e02d      	b.n	8000a9c <HAL_TIM_PeriodElapsedCallback+0xa8>
	}else if( counter == 15 && current_pattern == 0)
 8000a40:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b0f      	cmp	r3, #15
 8000a48:	d10d      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x72>
 8000a4a:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d108      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		counter = 0;
 8000a54:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
		next_pattern = 1;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
		Choose_Pattern();
 8000a60:	f7ff ff08 	bl	8000874 <Choose_Pattern>
 8000a64:	e01a      	b.n	8000a9c <HAL_TIM_PeriodElapsedCallback+0xa8>
	}else if( counter == 5 && current_pattern == 1)
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b05      	cmp	r3, #5
 8000a6e:	d10d      	bne.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x98>
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d108      	bne.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x98>
	{
		counter = 0;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
		next_pattern = 2;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a82:	2202      	movs	r2, #2
 8000a84:	701a      	strb	r2, [r3, #0]
		Choose_Pattern();
 8000a86:	f7ff fef5 	bl	8000874 <Choose_Pattern>
 8000a8a:	e007      	b.n	8000a9c <HAL_TIM_PeriodElapsedCallback+0xa8>
	}else
	{
		counter += 1;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	3301      	adds	r3, #1
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a98:	701a      	strb	r2, [r3, #0]
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000be 	.word	0x200000be
 8000aa8:	200000bf 	.word	0x200000bf
 8000aac:	200000c0 	.word	0x200000c0
 8000ab0:	200000bc 	.word	0x200000bc
 8000ab4:	200000bd 	.word	0x200000bd

08000ab8 <HAL_GPIO_EXTI_Callback>:

// Selects the next pattern after the button is pressed.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == GPIO_PIN_2 )
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d110      	bne.n	8000aea <HAL_GPIO_EXTI_Callback+0x32>
	{
		if( maintenance == 0 )
 8000ac8:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x60>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d11e      	bne.n	8000b10 <HAL_GPIO_EXTI_Callback+0x58>
		{
			counter = 0;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
			maintenance = 1;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
			next_pattern = 3;
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <HAL_GPIO_EXTI_Callback+0x68>)
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	701a      	strb	r2, [r3, #0]
			Choose_Pattern();
 8000ae4:	f7ff fec6 	bl	8000874 <Choose_Pattern>
			maintenance = 0;
			next_pattern = 2;
			Choose_Pattern();
		}
	}
}
 8000ae8:	e012      	b.n	8000b10 <HAL_GPIO_EXTI_Callback+0x58>
	else if ( GPIO_Pin == GPIO_PIN_3 )
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	2b08      	cmp	r3, #8
 8000aee:	d10f      	bne.n	8000b10 <HAL_GPIO_EXTI_Callback+0x58>
		if( maintenance == 1 )
 8000af0:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x60>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d10a      	bne.n	8000b10 <HAL_GPIO_EXTI_Callback+0x58>
			counter = 0;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
			maintenance = 0;
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x60>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
			next_pattern = 2;
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_GPIO_EXTI_Callback+0x68>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	701a      	strb	r2, [r3, #0]
			Choose_Pattern();
 8000b0c:	f7ff feb2 	bl	8000874 <Choose_Pattern>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000be 	.word	0x200000be
 8000b1c:	200000c0 	.word	0x200000c0
 8000b20:	200000bd 	.word	0x200000bd

08000b24 <HAL_MspInit>:

#include <string.h>
#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 fa21 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

	// Enable necessary IRQs
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	f06f 000b 	mvn.w	r0, #11
 8000b36:	f000 fa26 	bl	8000f86 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f06f 000a 	mvn.w	r0, #10
 8000b42:	f000 fa20 	bl	8000f86 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f06f 0009 	mvn.w	r0, #9
 8000b4e:	f000 fa1a 	bl	8000f86 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2103      	movs	r1, #3
 8000b56:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5a:	f000 fa14 	bl	8000f86 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(MemoryManagement_IRQn);
 8000b5e:	f06f 000b 	mvn.w	r0, #11
 8000b62:	f000 fa2c 	bl	8000fbe <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BusFault_IRQn);
 8000b66:	f06f 000a 	mvn.w	r0, #10
 8000b6a:	f000 fa28 	bl	8000fbe <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(UsageFault_IRQn);
 8000b6e:	f06f 0009 	mvn.w	r0, #9
 8000b72:	f000 fa24 	bl	8000fbe <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(SysTick_IRQn);
 8000b76:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7a:	f000 fa20 	bl	8000fbe <HAL_NVIC_EnableIRQ>

	// Enable EXTI2 and EXTI3 for buttons.
	HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	210f      	movs	r1, #15
 8000b82:	2008      	movs	r0, #8
 8000b84:	f000 f9ff 	bl	8000f86 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	2009      	movs	r0, #9
 8000b8e:	f000 f9fa 	bl	8000f86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b92:	2008      	movs	r0, #8
 8000b94:	f000 fa13 	bl	8000fbe <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b98:	2009      	movs	r0, #9
 8000b9a:	f000 fa10 	bl	8000fbe <HAL_NVIC_EnableIRQ>
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	UNUSED(htim);
	__HAL_RCC_TIM5_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bb6:	f043 0308 	orr.w	r3, r3, #8
 8000bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbc:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]

	HAL_NVIC_SetPriority(TIM5_IRQn, 15, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	210f      	movs	r1, #15
 8000bcc:	2032      	movs	r0, #50	@ 0x32
 8000bce:	f000 f9da 	bl	8000f86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000bd2:	2032      	movs	r0, #50	@ 0x32
 8000bd4:	f000 f9f3 	bl	8000fbe <HAL_NVIC_EnableIRQ>

}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800

08000be4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	GPIO_InitTypeDef uart4_gpio;
	memset(&uart4_gpio, 0, sizeof(uart4_gpio));
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2214      	movs	r2, #20
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f002 faed 	bl	80031d4 <memset>

	__HAL_RCC_UART4_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <HAL_UART_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a1a      	ldr	r2, [pc, #104]	@ (8000c6c <HAL_UART_MspInit+0x88>)
 8000c04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <HAL_UART_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <HAL_UART_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a13      	ldr	r2, [pc, #76]	@ (8000c6c <HAL_UART_MspInit+0x88>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <HAL_UART_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]

	uart4_gpio.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8000c32:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c36:	617b      	str	r3, [r7, #20]
	uart4_gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
	uart4_gpio.Pull = GPIO_PULLUP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61fb      	str	r3, [r7, #28]
	uart4_gpio.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61bb      	str	r3, [r7, #24]
	uart4_gpio.Alternate = GPIO_AF8_UART4;
 8000c44:	2308      	movs	r3, #8
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_GPIO_Init(GPIOC, &uart4_gpio);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4808      	ldr	r0, [pc, #32]	@ (8000c70 <HAL_UART_MspInit+0x8c>)
 8000c50:	f000 fa6e 	bl	8001130 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(UART4_IRQn, 15, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	210f      	movs	r1, #15
 8000c58:	2034      	movs	r0, #52	@ 0x34
 8000c5a:	f000 f994 	bl	8000f86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c5e:	2034      	movs	r0, #52	@ 0x34
 8000c60:	f000 f9ad 	bl	8000fbe <HAL_NVIC_EnableIRQ>
}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	@ 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020800 	.word	0x40020800

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c9c:	f7ff ffea 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	@ (8000cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f002 fa8d 	bl	80031e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fc3d 	bl	8000548 <main>
  bx  lr    
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cdc:	0800329c 	.word	0x0800329c
  ldr r2, =_sbss
 8000ce0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ce4:	200000c8 	.word	0x200000c8

08000ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d2c <HAL_Init+0x40>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <HAL_Init+0x40>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	@ (8000d2c <HAL_Init+0x40>)
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f92b 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f808 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d20:	f7ff ff00 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_InitTick+0x54>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <HAL_InitTick+0x58>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f943 	bl	8000fda <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f000 f90b 	bl	8000f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	@ (8000d8c <HAL_InitTick+0x5c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000004 	.word	0x20000004
 8000d88:	2000000c 	.word	0x2000000c
 8000d8c:	20000008 	.word	0x20000008

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2000000c 	.word	0x2000000c
 8000db4:	200000c4 	.word	0x200000c4

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	200000c4 	.word	0x200000c4

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 021f 	and.w	r2, r3, #31
 8000e4c:	4907      	ldr	r1, [pc, #28]	@ (8000e6c <__NVIC_EnableIRQ+0x38>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	@ (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	@ (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	@ 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
         );
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	@ 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f3c:	d301      	bcc.n	8000f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00f      	b.n	8000f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <SysTick_Config+0x40>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f7ff ff8e 	bl	8000e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <SysTick_Config+0x40>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <SysTick_Config+0x40>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff29 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff3e 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff8e 	bl	8000ec4 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5d 	bl	8000e70 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff31 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffa2 	bl	8000f2c <SysTick_Config>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ff6:	f000 f802 	bl	8000ffe <HAL_SYSTICK_Callback>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001018:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800101a:	f7ff fecd 	bl	8000db8 <HAL_GetTick>
 800101e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d008      	beq.n	800103e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2280      	movs	r2, #128	@ 0x80
 8001030:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e052      	b.n	80010e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f022 0216 	bic.w	r2, r2, #22
 800104c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800105c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <HAL_DMA_Abort+0x62>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0208 	bic.w	r2, r2, #8
 800107c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0201 	bic.w	r2, r2, #1
 800108c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800108e:	e013      	b.n	80010b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001090:	f7ff fe92 	bl	8000db8 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b05      	cmp	r3, #5
 800109c:	d90c      	bls.n	80010b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2220      	movs	r2, #32
 80010a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2203      	movs	r2, #3
 80010a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e015      	b.n	80010e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1e4      	bne.n	8001090 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010ca:	223f      	movs	r2, #63	@ 0x3f
 80010cc:	409a      	lsls	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d004      	beq.n	800110a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00c      	b.n	8001124 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2205      	movs	r2, #5
 800110e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0201 	bic.w	r2, r2, #1
 8001120:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	@ 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e16b      	b.n	8001424 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800114c:	2201      	movs	r2, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	429a      	cmp	r2, r3
 8001166:	f040 815a 	bne.w	800141e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d005      	beq.n	8001182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117e:	2b02      	cmp	r3, #2
 8001180:	d130      	bne.n	80011e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	2203      	movs	r2, #3
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	f003 0201 	and.w	r2, r3, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d017      	beq.n	8001220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d123      	bne.n	8001274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	69b9      	ldr	r1, [r7, #24]
 8001270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0203 	and.w	r2, r3, #3
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80b4 	beq.w	800141e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b60      	ldr	r3, [pc, #384]	@ (800143c <HAL_GPIO_Init+0x30c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	4a5f      	ldr	r2, [pc, #380]	@ (800143c <HAL_GPIO_Init+0x30c>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c6:	4b5d      	ldr	r3, [pc, #372]	@ (800143c <HAL_GPIO_Init+0x30c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001440 <HAL_GPIO_Init+0x310>)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a52      	ldr	r2, [pc, #328]	@ (8001444 <HAL_GPIO_Init+0x314>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d02b      	beq.n	8001356 <HAL_GPIO_Init+0x226>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a51      	ldr	r2, [pc, #324]	@ (8001448 <HAL_GPIO_Init+0x318>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d025      	beq.n	8001352 <HAL_GPIO_Init+0x222>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a50      	ldr	r2, [pc, #320]	@ (800144c <HAL_GPIO_Init+0x31c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01f      	beq.n	800134e <HAL_GPIO_Init+0x21e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4f      	ldr	r2, [pc, #316]	@ (8001450 <HAL_GPIO_Init+0x320>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d019      	beq.n	800134a <HAL_GPIO_Init+0x21a>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4e      	ldr	r2, [pc, #312]	@ (8001454 <HAL_GPIO_Init+0x324>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0x216>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4d      	ldr	r2, [pc, #308]	@ (8001458 <HAL_GPIO_Init+0x328>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00d      	beq.n	8001342 <HAL_GPIO_Init+0x212>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4c      	ldr	r2, [pc, #304]	@ (800145c <HAL_GPIO_Init+0x32c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x20e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4b      	ldr	r2, [pc, #300]	@ (8001460 <HAL_GPIO_Init+0x330>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d101      	bne.n	800133a <HAL_GPIO_Init+0x20a>
 8001336:	2307      	movs	r3, #7
 8001338:	e00e      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800133a:	2308      	movs	r3, #8
 800133c:	e00c      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800133e:	2306      	movs	r3, #6
 8001340:	e00a      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001342:	2305      	movs	r3, #5
 8001344:	e008      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001346:	2304      	movs	r3, #4
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800134a:	2303      	movs	r3, #3
 800134c:	e004      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800134e:	2302      	movs	r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001356:	2300      	movs	r3, #0
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f002 0203 	and.w	r2, r2, #3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4093      	lsls	r3, r2
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001368:	4935      	ldr	r1, [pc, #212]	@ (8001440 <HAL_GPIO_Init+0x310>)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001376:	4b3b      	ldr	r3, [pc, #236]	@ (8001464 <HAL_GPIO_Init+0x334>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139a:	4a32      	ldr	r2, [pc, #200]	@ (8001464 <HAL_GPIO_Init+0x334>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a0:	4b30      	ldr	r3, [pc, #192]	@ (8001464 <HAL_GPIO_Init+0x334>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c4:	4a27      	ldr	r2, [pc, #156]	@ (8001464 <HAL_GPIO_Init+0x334>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ca:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <HAL_GPIO_Init+0x334>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001464 <HAL_GPIO_Init+0x334>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <HAL_GPIO_Init+0x334>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001418:	4a12      	ldr	r2, [pc, #72]	@ (8001464 <HAL_GPIO_Init+0x334>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	f67f ae90 	bls.w	800114c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3724      	adds	r7, #36	@ 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40021400 	.word	0x40021400
 800145c:	40021800 	.word	0x40021800
 8001460:	40021c00 	.word	0x40021c00
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	041a      	lsls	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	619a      	str	r2, [r3, #24]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014a6:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d006      	beq.n	80014c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fafc 	bl	8000ab8 <HAL_GPIO_EXTI_Callback>
  }
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e267      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d075      	beq.n	80015d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014ea:	4b88      	ldr	r3, [pc, #544]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d00c      	beq.n	8001510 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f6:	4b85      	ldr	r3, [pc, #532]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d112      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001502:	4b82      	ldr	r3, [pc, #520]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800150a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800150e:	d10b      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	4b7e      	ldr	r3, [pc, #504]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d05b      	beq.n	80015d4 <HAL_RCC_OscConfig+0x108>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d157      	bne.n	80015d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e242      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001530:	d106      	bne.n	8001540 <HAL_RCC_OscConfig+0x74>
 8001532:	4b76      	ldr	r3, [pc, #472]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a75      	ldr	r2, [pc, #468]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e01d      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0x98>
 800154a:	4b70      	ldr	r3, [pc, #448]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6f      	ldr	r2, [pc, #444]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b6d      	ldr	r3, [pc, #436]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6c      	ldr	r2, [pc, #432]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001564:	4b69      	ldr	r3, [pc, #420]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a68      	ldr	r2, [pc, #416]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b66      	ldr	r3, [pc, #408]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a65      	ldr	r2, [pc, #404]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fc18 	bl	8000db8 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fc14 	bl	8000db8 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	@ 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e207      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b5b      	ldr	r3, [pc, #364]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0xc0>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fc04 	bl	8000db8 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fc00 	bl	8000db8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	@ 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1f3      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	4b51      	ldr	r3, [pc, #324]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0xe8>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d063      	beq.n	80016aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015e2:	4b4a      	ldr	r3, [pc, #296]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ee:	4b47      	ldr	r3, [pc, #284]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d11c      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fa:	4b44      	ldr	r3, [pc, #272]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d116      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	4b41      	ldr	r3, [pc, #260]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e1c7      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b3b      	ldr	r3, [pc, #236]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4937      	ldr	r1, [pc, #220]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	e03a      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163c:	4b34      	ldr	r3, [pc, #208]	@ (8001710 <HAL_RCC_OscConfig+0x244>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fbb9 	bl	8000db8 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fbb5 	bl	8000db8 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1a8      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b28      	ldr	r3, [pc, #160]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4925      	ldr	r1, [pc, #148]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <HAL_RCC_OscConfig+0x244>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fb98 	bl	8000db8 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff fb94 	bl	8000db8 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e187      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d036      	beq.n	8001724 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d016      	beq.n	80016ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <HAL_RCC_OscConfig+0x248>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff fb78 	bl	8000db8 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff fb74 	bl	8000db8 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e167      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80016e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x200>
 80016ea:	e01b      	b.n	8001724 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_RCC_OscConfig+0x248>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fb61 	bl	8000db8 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	e00e      	b.n	8001718 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fa:	f7ff fb5d 	bl	8000db8 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d907      	bls.n	8001718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e150      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
 800170c:	40023800 	.word	0x40023800
 8001710:	42470000 	.word	0x42470000
 8001714:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	4b88      	ldr	r3, [pc, #544]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 800171a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ea      	bne.n	80016fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8097 	beq.w	8001860 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001736:	4b81      	ldr	r3, [pc, #516]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b7d      	ldr	r3, [pc, #500]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	4a7c      	ldr	r2, [pc, #496]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	@ 0x40
 8001752:	4b7a      	ldr	r3, [pc, #488]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b77      	ldr	r3, [pc, #476]	@ (8001940 <HAL_RCC_OscConfig+0x474>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d118      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176e:	4b74      	ldr	r3, [pc, #464]	@ (8001940 <HAL_RCC_OscConfig+0x474>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a73      	ldr	r2, [pc, #460]	@ (8001940 <HAL_RCC_OscConfig+0x474>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177a:	f7ff fb1d 	bl	8000db8 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001782:	f7ff fb19 	bl	8000db8 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e10c      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	4b6a      	ldr	r3, [pc, #424]	@ (8001940 <HAL_RCC_OscConfig+0x474>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x2ea>
 80017a8:	4b64      	ldr	r3, [pc, #400]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ac:	4a63      	ldr	r2, [pc, #396]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b4:	e01c      	b.n	80017f0 <HAL_RCC_OscConfig+0x324>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x30c>
 80017be:	4b5f      	ldr	r3, [pc, #380]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c2:	4a5e      	ldr	r2, [pc, #376]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ca:	4b5c      	ldr	r3, [pc, #368]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ce:	4a5b      	ldr	r2, [pc, #364]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0x324>
 80017d8:	4b58      	ldr	r3, [pc, #352]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017dc:	4a57      	ldr	r2, [pc, #348]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e4:	4b55      	ldr	r3, [pc, #340]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e8:	4a54      	ldr	r2, [pc, #336]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017ea:	f023 0304 	bic.w	r3, r3, #4
 80017ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d015      	beq.n	8001824 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff fade 	bl	8000db8 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001800:	f7ff fada 	bl	8000db8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0cb      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001816:	4b49      	ldr	r3, [pc, #292]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0ee      	beq.n	8001800 <HAL_RCC_OscConfig+0x334>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001824:	f7ff fac8 	bl	8000db8 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff fac4 	bl	8000db8 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e0b5      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001842:	4b3e      	ldr	r3, [pc, #248]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ee      	bne.n	800182c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001854:	4b39      	ldr	r3, [pc, #228]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	4a38      	ldr	r2, [pc, #224]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 800185a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800185e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80a1 	beq.w	80019ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800186a:	4b34      	ldr	r3, [pc, #208]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b08      	cmp	r3, #8
 8001874:	d05c      	beq.n	8001930 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d141      	bne.n	8001902 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <HAL_RCC_OscConfig+0x478>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fa98 	bl	8000db8 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff fa94 	bl	8000db8 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e087      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	4b27      	ldr	r3, [pc, #156]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	019b      	lsls	r3, r3, #6
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	3b01      	subs	r3, #1
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018cc:	061b      	lsls	r3, r3, #24
 80018ce:	491b      	ldr	r1, [pc, #108]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <HAL_RCC_OscConfig+0x478>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fa6d 	bl	8000db8 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e2:	f7ff fa69 	bl	8000db8 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e05c      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x416>
 8001900:	e054      	b.n	80019ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <HAL_RCC_OscConfig+0x478>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fa56 	bl	8000db8 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff fa52 	bl	8000db8 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e045      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x444>
 800192e:	e03d      	b.n	80019ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d107      	bne.n	8001948 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e038      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
 800193c:	40023800 	.word	0x40023800
 8001940:	40007000 	.word	0x40007000
 8001944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <HAL_RCC_OscConfig+0x4ec>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d028      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d121      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d11a      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001978:	4013      	ands	r3, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800197e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001980:	4293      	cmp	r3, r2
 8001982:	d111      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	085b      	lsrs	r3, r3, #1
 8001990:	3b01      	subs	r3, #1
 8001992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800

080019bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0cc      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d0:	4b68      	ldr	r3, [pc, #416]	@ (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d90c      	bls.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b65      	ldr	r3, [pc, #404]	@ (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b63      	ldr	r3, [pc, #396]	@ (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0b8      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a10:	4b59      	ldr	r3, [pc, #356]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a58      	ldr	r2, [pc, #352]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a28:	4b53      	ldr	r3, [pc, #332]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a34:	4b50      	ldr	r3, [pc, #320]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	494d      	ldr	r1, [pc, #308]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d044      	beq.n	8001adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b47      	ldr	r3, [pc, #284]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d119      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e07f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e06f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e067      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9a:	4b37      	ldr	r3, [pc, #220]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 0203 	bic.w	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4934      	ldr	r1, [pc, #208]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aac:	f7ff f984 	bl	8000db8 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab4:	f7ff f980 	bl	8000db8 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e04f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	4b2b      	ldr	r3, [pc, #172]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 020c 	and.w	r2, r3, #12
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1eb      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001adc:	4b25      	ldr	r3, [pc, #148]	@ (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d20c      	bcs.n	8001b04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b20      	ldr	r3, [pc, #128]	@ (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e032      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b10:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4916      	ldr	r1, [pc, #88]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2e:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	490e      	ldr	r1, [pc, #56]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b42:	f000 f821 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	490a      	ldr	r1, [pc, #40]	@ (8001b7c <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	5ccb      	ldrb	r3, [r1, r3]
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	4a09      	ldr	r2, [pc, #36]	@ (8001b80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f8e4 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	08003274 	.word	0x08003274
 8001b80:	20000004 	.word	0x20000004
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b8c:	b094      	sub	sp, #80	@ 0x50
 8001b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba0:	4b79      	ldr	r3, [pc, #484]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d00d      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	f200 80e1 	bhi.w	8001d74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x34>
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bba:	e0db      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bbc:	4b73      	ldr	r3, [pc, #460]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bc0:	e0db      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bc2:	4b73      	ldr	r3, [pc, #460]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bc6:	e0d8      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d063      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bde:	4b6a      	ldr	r3, [pc, #424]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	099b      	lsrs	r3, r3, #6
 8001be4:	2200      	movs	r2, #0
 8001be6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001be8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bfa:	4622      	mov	r2, r4
 8001bfc:	462b      	mov	r3, r5
 8001bfe:	f04f 0000 	mov.w	r0, #0
 8001c02:	f04f 0100 	mov.w	r1, #0
 8001c06:	0159      	lsls	r1, r3, #5
 8001c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c0c:	0150      	lsls	r0, r2, #5
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4621      	mov	r1, r4
 8001c14:	1a51      	subs	r1, r2, r1
 8001c16:	6139      	str	r1, [r7, #16]
 8001c18:	4629      	mov	r1, r5
 8001c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c2c:	4659      	mov	r1, fp
 8001c2e:	018b      	lsls	r3, r1, #6
 8001c30:	4651      	mov	r1, sl
 8001c32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c36:	4651      	mov	r1, sl
 8001c38:	018a      	lsls	r2, r1, #6
 8001c3a:	4651      	mov	r1, sl
 8001c3c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c40:	4659      	mov	r1, fp
 8001c42:	eb63 0901 	sbc.w	r9, r3, r1
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c5a:	4690      	mov	r8, r2
 8001c5c:	4699      	mov	r9, r3
 8001c5e:	4623      	mov	r3, r4
 8001c60:	eb18 0303 	adds.w	r3, r8, r3
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	462b      	mov	r3, r5
 8001c68:	eb49 0303 	adc.w	r3, r9, r3
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	024b      	lsls	r3, r1, #9
 8001c7e:	4621      	mov	r1, r4
 8001c80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c84:	4621      	mov	r1, r4
 8001c86:	024a      	lsls	r2, r1, #9
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c8e:	2200      	movs	r2, #0
 8001c90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c98:	f7fe fa9e 	bl	80001d8 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ca4:	e058      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca6:	4b38      	ldr	r3, [pc, #224]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	099b      	lsrs	r3, r3, #6
 8001cac:	2200      	movs	r2, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cb6:	623b      	str	r3, [r7, #32]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cc0:	4642      	mov	r2, r8
 8001cc2:	464b      	mov	r3, r9
 8001cc4:	f04f 0000 	mov.w	r0, #0
 8001cc8:	f04f 0100 	mov.w	r1, #0
 8001ccc:	0159      	lsls	r1, r3, #5
 8001cce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd2:	0150      	lsls	r0, r2, #5
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4641      	mov	r1, r8
 8001cda:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cde:	4649      	mov	r1, r9
 8001ce0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cf8:	ebb2 040a 	subs.w	r4, r2, sl
 8001cfc:	eb63 050b 	sbc.w	r5, r3, fp
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	00eb      	lsls	r3, r5, #3
 8001d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d0e:	00e2      	lsls	r2, r4, #3
 8001d10:	4614      	mov	r4, r2
 8001d12:	461d      	mov	r5, r3
 8001d14:	4643      	mov	r3, r8
 8001d16:	18e3      	adds	r3, r4, r3
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	464b      	mov	r3, r9
 8001d1c:	eb45 0303 	adc.w	r3, r5, r3
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d2e:	4629      	mov	r1, r5
 8001d30:	028b      	lsls	r3, r1, #10
 8001d32:	4621      	mov	r1, r4
 8001d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d38:	4621      	mov	r1, r4
 8001d3a:	028a      	lsls	r2, r1, #10
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d42:	2200      	movs	r2, #0
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	61fa      	str	r2, [r7, #28]
 8001d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d4c:	f7fe fa44 	bl	80001d8 <__aeabi_uldivmod>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4613      	mov	r3, r2
 8001d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	0c1b      	lsrs	r3, r3, #16
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	3301      	adds	r3, #1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d72:	e002      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3750      	adds	r7, #80	@ 0x50
 8001d80:	46bd      	mov	sp, r7
 8001d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	00f42400 	.word	0x00f42400
 8001d90:	007a1200 	.word	0x007a1200

08001d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d98:	4b03      	ldr	r3, [pc, #12]	@ (8001da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000004 	.word	0x20000004

08001dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001db0:	f7ff fff0 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0a9b      	lsrs	r3, r3, #10
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4903      	ldr	r1, [pc, #12]	@ (8001dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	08003284 	.word	0x08003284

08001dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dd8:	f7ff ffdc 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	0b5b      	lsrs	r3, r3, #13
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4903      	ldr	r1, [pc, #12]	@ (8001df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dea:	5ccb      	ldrb	r3, [r1, r3]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	08003284 	.word	0x08003284

08001dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e041      	b.n	8001e92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe febe 	bl	8000ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3304      	adds	r3, #4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	f000 f9b6 	bl	80021ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d001      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e04e      	b.n	8001f52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a23      	ldr	r2, [pc, #140]	@ (8001f60 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d022      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ede:	d01d      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f64 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d018      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1e      	ldr	r2, [pc, #120]	@ (8001f68 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d013      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00e      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d009      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	@ (8001f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d004      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d111      	bne.n	8001f40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d010      	beq.n	8001f50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3e:	e007      	b.n	8001f50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40000800 	.word	0x40000800
 8001f6c:	40000c00 	.word	0x40000c00
 8001f70:	40010400 	.word	0x40010400
 8001f74:	40014000 	.word	0x40014000
 8001f78:	40001800 	.word	0x40001800

08001f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d020      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01b      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0202 	mvn.w	r2, #2
 8001fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8d2 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8c4 	bl	800215c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f8d5 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d020      	beq.n	800202c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01b      	beq.n	800202c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0204 	mvn.w	r2, #4
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f8ac 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f89e 	bl	800215c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f8af 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d020      	beq.n	8002078 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01b      	beq.n	8002078 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0208 	mvn.w	r2, #8
 8002048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2204      	movs	r2, #4
 800204e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f886 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 8002064:	e005      	b.n	8002072 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f878 	bl	800215c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f889 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d020      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01b      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0210 	mvn.w	r2, #16
 8002094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2208      	movs	r2, #8
 800209a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f860 	bl	8002170 <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f852 	bl	800215c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f863 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00c      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0201 	mvn.w	r2, #1
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7fe fc86 	bl	80009f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00c      	beq.n	800210c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f906 	bl	8002318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00c      	beq.n	8002130 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800211c:	2b00      	cmp	r3, #0
 800211e:	d007      	beq.n	8002130 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f834 	bl	8002198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00c      	beq.n	8002154 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0220 	mvn.w	r2, #32
 800214c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8d8 	bl	8002304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a46      	ldr	r2, [pc, #280]	@ (80022d8 <TIM_Base_SetConfig+0x12c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d013      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ca:	d00f      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a43      	ldr	r2, [pc, #268]	@ (80022dc <TIM_Base_SetConfig+0x130>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00b      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a42      	ldr	r2, [pc, #264]	@ (80022e0 <TIM_Base_SetConfig+0x134>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d007      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a41      	ldr	r2, [pc, #260]	@ (80022e4 <TIM_Base_SetConfig+0x138>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d003      	beq.n	80021ec <TIM_Base_SetConfig+0x40>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a40      	ldr	r2, [pc, #256]	@ (80022e8 <TIM_Base_SetConfig+0x13c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d108      	bne.n	80021fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a35      	ldr	r2, [pc, #212]	@ (80022d8 <TIM_Base_SetConfig+0x12c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d02b      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800220c:	d027      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a32      	ldr	r2, [pc, #200]	@ (80022dc <TIM_Base_SetConfig+0x130>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d023      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a31      	ldr	r2, [pc, #196]	@ (80022e0 <TIM_Base_SetConfig+0x134>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01f      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a30      	ldr	r2, [pc, #192]	@ (80022e4 <TIM_Base_SetConfig+0x138>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01b      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a2f      	ldr	r2, [pc, #188]	@ (80022e8 <TIM_Base_SetConfig+0x13c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d017      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a2e      	ldr	r2, [pc, #184]	@ (80022ec <TIM_Base_SetConfig+0x140>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a2d      	ldr	r2, [pc, #180]	@ (80022f0 <TIM_Base_SetConfig+0x144>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00f      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a2c      	ldr	r2, [pc, #176]	@ (80022f4 <TIM_Base_SetConfig+0x148>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00b      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a2b      	ldr	r2, [pc, #172]	@ (80022f8 <TIM_Base_SetConfig+0x14c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a2a      	ldr	r2, [pc, #168]	@ (80022fc <TIM_Base_SetConfig+0x150>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d003      	beq.n	800225e <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a29      	ldr	r2, [pc, #164]	@ (8002300 <TIM_Base_SetConfig+0x154>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d108      	bne.n	8002270 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a10      	ldr	r2, [pc, #64]	@ (80022d8 <TIM_Base_SetConfig+0x12c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d003      	beq.n	80022a4 <TIM_Base_SetConfig+0xf8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a12      	ldr	r2, [pc, #72]	@ (80022e8 <TIM_Base_SetConfig+0x13c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d103      	bne.n	80022ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d105      	bne.n	80022ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f023 0201 	bic.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	611a      	str	r2, [r3, #16]
  }
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40000400 	.word	0x40000400
 80022e0:	40000800 	.word	0x40000800
 80022e4:	40000c00 	.word	0x40000c00
 80022e8:	40010400 	.word	0x40010400
 80022ec:	40014000 	.word	0x40014000
 80022f0:	40014400 	.word	0x40014400
 80022f4:	40014800 	.word	0x40014800
 80022f8:	40001800 	.word	0x40001800
 80022fc:	40001c00 	.word	0x40001c00
 8002300:	40002000 	.word	0x40002000

08002304 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e042      	b.n	80023c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe fc46 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2224      	movs	r2, #36	@ 0x24
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800236e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fcbb 	bl	8002cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d121      	bne.n	800242a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HAL_UART_Transmit_IT+0x26>
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e01a      	b.n	800242c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	88fa      	ldrh	r2, [r7, #6]
 8002400:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	88fa      	ldrh	r2, [r7, #6]
 8002406:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2221      	movs	r2, #33	@ 0x21
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002424:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
  }
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0ba      	sub	sp, #232	@ 0xe8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800246a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
 800248a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fb69 	bl	8002b6e <UART_Receive_IT>
      return;
 800249c:	e25b      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800249e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80de 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
 80024a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80d1 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
 80024ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
 80024f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	f043 0202 	orr.w	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
 8002516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002526:	f043 0204 	orr.w	r2, r3, #4
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800252e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d011      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
 800253a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f043 0208 	orr.w	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 81f2 	beq.w	800294c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
 8002574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 faf4 	bl	8002b6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_UART_IRQHandler+0x17a>
 80025aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d04f      	beq.n	8002652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f9fc 	bl	80029b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c2:	2b40      	cmp	r3, #64	@ 0x40
 80025c4:	d141      	bne.n	800264a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3314      	adds	r3, #20
 80025cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80025dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3314      	adds	r3, #20
 80025ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80025fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002602:	e841 2300 	strex	r3, r2, [r1]
 8002606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800260a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1d9      	bne.n	80025c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d013      	beq.n	8002642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261e:	4a7e      	ldr	r2, [pc, #504]	@ (8002818 <HAL_UART_IRQHandler+0x3e0>)
 8002620:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fd60 	bl	80010ec <HAL_DMA_Abort_IT>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800263c:	4610      	mov	r0, r2
 800263e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	e00e      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f99e 	bl	8002984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	e00a      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f99a 	bl	8002984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e006      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f996 	bl	8002984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800265e:	e175      	b.n	800294c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	bf00      	nop
    return;
 8002662:	e173      	b.n	800294c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	2b01      	cmp	r3, #1
 800266a:	f040 814f 	bne.w	800290c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8148 	beq.w	800290c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800267c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8141 	beq.w	800290c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026aa:	2b40      	cmp	r3, #64	@ 0x40
 80026ac:	f040 80b6 	bne.w	800281c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8145 	beq.w	8002950 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026ce:	429a      	cmp	r2, r3
 80026d0:	f080 813e 	bcs.w	8002950 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026e6:	f000 8088 	beq.w	80027fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002700:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002708:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002716:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800271a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002722:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1d9      	bne.n	80026ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3314      	adds	r3, #20
 800273c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002740:	e853 3f00 	ldrex	r3, [r3]
 8002744:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002746:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3314      	adds	r3, #20
 8002756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800275a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800275e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002762:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800276c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e1      	bne.n	8002736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3314      	adds	r3, #20
 8002778:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3314      	adds	r3, #20
 8002792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002796:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002798:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800279c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800279e:	e841 2300 	strex	r3, r2, [r1]
 80027a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80027a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e3      	bne.n	8002772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80027c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027ca:	f023 0310 	bic.w	r3, r3, #16
 80027ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	330c      	adds	r3, #12
 80027d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80027dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027e4:	e841 2300 	strex	r3, r2, [r1]
 80027e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80027ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e3      	bne.n	80027b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fc09 	bl	800100c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002808:	b29b      	uxth	r3, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	b29b      	uxth	r3, r3
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8c1 	bl	8002998 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002816:	e09b      	b.n	8002950 <HAL_UART_IRQHandler+0x518>
 8002818:	08002a77 	.word	0x08002a77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002824:	b29b      	uxth	r3, r3
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 808e 	beq.w	8002954 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8089 	beq.w	8002954 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	330c      	adds	r3, #12
 8002848:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800284c:	e853 3f00 	ldrex	r3, [r3]
 8002850:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002858:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	330c      	adds	r3, #12
 8002862:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002866:	647a      	str	r2, [r7, #68]	@ 0x44
 8002868:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800286c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e3      	bne.n	8002842 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	3314      	adds	r3, #20
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	e853 3f00 	ldrex	r3, [r3]
 8002888:	623b      	str	r3, [r7, #32]
   return(result);
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3314      	adds	r3, #20
 800289a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800289e:	633a      	str	r2, [r7, #48]	@ 0x30
 80028a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028a6:	e841 2300 	strex	r3, r2, [r1]
 80028aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80028ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1e3      	bne.n	800287a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	e853 3f00 	ldrex	r3, [r3]
 80028ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0310 	bic.w	r3, r3, #16
 80028d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	330c      	adds	r3, #12
 80028e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80028e4:	61fa      	str	r2, [r7, #28]
 80028e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e8:	69b9      	ldr	r1, [r7, #24]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	e841 2300 	strex	r3, r2, [r1]
 80028f0:	617b      	str	r3, [r7, #20]
   return(result);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e3      	bne.n	80028c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f847 	bl	8002998 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800290a:	e023      	b.n	8002954 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800290c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002914:	2b00      	cmp	r3, #0
 8002916:	d009      	beq.n	800292c <HAL_UART_IRQHandler+0x4f4>
 8002918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800291c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f8ba 	bl	8002a9e <UART_Transmit_IT>
    return;
 800292a:	e014      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800292c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00e      	beq.n	8002956 <HAL_UART_IRQHandler+0x51e>
 8002938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800293c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f8fa 	bl	8002b3e <UART_EndTransmit_IT>
    return;
 800294a:	e004      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
    return;
 800294c:	bf00      	nop
 800294e:	e002      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
      return;
 8002950:	bf00      	nop
 8002952:	e000      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
      return;
 8002954:	bf00      	nop
  }
}
 8002956:	37e8      	adds	r7, #232	@ 0xe8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b095      	sub	sp, #84	@ 0x54
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	330c      	adds	r3, #12
 80029be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c2:	e853 3f00 	ldrex	r3, [r3]
 80029c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80029da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029e0:	e841 2300 	strex	r3, r2, [r1]
 80029e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e5      	bne.n	80029b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3314      	adds	r3, #20
 80029f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	e853 3f00 	ldrex	r3, [r3]
 80029fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3314      	adds	r3, #20
 8002a0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a14:	e841 2300 	strex	r3, r2, [r1]
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e5      	bne.n	80029ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d119      	bne.n	8002a5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	e853 3f00 	ldrex	r3, [r3]
 8002a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f023 0310 	bic.w	r3, r3, #16
 8002a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a48:	61ba      	str	r2, [r7, #24]
 8002a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4c:	6979      	ldr	r1, [r7, #20]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	e841 2300 	strex	r3, r2, [r1]
 8002a54:	613b      	str	r3, [r7, #16]
   return(result);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e5      	bne.n	8002a28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a6a:	bf00      	nop
 8002a6c:	3754      	adds	r7, #84	@ 0x54
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7ff ff77 	bl	8002984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b21      	cmp	r3, #33	@ 0x21
 8002ab0:	d13e      	bne.n	8002b30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aba:	d114      	bne.n	8002ae6 <UART_Transmit_IT+0x48>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d110      	bne.n	8002ae6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ad8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	1c9a      	adds	r2, r3, #2
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	621a      	str	r2, [r3, #32]
 8002ae4:	e008      	b.n	8002af8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	1c59      	adds	r1, r3, #1
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6211      	str	r1, [r2, #32]
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4619      	mov	r1, r3
 8002b06:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10f      	bne.n	8002b2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e000      	b.n	8002b32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b30:	2302      	movs	r3, #2
  }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff fefc 	bl	800295c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b08c      	sub	sp, #48	@ 0x30
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b22      	cmp	r3, #34	@ 0x22
 8002b80:	f040 80ae 	bne.w	8002ce0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b8c:	d117      	bne.n	8002bbe <UART_Receive_IT+0x50>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d113      	bne.n	8002bbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb6:	1c9a      	adds	r2, r3, #2
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bbc:	e026      	b.n	8002c0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bd0:	d007      	beq.n	8002be2 <UART_Receive_IT+0x74>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10a      	bne.n	8002bf0 <UART_Receive_IT+0x82>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e008      	b.n	8002c02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d15d      	bne.n	8002cdc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0220 	bic.w	r2, r2, #32
 8002c2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d135      	bne.n	8002cd2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f023 0310 	bic.w	r3, r3, #16
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c8c:	623a      	str	r2, [r7, #32]
 8002c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	69f9      	ldr	r1, [r7, #28]
 8002c92:	6a3a      	ldr	r2, [r7, #32]
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e5      	bne.n	8002c6c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d10a      	bne.n	8002cc4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff fe64 	bl	8002998 <HAL_UARTEx_RxEventCallback>
 8002cd0:	e002      	b.n	8002cd8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fe4c 	bl	8002970 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e002      	b.n	8002ce2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e000      	b.n	8002ce2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
  }
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3730      	adds	r7, #48	@ 0x30
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf0:	b0c0      	sub	sp, #256	@ 0x100
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d08:	68d9      	ldr	r1, [r3, #12]
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	ea40 0301 	orr.w	r3, r0, r1
 8002d14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002d44:	f021 010c 	bic.w	r1, r1, #12
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d52:	430b      	orrs	r3, r1
 8002d54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d66:	6999      	ldr	r1, [r3, #24]
 8002d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	ea40 0301 	orr.w	r3, r0, r1
 8002d72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4b8f      	ldr	r3, [pc, #572]	@ (8002fb8 <UART_SetConfig+0x2cc>)
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d005      	beq.n	8002d8c <UART_SetConfig+0xa0>
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b8d      	ldr	r3, [pc, #564]	@ (8002fbc <UART_SetConfig+0x2d0>)
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d104      	bne.n	8002d96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d8c:	f7ff f822 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 8002d90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d94:	e003      	b.n	8002d9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d96:	f7ff f809 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 8002d9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002da8:	f040 810c 	bne.w	8002fc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002db6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002dba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	462b      	mov	r3, r5
 8002dc2:	1891      	adds	r1, r2, r2
 8002dc4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002dc6:	415b      	adcs	r3, r3
 8002dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002dce:	4621      	mov	r1, r4
 8002dd0:	eb12 0801 	adds.w	r8, r2, r1
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	eb43 0901 	adc.w	r9, r3, r1
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dee:	4690      	mov	r8, r2
 8002df0:	4699      	mov	r9, r3
 8002df2:	4623      	mov	r3, r4
 8002df4:	eb18 0303 	adds.w	r3, r8, r3
 8002df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	eb49 0303 	adc.w	r3, r9, r3
 8002e02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	18db      	adds	r3, r3, r3
 8002e1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e20:	4613      	mov	r3, r2
 8002e22:	eb42 0303 	adc.w	r3, r2, r3
 8002e26:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e30:	f7fd f9d2 	bl	80001d8 <__aeabi_uldivmod>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4b61      	ldr	r3, [pc, #388]	@ (8002fc0 <UART_SetConfig+0x2d4>)
 8002e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	011c      	lsls	r4, r3, #4
 8002e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002e50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002e54:	4642      	mov	r2, r8
 8002e56:	464b      	mov	r3, r9
 8002e58:	1891      	adds	r1, r2, r2
 8002e5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e5c:	415b      	adcs	r3, r3
 8002e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e64:	4641      	mov	r1, r8
 8002e66:	eb12 0a01 	adds.w	sl, r2, r1
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e84:	4692      	mov	sl, r2
 8002e86:	469b      	mov	fp, r3
 8002e88:	4643      	mov	r3, r8
 8002e8a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e92:	464b      	mov	r3, r9
 8002e94:	eb4b 0303 	adc.w	r3, fp, r3
 8002e98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ea8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002eac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	18db      	adds	r3, r3, r3
 8002eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	eb42 0303 	adc.w	r3, r2, r3
 8002ebc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ebe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ec2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002ec6:	f7fd f987 	bl	80001d8 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc0 <UART_SetConfig+0x2d4>)
 8002ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2264      	movs	r2, #100	@ 0x64
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	1acb      	subs	r3, r1, r3
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ee6:	4b36      	ldr	r3, [pc, #216]	@ (8002fc0 <UART_SetConfig+0x2d4>)
 8002ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ef4:	441c      	add	r4, r3
 8002ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f08:	4642      	mov	r2, r8
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1891      	adds	r1, r2, r2
 8002f0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f10:	415b      	adcs	r3, r3
 8002f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f18:	4641      	mov	r1, r8
 8002f1a:	1851      	adds	r1, r2, r1
 8002f1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f1e:	4649      	mov	r1, r9
 8002f20:	414b      	adcs	r3, r1
 8002f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f30:	4659      	mov	r1, fp
 8002f32:	00cb      	lsls	r3, r1, #3
 8002f34:	4651      	mov	r1, sl
 8002f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f3a:	4651      	mov	r1, sl
 8002f3c:	00ca      	lsls	r2, r1, #3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	4642      	mov	r2, r8
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f4c:	464b      	mov	r3, r9
 8002f4e:	460a      	mov	r2, r1
 8002f50:	eb42 0303 	adc.w	r3, r2, r3
 8002f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	18db      	adds	r3, r3, r3
 8002f70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f72:	4613      	mov	r3, r2
 8002f74:	eb42 0303 	adc.w	r3, r2, r3
 8002f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f82:	f7fd f929 	bl	80001d8 <__aeabi_uldivmod>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc0 <UART_SetConfig+0x2d4>)
 8002f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	2164      	movs	r1, #100	@ 0x64
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	3332      	adds	r3, #50	@ 0x32
 8002f9e:	4a08      	ldr	r2, [pc, #32]	@ (8002fc0 <UART_SetConfig+0x2d4>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	f003 0207 	and.w	r2, r3, #7
 8002faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4422      	add	r2, r4
 8002fb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fb4:	e106      	b.n	80031c4 <UART_SetConfig+0x4d8>
 8002fb6:	bf00      	nop
 8002fb8:	40011000 	.word	0x40011000
 8002fbc:	40011400 	.word	0x40011400
 8002fc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002fce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002fd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002fd6:	4642      	mov	r2, r8
 8002fd8:	464b      	mov	r3, r9
 8002fda:	1891      	adds	r1, r2, r2
 8002fdc:	6239      	str	r1, [r7, #32]
 8002fde:	415b      	adcs	r3, r3
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fe6:	4641      	mov	r1, r8
 8002fe8:	1854      	adds	r4, r2, r1
 8002fea:	4649      	mov	r1, r9
 8002fec:	eb43 0501 	adc.w	r5, r3, r1
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	00eb      	lsls	r3, r5, #3
 8002ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ffe:	00e2      	lsls	r2, r4, #3
 8003000:	4614      	mov	r4, r2
 8003002:	461d      	mov	r5, r3
 8003004:	4643      	mov	r3, r8
 8003006:	18e3      	adds	r3, r4, r3
 8003008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800300c:	464b      	mov	r3, r9
 800300e:	eb45 0303 	adc.w	r3, r5, r3
 8003012:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003022:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003032:	4629      	mov	r1, r5
 8003034:	008b      	lsls	r3, r1, #2
 8003036:	4621      	mov	r1, r4
 8003038:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800303c:	4621      	mov	r1, r4
 800303e:	008a      	lsls	r2, r1, #2
 8003040:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003044:	f7fd f8c8 	bl	80001d8 <__aeabi_uldivmod>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4b60      	ldr	r3, [pc, #384]	@ (80031d0 <UART_SetConfig+0x4e4>)
 800304e:	fba3 2302 	umull	r2, r3, r3, r2
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	011c      	lsls	r4, r3, #4
 8003056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800305a:	2200      	movs	r2, #0
 800305c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003060:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003064:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	1891      	adds	r1, r2, r2
 800306e:	61b9      	str	r1, [r7, #24]
 8003070:	415b      	adcs	r3, r3
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003078:	4641      	mov	r1, r8
 800307a:	1851      	adds	r1, r2, r1
 800307c:	6139      	str	r1, [r7, #16]
 800307e:	4649      	mov	r1, r9
 8003080:	414b      	adcs	r3, r1
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003090:	4659      	mov	r1, fp
 8003092:	00cb      	lsls	r3, r1, #3
 8003094:	4651      	mov	r1, sl
 8003096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800309a:	4651      	mov	r1, sl
 800309c:	00ca      	lsls	r2, r1, #3
 800309e:	4610      	mov	r0, r2
 80030a0:	4619      	mov	r1, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	4642      	mov	r2, r8
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030ac:	464b      	mov	r3, r9
 80030ae:	460a      	mov	r2, r1
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80030d0:	4649      	mov	r1, r9
 80030d2:	008b      	lsls	r3, r1, #2
 80030d4:	4641      	mov	r1, r8
 80030d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030da:	4641      	mov	r1, r8
 80030dc:	008a      	lsls	r2, r1, #2
 80030de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80030e2:	f7fd f879 	bl	80001d8 <__aeabi_uldivmod>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	4b38      	ldr	r3, [pc, #224]	@ (80031d0 <UART_SetConfig+0x4e4>)
 80030ee:	fba3 2301 	umull	r2, r3, r3, r1
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2264      	movs	r2, #100	@ 0x64
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	1acb      	subs	r3, r1, r3
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	3332      	adds	r3, #50	@ 0x32
 8003100:	4a33      	ldr	r2, [pc, #204]	@ (80031d0 <UART_SetConfig+0x4e4>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800310c:	441c      	add	r4, r3
 800310e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003112:	2200      	movs	r2, #0
 8003114:	673b      	str	r3, [r7, #112]	@ 0x70
 8003116:	677a      	str	r2, [r7, #116]	@ 0x74
 8003118:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800311c:	4642      	mov	r2, r8
 800311e:	464b      	mov	r3, r9
 8003120:	1891      	adds	r1, r2, r2
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	415b      	adcs	r3, r3
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800312c:	4641      	mov	r1, r8
 800312e:	1851      	adds	r1, r2, r1
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	4649      	mov	r1, r9
 8003134:	414b      	adcs	r3, r1
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003144:	4659      	mov	r1, fp
 8003146:	00cb      	lsls	r3, r1, #3
 8003148:	4651      	mov	r1, sl
 800314a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800314e:	4651      	mov	r1, sl
 8003150:	00ca      	lsls	r2, r1, #3
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	4603      	mov	r3, r0
 8003158:	4642      	mov	r2, r8
 800315a:	189b      	adds	r3, r3, r2
 800315c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800315e:	464b      	mov	r3, r9
 8003160:	460a      	mov	r2, r1
 8003162:	eb42 0303 	adc.w	r3, r2, r3
 8003166:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	663b      	str	r3, [r7, #96]	@ 0x60
 8003172:	667a      	str	r2, [r7, #100]	@ 0x64
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003180:	4649      	mov	r1, r9
 8003182:	008b      	lsls	r3, r1, #2
 8003184:	4641      	mov	r1, r8
 8003186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800318a:	4641      	mov	r1, r8
 800318c:	008a      	lsls	r2, r1, #2
 800318e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003192:	f7fd f821 	bl	80001d8 <__aeabi_uldivmod>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <UART_SetConfig+0x4e4>)
 800319c:	fba3 1302 	umull	r1, r3, r3, r2
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	2164      	movs	r1, #100	@ 0x64
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	3332      	adds	r3, #50	@ 0x32
 80031ae:	4a08      	ldr	r2, [pc, #32]	@ (80031d0 <UART_SetConfig+0x4e4>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	f003 020f 	and.w	r2, r3, #15
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4422      	add	r2, r4
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80031ca:	46bd      	mov	sp, r7
 80031cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031d0:	51eb851f 	.word	0x51eb851f

080031d4 <memset>:
 80031d4:	4402      	add	r2, r0
 80031d6:	4603      	mov	r3, r0
 80031d8:	4293      	cmp	r3, r2
 80031da:	d100      	bne.n	80031de <memset+0xa>
 80031dc:	4770      	bx	lr
 80031de:	f803 1b01 	strb.w	r1, [r3], #1
 80031e2:	e7f9      	b.n	80031d8 <memset+0x4>

080031e4 <__libc_init_array>:
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	4d0d      	ldr	r5, [pc, #52]	@ (800321c <__libc_init_array+0x38>)
 80031e8:	4c0d      	ldr	r4, [pc, #52]	@ (8003220 <__libc_init_array+0x3c>)
 80031ea:	1b64      	subs	r4, r4, r5
 80031ec:	10a4      	asrs	r4, r4, #2
 80031ee:	2600      	movs	r6, #0
 80031f0:	42a6      	cmp	r6, r4
 80031f2:	d109      	bne.n	8003208 <__libc_init_array+0x24>
 80031f4:	4d0b      	ldr	r5, [pc, #44]	@ (8003224 <__libc_init_array+0x40>)
 80031f6:	4c0c      	ldr	r4, [pc, #48]	@ (8003228 <__libc_init_array+0x44>)
 80031f8:	f000 f818 	bl	800322c <_init>
 80031fc:	1b64      	subs	r4, r4, r5
 80031fe:	10a4      	asrs	r4, r4, #2
 8003200:	2600      	movs	r6, #0
 8003202:	42a6      	cmp	r6, r4
 8003204:	d105      	bne.n	8003212 <__libc_init_array+0x2e>
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	f855 3b04 	ldr.w	r3, [r5], #4
 800320c:	4798      	blx	r3
 800320e:	3601      	adds	r6, #1
 8003210:	e7ee      	b.n	80031f0 <__libc_init_array+0xc>
 8003212:	f855 3b04 	ldr.w	r3, [r5], #4
 8003216:	4798      	blx	r3
 8003218:	3601      	adds	r6, #1
 800321a:	e7f2      	b.n	8003202 <__libc_init_array+0x1e>
 800321c:	08003294 	.word	0x08003294
 8003220:	08003294 	.word	0x08003294
 8003224:	08003294 	.word	0x08003294
 8003228:	08003298 	.word	0x08003298

0800322c <_init>:
 800322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322e:	bf00      	nop
 8003230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003232:	bc08      	pop	{r3}
 8003234:	469e      	mov	lr, r3
 8003236:	4770      	bx	lr

08003238 <_fini>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	bf00      	nop
 800323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323e:	bc08      	pop	{r3}
 8003240:	469e      	mov	lr, r3
 8003242:	4770      	bx	lr
