
Analog_Read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007300  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08007490  08007490  00008490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007884  08007884  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007884  08007884  00008884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800788c  0800788c  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800788c  0800788c  0000888c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007890  08007890  00008890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007894  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000002a8  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000047c  2000047c  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de14  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e6c  00000000  00000000  00017018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  00018e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a1d  00000000  00000000  00019b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021727  00000000  00000000  0001a585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000edd8  00000000  00000000  0003bcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf8a3  00000000  00000000  0004aa84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011a327  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004974  00000000  00000000  0011a36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0011ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007478 	.word	0x08007478

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007478 	.word	0x08007478

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <SysTick_Handler>:

extern UART_HandleTypeDef usart1;
extern TIM_HandleTypeDef pwm_timer;

void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000f18:	f000 fc58 	bl	80017cc <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000f1c:	f001 f867 	bl	8001fee <HAL_SYSTICK_IRQHandler>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&usart1);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <USART1_IRQHandler+0x10>)
 8000f2a:	f002 fd4b 	bl	80039c4 <HAL_UART_IRQHandler>
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000298 	.word	0x20000298

08000f38 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&pwm_timer);
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <TIM2_IRQHandler+0x10>)
 8000f3e:	f002 f841 	bl	8002fc4 <HAL_TIM_IRQHandler>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200002e0 	.word	0x200002e0

08000f4c <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	// Halt execution, when HardFault error occurs.
	for(;;);
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
	// Halt execution, when MemManage error occurs.
	for(;;);
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5c <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	// Halt execution, when BusFault error occurs.
	for(;;);
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
	// Halt execution, when UsageFault error occurs.
	for(;;);
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <UsageFault_Handler+0x4>
 8000f6c:	0000      	movs	r0, r0
	...

08000f70 <main>:
ADC_ChannelConfTypeDef potensiometer_channel, heat_sensor_channel;
UART_HandleTypeDef usart1;
TIM_HandleTypeDef pwm_timer;

int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b096      	sub	sp, #88	@ 0x58
 8000f74:	af00      	add	r7, sp, #0

	char uart_buffer[50] = {0};
 8000f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7a:	2232      	movs	r2, #50	@ 0x32
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f004 f961 	bl	8005246 <memset>
	volatile uint32_t potensiometer_value, heat_sensor_value, intermediate;
	volatile double potensiometer, temp_sensor, int_val = 0;
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	e9c7 2300 	strd	r2, r3, [r7]

	/* Initializes low level hardware at the processor level */
	HAL_Init();
 8000f90:	f000 fbca 	bl	8001728 <HAL_Init>

	// Sets other clock sources besides HSI
	if( SystemClock_Config(HSI_8) != Execution_Succesfull)
 8000f94:	2001      	movs	r0, #1
 8000f96:	f000 f8e9 	bl	800116c <SystemClock_Config>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <main+0x34>
		return Execution_Failed;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e0bb      	b.n	800111c <main+0x1ac>

	// Configure the ADCs
	if( ADC_Config(&adc1_potensiometer, ADC1, &potensiometer_channel, ADC_CHANNEL_0) != Execution_Succesfull)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	4a64      	ldr	r2, [pc, #400]	@ (8001138 <main+0x1c8>)
 8000fa8:	4964      	ldr	r1, [pc, #400]	@ (800113c <main+0x1cc>)
 8000faa:	4865      	ldr	r0, [pc, #404]	@ (8001140 <main+0x1d0>)
 8000fac:	f000 f980 	bl	80012b0 <ADC_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <main+0x4a>
		return Execution_Failed;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e0b0      	b.n	800111c <main+0x1ac>

	if( ADC_Config(&adc2_heat_sensor, ADC2, &heat_sensor_channel, ADC_CHANNEL_1) != Execution_Succesfull)
 8000fba:	2301      	movs	r3, #1
 8000fbc:	4a61      	ldr	r2, [pc, #388]	@ (8001144 <main+0x1d4>)
 8000fbe:	4962      	ldr	r1, [pc, #392]	@ (8001148 <main+0x1d8>)
 8000fc0:	4862      	ldr	r0, [pc, #392]	@ (800114c <main+0x1dc>)
 8000fc2:	f000 f975 	bl	80012b0 <ADC_Config>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <main+0x60>
		return Execution_Failed;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0a5      	b.n	800111c <main+0x1ac>

	// Configure the USART1 module
	if( USART1_Config(&usart1) != Execution_Succesfull )
 8000fd0:	485f      	ldr	r0, [pc, #380]	@ (8001150 <main+0x1e0>)
 8000fd2:	f000 f9b3 	bl	800133c <USART1_Config>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <main+0x70>
		return Execution_Failed;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e09d      	b.n	800111c <main+0x1ac>

	// Configure the PWM timer.
	if( TIM2_PWM_Config(&pwm_timer) != Execution_Succesfull )
 8000fe0:	485c      	ldr	r0, [pc, #368]	@ (8001154 <main+0x1e4>)
 8000fe2:	f000 f9dd 	bl	80013a0 <TIM2_PWM_Config>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <main+0x80>
		return Execution_Failed;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e095      	b.n	800111c <main+0x1ac>

	// Start PWM Timer.
	HAL_TIM_PWM_Start(&pwm_timer, TIM_CHANNEL_3);
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	4858      	ldr	r0, [pc, #352]	@ (8001154 <main+0x1e4>)
 8000ff4:	f001 ff1e 	bl	8002e34 <HAL_TIM_PWM_Start>

	// Infinite loop.
	for(;;){

		// Start potensiometer reading.
		HAL_ADC_Start(&adc1_potensiometer);
 8000ff8:	4851      	ldr	r0, [pc, #324]	@ (8001140 <main+0x1d0>)
 8000ffa:	f000 fc31 	bl	8001860 <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&adc1_potensiometer, 5) == HAL_OK){
 8000ffe:	2105      	movs	r1, #5
 8001000:	484f      	ldr	r0, [pc, #316]	@ (8001140 <main+0x1d0>)
 8001002:	f000 fcb0 	bl	8001966 <HAL_ADC_PollForConversion>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d146      	bne.n	800109a <main+0x12a>
			potensiometer_value = HAL_ADC_GetValue(&adc1_potensiometer);
 800100c:	484c      	ldr	r0, [pc, #304]	@ (8001140 <main+0x1d0>)
 800100e:	f000 fce9 	bl	80019e4 <HAL_ADC_GetValue>
 8001012:	4603      	mov	r3, r0
 8001014:	623b      	str	r3, [r7, #32]
			int_val = (double)potensiometer_value;
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa73 	bl	8000504 <__aeabi_ui2d>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	e9c7 2300 	strd	r2, r3, [r7]
			// Update the PWM signal.
			intermediate = (int_val / 4096) * 19;
 8001026:	e9d7 0100 	ldrd	r0, r1, [r7]
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b4a      	ldr	r3, [pc, #296]	@ (8001158 <main+0x1e8>)
 8001030:	f7ff fc0c 	bl	800084c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b46      	ldr	r3, [pc, #280]	@ (800115c <main+0x1ec>)
 8001042:	f7ff fad9 	bl	80005f8 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fdab 	bl	8000ba8 <__aeabi_d2uiz>
 8001052:	4603      	mov	r3, r0
 8001054:	61bb      	str	r3, [r7, #24]
			__HAL_TIM_SET_COMPARE(&pwm_timer, TIM_CHANNEL_3, intermediate);
 8001056:	4b3f      	ldr	r3, [pc, #252]	@ (8001154 <main+0x1e4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	63da      	str	r2, [r3, #60]	@ 0x3c
			Delay(20); // Delay 20ms
 800105e:	2014      	movs	r0, #20
 8001060:	f000 f9e6 	bl	8001430 <Delay>

			potensiometer = potensiometer_value * 0.0007324;
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa4c 	bl	8000504 <__aeabi_ui2d>
 800106c:	a32e      	add	r3, pc, #184	@ (adr r3, 8001128 <main+0x1b8>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	f7ff fac1 	bl	80005f8 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	e9c7 2304 	strd	r2, r3, [r7, #16]
			sprintf(uart_buffer, "The Potensiometer has a value of: %1.2f Volt.\n\r", potensiometer);
 800107e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001082:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001086:	4936      	ldr	r1, [pc, #216]	@ (8001160 <main+0x1f0>)
 8001088:	f004 f878 	bl	800517c <siprintf>
			HAL_UART_Transmit_IT(&usart1, (const uint8_t* )uart_buffer, 50);
 800108c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001090:	2232      	movs	r2, #50	@ 0x32
 8001092:	4619      	mov	r1, r3
 8001094:	482e      	ldr	r0, [pc, #184]	@ (8001150 <main+0x1e0>)
 8001096:	f002 fc5e 	bl	8003956 <HAL_UART_Transmit_IT>
		}
		HAL_ADC_Stop(&adc1_potensiometer);
 800109a:	4829      	ldr	r0, [pc, #164]	@ (8001140 <main+0x1d0>)
 800109c:	f000 fc4c 	bl	8001938 <HAL_ADC_Stop>

		Delay(100); // Delay ~100ms
 80010a0:	2064      	movs	r0, #100	@ 0x64
 80010a2:	f000 f9c5 	bl	8001430 <Delay>

		// Start heat sensor reading.
		HAL_ADC_Start(&adc2_heat_sensor);
 80010a6:	4829      	ldr	r0, [pc, #164]	@ (800114c <main+0x1dc>)
 80010a8:	f000 fbda 	bl	8001860 <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&adc2_heat_sensor, 5) == HAL_OK){
 80010ac:	2105      	movs	r1, #5
 80010ae:	4827      	ldr	r0, [pc, #156]	@ (800114c <main+0x1dc>)
 80010b0:	f000 fc59 	bl	8001966 <HAL_ADC_PollForConversion>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d128      	bne.n	800110c <main+0x19c>
			heat_sensor_value = HAL_ADC_GetValue(&adc2_heat_sensor);
 80010ba:	4824      	ldr	r0, [pc, #144]	@ (800114c <main+0x1dc>)
 80010bc:	f000 fc92 	bl	80019e4 <HAL_ADC_GetValue>
 80010c0:	4603      	mov	r3, r0
 80010c2:	61fb      	str	r3, [r7, #28]
			temp_sensor = (heat_sensor_value * 0.07324) - 50;
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa1c 	bl	8000504 <__aeabi_ui2d>
 80010cc:	a318      	add	r3, pc, #96	@ (adr r3, 8001130 <main+0x1c0>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fa91 	bl	80005f8 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <main+0x1f4>)
 80010e4:	f7ff f8d0 	bl	8000288 <__aeabi_dsub>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
			sprintf(uart_buffer, "The Temp Sensor has a value of: %1.2f Celsius.\n\r", temp_sensor);
 80010f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010f4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80010f8:	491b      	ldr	r1, [pc, #108]	@ (8001168 <main+0x1f8>)
 80010fa:	f004 f83f 	bl	800517c <siprintf>
			HAL_UART_Transmit_IT(&usart1, (const uint8_t* )uart_buffer, 50);
 80010fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001102:	2232      	movs	r2, #50	@ 0x32
 8001104:	4619      	mov	r1, r3
 8001106:	4812      	ldr	r0, [pc, #72]	@ (8001150 <main+0x1e0>)
 8001108:	f002 fc25 	bl	8003956 <HAL_UART_Transmit_IT>
		}
		HAL_ADC_Stop(&adc2_heat_sensor);
 800110c:	480f      	ldr	r0, [pc, #60]	@ (800114c <main+0x1dc>)
 800110e:	f000 fc13 	bl	8001938 <HAL_ADC_Stop>

		Delay(5000); // Delay 5 sec
 8001112:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001116:	f000 f98b 	bl	8001430 <Delay>
		HAL_ADC_Start(&adc1_potensiometer);
 800111a:	e76d      	b.n	8000ff8 <main+0x88>

	// Stop PWM timer.
	HAL_TIM_PWM_Stop(&pwm_timer, TIM_CHANNEL_3);

	return Execution_Succesfull;
}
 800111c:	4618      	mov	r0, r3
 800111e:	3758      	adds	r7, #88	@ 0x58
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	f3af 8000 	nop.w
 8001128:	06177136 	.word	0x06177136
 800112c:	3f47ffd1 	.word	0x3f47ffd1
 8001130:	4cc25072 	.word	0x4cc25072
 8001134:	3fb2bfdb 	.word	0x3fb2bfdb
 8001138:	20000278 	.word	0x20000278
 800113c:	40012000 	.word	0x40012000
 8001140:	200001f0 	.word	0x200001f0
 8001144:	20000288 	.word	0x20000288
 8001148:	40012100 	.word	0x40012100
 800114c:	20000234 	.word	0x20000234
 8001150:	20000298 	.word	0x20000298
 8001154:	200002e0 	.word	0x200002e0
 8001158:	40b00000 	.word	0x40b00000
 800115c:	40330000 	.word	0x40330000
 8001160:	08007490 	.word	0x08007490
 8001164:	40490000 	.word	0x40490000
 8001168:	080074c0 	.word	0x080074c0

0800116c <SystemClock_Config>:

ReturnStatus SystemClock_Config(Clock_Source_t clk)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b094      	sub	sp, #80	@ 0x50
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	memset(&osc_init, 0, sizeof(osc_init));
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	2230      	movs	r2, #48	@ 0x30
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f004 f861 	bl	8005246 <memset>
	memset(&clk_init, 0, sizeof(clk_init));
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2214      	movs	r2, #20
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f004 f85a 	bl	8005246 <memset>

	switch (clk)
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b03      	cmp	r3, #3
 8001196:	f200 8084 	bhi.w	80012a2 <SystemClock_Config+0x136>
 800119a:	a201      	add	r2, pc, #4	@ (adr r2, 80011a0 <SystemClock_Config+0x34>)
 800119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a0:	080012a3 	.word	0x080012a3
 80011a4:	080011b1 	.word	0x080011b1
 80011a8:	080011f9 	.word	0x080011f9
 80011ac:	0800124d 	.word	0x0800124d
	{
		case HSI_16:
			break;
		case HSI_8:
			osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
			osc_init.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if ( HAL_RCC_OscConfig(&osc_init) != HAL_OK )
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 f951 	bl	8002464 <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x60>
				return Execution_Failed;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e06b      	b.n	80012a4 <SystemClock_Config+0x138>

			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011cc:	230f      	movs	r3, #15
 80011ce:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80011d4:	2380      	movs	r3, #128	@ 0x80
 80011d6:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011dc:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]

			if ( HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK )
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 fbb3 	bl	8002954 <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d055      	beq.n	80012a0 <SystemClock_Config+0x134>
				return Execution_Failed;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e055      	b.n	80012a4 <SystemClock_Config+0x138>
			break;

		case HSE_4:
			osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f8:	2301      	movs	r3, #1
 80011fa:	623b      	str	r3, [r7, #32]
			osc_init.HSEState = RCC_HSE_ON; // YOU HAVE TO CHECK ON THE SCHEMATIC WHETHER HSE IS BYPASSED OR NOT!!!
 80011fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
			if ( HAL_RCC_OscConfig(&osc_init) != HAL_OK )
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	4618      	mov	r0, r3
 8001208:	f001 f92c 	bl	8002464 <HAL_RCC_OscConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0xaa>
				return Execution_Failed;
 8001212:	2301      	movs	r3, #1
 8001214:	e046      	b.n	80012a4 <SystemClock_Config+0x138>

			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001216:	230f      	movs	r3, #15
 8001218:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800121a:	2301      	movs	r3, #1
 800121c:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001226:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001228:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122c:	61fb      	str	r3, [r7, #28]

			if ( HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK )
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fb8d 	bl	8002954 <HAL_RCC_ClockConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0xd8>
				return Execution_Failed;
 8001240:	2301      	movs	r3, #1
 8001242:	e02f      	b.n	80012a4 <SystemClock_Config+0x138>

			__HAL_RCC_HSI_DISABLE(); //Disable HSI to reduce Power Consumption.
 8001244:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <SystemClock_Config+0x140>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]

			break;
 800124a:	e02a      	b.n	80012a2 <SystemClock_Config+0x136>

		case HSE_2:
				osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124c:	2301      	movs	r3, #1
 800124e:	623b      	str	r3, [r7, #32]
				osc_init.HSEState = RCC_HSE_ON; // YOU HAVE TO CHECK ON THE SCHEMATIC WHETHER HSE IS BYPASSED OR NOT!!!
 8001250:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
				if ( HAL_RCC_OscConfig(&osc_init) != HAL_OK )
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	4618      	mov	r0, r3
 800125c:	f001 f902 	bl	8002464 <HAL_RCC_OscConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0xfe>
					return Execution_Failed;
 8001266:	2301      	movs	r3, #1
 8001268:	e01c      	b.n	80012a4 <SystemClock_Config+0x138>

				clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800126a:	230f      	movs	r3, #15
 800126c:	60fb      	str	r3, [r7, #12]
				clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800126e:	2301      	movs	r3, #1
 8001270:	613b      	str	r3, [r7, #16]
				clk_init.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001272:	2390      	movs	r3, #144	@ 0x90
 8001274:	617b      	str	r3, [r7, #20]
				clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001276:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127a:	61bb      	str	r3, [r7, #24]
				clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800127c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001280:	61fb      	str	r3, [r7, #28]

				if ( HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK )
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f001 fb63 	bl	8002954 <HAL_RCC_ClockConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0x12c>
					return Execution_Failed;
 8001294:	2301      	movs	r3, #1
 8001296:	e005      	b.n	80012a4 <SystemClock_Config+0x138>

				__HAL_RCC_HSI_DISABLE(); //Disable HSI to reduce Power Consumption.
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <SystemClock_Config+0x140>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]

				break;
 800129e:	e000      	b.n	80012a2 <SystemClock_Config+0x136>
			break;
 80012a0:	bf00      	nop
				break;
#endif
		default:
	}

	return Execution_Succesfull;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3750      	adds	r7, #80	@ 0x50
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	42470000 	.word	0x42470000

080012b0 <ADC_Config>:

ReturnStatus ADC_Config(ADC_HandleTypeDef *adc_handle, ADC_TypeDef *adc_instance, ADC_ChannelConfTypeDef *channel, uint32_t channel_num)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
	memset(adc_handle, 0, sizeof(*adc_handle));
 80012be:	2244      	movs	r2, #68	@ 0x44
 80012c0:	2100      	movs	r1, #0
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f003 ffbf 	bl	8005246 <memset>
	memset(adc_instance, 0, sizeof(*adc_instance));
 80012c8:	2250      	movs	r2, #80	@ 0x50
 80012ca:	2100      	movs	r1, #0
 80012cc:	68b8      	ldr	r0, [r7, #8]
 80012ce:	f003 ffba 	bl	8005246 <memset>
	memset(channel, 0, sizeof(*channel));
 80012d2:	2210      	movs	r2, #16
 80012d4:	2100      	movs	r1, #0
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f003 ffb5 	bl	8005246 <memset>

	adc_handle->Instance = adc_instance;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	601a      	str	r2, [r3, #0]
	adc_handle->Init.Resolution = ADC_RESOLUTION_12B;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
	adc_handle->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	615a      	str	r2, [r3, #20]
	adc_handle->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
	adc_handle->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012fa:	605a      	str	r2, [r3, #4]

	if( HAL_ADC_Init(adc_handle) != HAL_OK){
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f000 fa85 	bl	800180c <HAL_ADC_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <ADC_Config+0x5c>
		return Execution_Failed;
 8001308:	2301      	movs	r3, #1
 800130a:	e012      	b.n	8001332 <ADC_Config+0x82>
	}

	channel->Channel = channel_num;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	601a      	str	r2, [r3, #0]
	channel->Rank = channel_num;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	605a      	str	r2, [r3, #4]
	channel->SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2203      	movs	r2, #3
 800131c:	609a      	str	r2, [r3, #8]

	if( HAL_ADC_ConfigChannel(adc_handle, channel) != HAL_OK){
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 fb6d 	bl	8001a00 <HAL_ADC_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <ADC_Config+0x80>
		return Execution_Failed;
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <ADC_Config+0x82>
	}

	return Execution_Succesfull;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <USART1_Config>:

ReturnStatus USART1_Config(UART_HandleTypeDef *uart_handle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	memset(uart_handle, 0, sizeof(*uart_handle));
 8001344:	2248      	movs	r2, #72	@ 0x48
 8001346:	2100      	movs	r1, #0
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f003 ff7c 	bl	8005246 <memset>

	uart_handle->Instance = USART1;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a12      	ldr	r2, [pc, #72]	@ (800139c <USART1_Config+0x60>)
 8001352:	601a      	str	r2, [r3, #0]
	uart_handle->Init.BaudRate = 115200;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800135a:	605a      	str	r2, [r3, #4]
	uart_handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
	uart_handle->Init.Mode = UART_MODE_TX;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2208      	movs	r2, #8
 8001366:	615a      	str	r2, [r3, #20]
	uart_handle->Init.OverSampling = UART_OVERSAMPLING_16;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
	uart_handle->Init.Parity = UART_PARITY_NONE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
	uart_handle->Init.StopBits = UART_STOPBITS_1;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
	uart_handle->Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]

	if( HAL_UART_Init(uart_handle) != HAL_OK )
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f002 fa98 	bl	80038b6 <HAL_UART_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <USART1_Config+0x54>
		return Execution_Failed;
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <USART1_Config+0x56>

	return Execution_Succesfull;
 8001390:	2300      	movs	r3, #0

}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40011000 	.word	0x40011000

080013a0 <TIM2_PWM_Config>:

ReturnStatus TIM2_PWM_Config(TIM_HandleTypeDef *timer)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	@ 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	memset(timer, 0, sizeof(*timer));
 80013a8:	2248      	movs	r2, #72	@ 0x48
 80013aa:	2100      	movs	r1, #0
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f003 ff4a 	bl	8005246 <memset>

	TIM_OC_InitTypeDef pwm_config;
	memset(&pwm_config, 0, sizeof(pwm_config));
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	221c      	movs	r2, #28
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f003 ff43 	bl	8005246 <memset>

	timer->Instance = TIM2;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013c6:	601a      	str	r2, [r3, #0]
	timer->Init.Prescaler = 799;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f240 321f 	movw	r2, #799	@ 0x31f
 80013ce:	605a      	str	r2, [r3, #4]
	timer->Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
	timer->Init.Period = 19;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2213      	movs	r2, #19
 80013da:	60da      	str	r2, [r3, #12]
	timer->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
	timer->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
	timer->Init.RepetitionCounter = 0;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]

	if( HAL_TIM_PWM_Init(timer) != HAL_OK)
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f001 fcd0 	bl	8002d94 <HAL_TIM_PWM_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <TIM2_PWM_Config+0x5e>
		return Execution_Failed;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e014      	b.n	8001428 <TIM2_PWM_Config+0x88>

	pwm_config.OCMode = TIM_OCMODE_PWM1;
 80013fe:	2360      	movs	r3, #96	@ 0x60
 8001400:	60fb      	str	r3, [r7, #12]
	//pwm_config.Pulse = ( timer->Init.Period * 80 ) / 100; //-> 50% Duty Cycle
	pwm_config.Pulse = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
	pwm_config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
	pwm_config.OCFastMode = TIM_OCFAST_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]

	if (HAL_TIM_PWM_ConfigChannel(timer, &pwm_config, TIM_CHANNEL_3) != HAL_OK)
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	2208      	movs	r2, #8
 8001414:	4619      	mov	r1, r3
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f001 fec4 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <TIM2_PWM_Config+0x86>
		return Execution_Failed;
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <TIM2_PWM_Config+0x88>

	return Execution_Succesfull;
 8001426:	2300      	movs	r3, #0

}
 8001428:	4618      	mov	r0, r3
 800142a:	3728      	adds	r7, #40	@ 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <Delay>:
void Delay(uint32_t ms)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	DWT->CTRL |= (1 << 0); // Enable the DTW counter of the CortexM4
 8001438:	4b10      	ldr	r3, [pc, #64]	@ (800147c <Delay+0x4c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0f      	ldr	r2, [pc, #60]	@ (800147c <Delay+0x4c>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6013      	str	r3, [r2, #0]
	uint32_t start = DWT->CYCCNT;
 8001444:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <Delay+0x4c>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = ms * (HAL_RCC_GetHCLKFreq() / 1000);
 800144a:	f001 fc6f 	bl	8002d2c <HAL_RCC_GetHCLKFreq>
 800144e:	4603      	mov	r3, r0
 8001450:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <Delay+0x50>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	099a      	lsrs	r2, r3, #6
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	60bb      	str	r3, [r7, #8]

	while ((DWT->CYCCNT - start) < ticks);
 8001460:	bf00      	nop
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <Delay+0x4c>)
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	429a      	cmp	r2, r3
 800146e:	d8f8      	bhi.n	8001462 <Delay+0x32>
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e0001000 	.word	0xe0001000
 8001480:	10624dd3 	.word	0x10624dd3

08001484 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_MspInit>:

#include <string.h>
#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 fd65 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

	// Enable necessary IRQs
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	f06f 000b 	mvn.w	r0, #11
 80014aa:	f000 fd6a 	bl	8001f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	f06f 000a 	mvn.w	r0, #10
 80014b6:	f000 fd64 	bl	8001f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	f06f 0009 	mvn.w	r0, #9
 80014c2:	f000 fd5e 	bl	8001f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2103      	movs	r1, #3
 80014ca:	f04f 30ff 	mov.w	r0, #4294967295
 80014ce:	f000 fd58 	bl	8001f82 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(MemoryManagement_IRQn);
 80014d2:	f06f 000b 	mvn.w	r0, #11
 80014d6:	f000 fd70 	bl	8001fba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BusFault_IRQn);
 80014da:	f06f 000a 	mvn.w	r0, #10
 80014de:	f000 fd6c 	bl	8001fba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(UsageFault_IRQn);
 80014e2:	f06f 0009 	mvn.w	r0, #9
 80014e6:	f000 fd68 	bl	8001fba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(SysTick_IRQn);
 80014ea:	f04f 30ff 	mov.w	r0, #4294967295
 80014ee:	f000 fd64 	bl	8001fba <HAL_NVIC_EnableIRQ>

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);
	GPIO_InitTypeDef gpio_analog;

	memset(&gpio_analog, 0, sizeof(gpio_analog));
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2214      	movs	r2, #20
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f003 fe9c 	bl	8005246 <memset>

	// Enable the clocks.
	__HAL_RCC_ADC1_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <HAL_ADC_MspInit+0x90>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	4a1c      	ldr	r2, [pc, #112]	@ (8001588 <HAL_ADC_MspInit+0x90>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800151c:	6453      	str	r3, [r2, #68]	@ 0x44
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <HAL_ADC_MspInit+0x90>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_ADC2_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <HAL_ADC_MspInit+0x90>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	4a15      	ldr	r2, [pc, #84]	@ (8001588 <HAL_ADC_MspInit+0x90>)
 8001534:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001538:	6453      	str	r3, [r2, #68]	@ 0x44
 800153a:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <HAL_ADC_MspInit+0x90>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <HAL_ADC_MspInit+0x90>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a0e      	ldr	r2, [pc, #56]	@ (8001588 <HAL_ADC_MspInit+0x90>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <HAL_ADC_MspInit+0x90>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]

	gpio_analog.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001562:	2303      	movs	r3, #3
 8001564:	617b      	str	r3, [r7, #20]
	gpio_analog.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
	gpio_analog.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
	gpio_analog.Mode = GPIO_MODE_ANALOG;
 800156e:	2303      	movs	r3, #3
 8001570:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio_analog);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4804      	ldr	r0, [pc, #16]	@ (800158c <HAL_ADC_MspInit+0x94>)
 800157a:	f000 fdd7 	bl	800212c <HAL_GPIO_Init>

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	@ 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000

08001590 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	@ 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	GPIO_InitTypeDef gpio_uart;

	memset(&gpio_uart, 0, sizeof(gpio_uart));
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2214      	movs	r2, #20
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fe50 	bl	8005246 <memset>

	// Enable the UART and GPIO PORTB clock.
	__HAL_RCC_USART1_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <HAL_UART_MspInit+0x88>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001618 <HAL_UART_MspInit+0x88>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b6:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <HAL_UART_MspInit+0x88>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_UART_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a13      	ldr	r2, [pc, #76]	@ (8001618 <HAL_UART_MspInit+0x88>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_UART_MspInit+0x88>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]

	gpio_uart.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80015de:	23c0      	movs	r3, #192	@ 0xc0
 80015e0:	617b      	str	r3, [r7, #20]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
	gpio_uart.Alternate = GPIO_AF7_USART1;
 80015ea:	2307      	movs	r3, #7
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_uart.Pull = GPIO_PULLUP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOB, &gpio_uart);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4808      	ldr	r0, [pc, #32]	@ (800161c <HAL_UART_MspInit+0x8c>)
 80015fa:	f000 fd97 	bl	800212c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	210f      	movs	r1, #15
 8001602:	2025      	movs	r0, #37	@ 0x25
 8001604:	f000 fcbd 	bl	8001f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001608:	2025      	movs	r0, #37	@ 0x25
 800160a:	f000 fcd6 	bl	8001fba <HAL_NVIC_EnableIRQ>

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	@ 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40020400 	.word	0x40020400

08001620 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	@ 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	GPIO_InitTypeDef pwm_gpio;
	memset(&pwm_gpio, 0, sizeof(pwm_gpio));
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2214      	movs	r2, #20
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f003 fe08 	bl	8005246 <memset>

	// Enable clock in TIM8.
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x88>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a1a      	ldr	r2, [pc, #104]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x88>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x88>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x88>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a13      	ldr	r2, [pc, #76]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x88>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]

	pwm_gpio.Pin = GPIO_PIN_2;
 800166e:	2304      	movs	r3, #4
 8001670:	617b      	str	r3, [r7, #20]
	pwm_gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
	pwm_gpio.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
	pwm_gpio.Alternate = GPIO_AF1_TIM2;
 800167a:	2301      	movs	r3, #1
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
	pwm_gpio.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOA, &pwm_gpio);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4808      	ldr	r0, [pc, #32]	@ (80016ac <HAL_TIM_PWM_MspInit+0x8c>)
 800168a:	f000 fd4f 	bl	800212c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	210f      	movs	r1, #15
 8001692:	201c      	movs	r0, #28
 8001694:	f000 fc75 	bl	8001f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001698:	201c      	movs	r0, #28
 800169a:	f000 fc8e 	bl	8001fba <HAL_NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	@ 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000

080016b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <SystemInit+0x20>)
 80016b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ba:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <SystemInit+0x20>)
 80016bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800170c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016d8:	f7ff ffea 	bl	80016b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016de:	490d      	ldr	r1, [pc, #52]	@ (8001714 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001718 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001720 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001702:	f003 fdf3 	bl	80052ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001706:	f7ff fc33 	bl	8000f70 <main>
  bx  lr    
 800170a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800170c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001714:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001718:	08007894 	.word	0x08007894
  ldr r2, =_sbss
 800171c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001720:	2000047c 	.word	0x2000047c

08001724 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001724:	e7fe      	b.n	8001724 <ADC_IRQHandler>
	...

08001728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800172c:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <HAL_Init+0x40>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0d      	ldr	r2, [pc, #52]	@ (8001768 <HAL_Init+0x40>)
 8001732:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <HAL_Init+0x40>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <HAL_Init+0x40>)
 800173e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a07      	ldr	r2, [pc, #28]	@ (8001768 <HAL_Init+0x40>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 fc0b 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001756:	2000      	movs	r0, #0
 8001758:	f000 f808 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175c:	f7ff fe9c 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00

0800176c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_InitTick+0x54>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <HAL_InitTick+0x58>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fc23 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00e      	b.n	80017b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b0f      	cmp	r3, #15
 800179e:	d80a      	bhi.n	80017b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a0:	2200      	movs	r2, #0
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f000 fbeb 	bl	8001f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ac:	4a06      	ldr	r2, [pc, #24]	@ (80017c8 <HAL_InitTick+0x5c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000008 	.word	0x20000008
 80017c8:	20000004 	.word	0x20000004

080017cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_IncTick+0x20>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_IncTick+0x24>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <HAL_IncTick+0x24>)
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000008 	.word	0x20000008
 80017f0:	20000328 	.word	0x20000328

080017f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return uwTick;
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <HAL_GetTick+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000328 	.word	0x20000328

0800180c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e01b      	b.n	8001856 <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fe64 	bl	80014f8 <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f9d3 	bl	8001be4 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint16_t i = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <HAL_ADC_Start+0x1a>
 8001876:	2302      	movs	r3, #2
 8001878:	e053      	b.n	8001922 <HAL_ADC_Start+0xc2>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b22      	cmp	r3, #34	@ 0x22
 800188c:	d104      	bne.n	8001898 <HAL_ADC_Start+0x38>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2232      	movs	r2, #50	@ 0x32
 8001892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001896:	e003      	b.n	80018a0 <HAL_ADC_Start+0x40>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2212      	movs	r2, #18
 800189c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d010      	beq.n	80018d0 <HAL_ADC_Start+0x70>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0201 	orr.w	r2, r2, #1
 80018bc:	609a      	str	r2, [r3, #8]
    
    /* Delay inserted to wait during Tstab time the ADC's stabilazation */
    for(; i <= 540; i++)
 80018be:	e003      	b.n	80018c8 <HAL_ADC_Start+0x68>
    {
      __NOP();
 80018c0:	bf00      	nop
    for(; i <= 540; i++)
 80018c2:	89fb      	ldrh	r3, [r7, #14]
 80018c4:	3301      	adds	r3, #1
 80018c6:	81fb      	strh	r3, [r7, #14]
 80018c8:	89fb      	ldrh	r3, [r7, #14]
 80018ca:	f5b3 7f07 	cmp.w	r3, #540	@ 0x21c
 80018ce:	d9f7      	bls.n	80018c0 <HAL_ADC_Start+0x60>
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80018d0:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <HAL_ADC_Start+0xd0>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10c      	bne.n	80018f6 <HAL_ADC_Start+0x96>
  {
    /* if no external trigger present enable software conversion of regular channels */
    if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d119      	bne.n	8001918 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	e010      	b.n	8001918 <HAL_ADC_Start+0xb8>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001934 <HAL_ADC_Start+0xd4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d10b      	bne.n	8001918 <HAL_ADC_Start+0xb8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001904:	2b00      	cmp	r3, #0
 8001906:	d107      	bne.n	8001918 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001916:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40012300 	.word	0x40012300
 8001934:	40012000 	.word	0x40012000

08001938 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Disable the Peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	609a      	str	r2, [r3, #8]
  
  /* Change ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001974:	f7ff ff3e 	bl	80017f4 <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800197a:	e018      	b.n	80019ae <HAL_ADC_PollForConversion+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001982:	d014      	beq.n	80019ae <HAL_ADC_PollForConversion+0x48>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <HAL_ADC_PollForConversion+0x34>
 800198a:	f7ff ff33 	bl	80017f4 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d209      	bcs.n	80019ae <HAL_ADC_PollForConversion+0x48>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2203      	movs	r2, #3
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e016      	b.n	80019dc <HAL_ADC_PollForConversion+0x76>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d1df      	bne.n	800197c <HAL_ADC_PollForConversion+0x16>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b25      	cmp	r3, #37	@ 0x25
 80019c6:	d104      	bne.n	80019d2 <HAL_ADC_PollForConversion+0x6c>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2235      	movs	r2, #53	@ 0x35
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80019d0:	e003      	b.n	80019da <HAL_ADC_PollForConversion+0x74>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2215      	movs	r2, #21
 80019d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x18>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e0da      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1ce>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b09      	cmp	r3, #9
 8001a26:	d925      	bls.n	8001a74 <HAL_ADC_ConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~__HAL_ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68d9      	ldr	r1, [r3, #12]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3b1e      	subs	r3, #30
 8001a3e:	2207      	movs	r2, #7
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43da      	mvns	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= __HAL_ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68d9      	ldr	r1, [r3, #12]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	4603      	mov	r3, r0
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4403      	add	r3, r0
 8001a66:	3b1e      	subs	r3, #30
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	e022      	b.n	8001aba <HAL_ADC_ConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~__HAL_ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6919      	ldr	r1, [r3, #16]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	2207      	movs	r2, #7
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	400a      	ands	r2, r1
 8001a96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= __HAL_ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6919      	ldr	r1, [r3, #16]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4403      	add	r3, r0
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d824      	bhi.n	8001b0c <HAL_ADC_ConfigChannel+0x10c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~__HAL_ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3b05      	subs	r3, #5
 8001ad4:	221f      	movs	r2, #31
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= __HAL_ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	3b05      	subs	r3, #5
 8001afe:	fa00 f203 	lsl.w	r2, r0, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b0a:	e04c      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b0c      	cmp	r3, #12
 8001b12:	d824      	bhi.n	8001b5e <HAL_ADC_ConfigChannel+0x15e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~__HAL_ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b23      	subs	r3, #35	@ 0x23
 8001b26:	221f      	movs	r2, #31
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43da      	mvns	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	400a      	ands	r2, r1
 8001b34:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= __HAL_ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3b23      	subs	r3, #35	@ 0x23
 8001b50:	fa00 f203 	lsl.w	r2, r0, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b5c:	e023      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~__HAL_ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3b41      	subs	r3, #65	@ 0x41
 8001b70:	221f      	movs	r2, #31
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= __HAL_ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	3b41      	subs	r3, #65	@ 0x41
 8001b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a0c      	ldr	r2, [pc, #48]	@ (8001bdc <HAL_ADC_ConfigChannel+0x1dc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d109      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1c4>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b12      	cmp	r3, #18
 8001bb6:	d105      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1c4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_ADC_ConfigChannel+0x1e0>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a08      	ldr	r2, [pc, #32]	@ (8001be0 <HAL_ADC_ConfigChannel+0x1e0>)
 8001bbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bc2:	6053      	str	r3, [r2, #4]
     Enable the TSVREFE channel
    ADC->CCR |= ADC_CCR_TSVREFE;
  }*/
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40012000 	.word	0x40012000
 8001be0:	40012300 	.word	0x40012300

08001be4 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001bec:	4b76      	ldr	r3, [pc, #472]	@ (8001dc8 <ADC_Init+0x1e4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4a75      	ldr	r2, [pc, #468]	@ (8001dc8 <ADC_Init+0x1e4>)
 8001bf2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001bf6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001bf8:	4b73      	ldr	r3, [pc, #460]	@ (8001dc8 <ADC_Init+0x1e4>)
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4971      	ldr	r1, [pc, #452]	@ (8001dc8 <ADC_Init+0x1e4>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  __HAL_ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	021a      	lsls	r2, r3, #8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6899      	ldr	r1, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6899      	ldr	r1, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6899      	ldr	r1, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0202 	bic.w	r2, r2, #2
 8001cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= __HAL_ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6899      	ldr	r1, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	005a      	lsls	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d02e      	beq.n	8001d3c <ADC_Init+0x158>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cec:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001cfc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  __HAL_ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d02:	3b01      	subs	r3, #1
 8001d04:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8001d08:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	fa92 f2a2 	rbit	r2, r2
 8001d10:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	2a00      	cmp	r2, #0
 8001d1a:	d101      	bne.n	8001d20 <ADC_Init+0x13c>
  {
    return 32U;
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	e003      	b.n	8001d28 <ADC_Init+0x144>
  }
  return __builtin_clz(value);
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	fab2 f282 	clz	r2, r2
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	fa03 f102 	lsl.w	r1, r3, r2
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	e007      	b.n	8001d4c <ADC_Init+0x168>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  __HAL_ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	051a      	lsls	r2, r3, #20
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= __HAL_ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6899      	ldr	r1, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	025a      	lsls	r2, r3, #9
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001da4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= __HAL_ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6899      	ldr	r1, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	029a      	lsls	r2, r3, #10
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	609a      	str	r2, [r3, #8]
}
 8001dba:	bf00      	nop
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40012300 	.word	0x40012300

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4907      	ldr	r1, [pc, #28]	@ (8001e68 <__NVIC_EnableIRQ+0x38>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	@ (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	@ (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	@ 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
         );
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	@ 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f38:	d301      	bcc.n	8001f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00f      	b.n	8001f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <SysTick_Config+0x40>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f46:	210f      	movs	r1, #15
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f7ff ff8e 	bl	8001e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <SysTick_Config+0x40>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <SysTick_Config+0x40>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff29 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff3e 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff8e 	bl	8001ec0 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff5d 	bl	8001e6c <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff31 	bl	8001e30 <__NVIC_EnableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffa2 	bl	8001f28 <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001ff2:	f000 f802 	bl	8001ffa <HAL_SYSTICK_Callback>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002014:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002016:	f7ff fbed 	bl	80017f4 <HAL_GetTick>
 800201a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d008      	beq.n	800203a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2280      	movs	r2, #128	@ 0x80
 800202c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e052      	b.n	80020e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0216 	bic.w	r2, r2, #22
 8002048:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002058:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <HAL_DMA_Abort+0x62>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0208 	bic.w	r2, r2, #8
 8002078:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0201 	bic.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800208a:	e013      	b.n	80020b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800208c:	f7ff fbb2 	bl	80017f4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b05      	cmp	r3, #5
 8002098:	d90c      	bls.n	80020b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2203      	movs	r2, #3
 80020a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e015      	b.n	80020e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1e4      	bne.n	800208c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	223f      	movs	r2, #63	@ 0x3f
 80020c8:	409a      	lsls	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d004      	beq.n	8002106 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2280      	movs	r2, #128	@ 0x80
 8002100:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e00c      	b.n	8002120 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2205      	movs	r2, #5
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0201 	bic.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	@ 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e16b      	b.n	8002420 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	429a      	cmp	r2, r3
 8002162:	f040 815a 	bne.w	800241a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d005      	beq.n	800217e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217a:	2b02      	cmp	r3, #2
 800217c:	d130      	bne.n	80021e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b4:	2201      	movs	r2, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 0201 	and.w	r2, r3, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d017      	beq.n	800221c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d123      	bne.n	8002270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	69b9      	ldr	r1, [r7, #24]
 800226c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0203 	and.w	r2, r3, #3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80b4 	beq.w	800241a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b60      	ldr	r3, [pc, #384]	@ (8002438 <HAL_GPIO_Init+0x30c>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002438 <HAL_GPIO_Init+0x30c>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002438 <HAL_GPIO_Init+0x30c>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ce:	4a5b      	ldr	r2, [pc, #364]	@ (800243c <HAL_GPIO_Init+0x310>)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a52      	ldr	r2, [pc, #328]	@ (8002440 <HAL_GPIO_Init+0x314>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d02b      	beq.n	8002352 <HAL_GPIO_Init+0x226>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a51      	ldr	r2, [pc, #324]	@ (8002444 <HAL_GPIO_Init+0x318>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d025      	beq.n	800234e <HAL_GPIO_Init+0x222>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a50      	ldr	r2, [pc, #320]	@ (8002448 <HAL_GPIO_Init+0x31c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01f      	beq.n	800234a <HAL_GPIO_Init+0x21e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4f      	ldr	r2, [pc, #316]	@ (800244c <HAL_GPIO_Init+0x320>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d019      	beq.n	8002346 <HAL_GPIO_Init+0x21a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4e      	ldr	r2, [pc, #312]	@ (8002450 <HAL_GPIO_Init+0x324>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0x216>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4d      	ldr	r2, [pc, #308]	@ (8002454 <HAL_GPIO_Init+0x328>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00d      	beq.n	800233e <HAL_GPIO_Init+0x212>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4c      	ldr	r2, [pc, #304]	@ (8002458 <HAL_GPIO_Init+0x32c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d007      	beq.n	800233a <HAL_GPIO_Init+0x20e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4b      	ldr	r2, [pc, #300]	@ (800245c <HAL_GPIO_Init+0x330>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_GPIO_Init+0x20a>
 8002332:	2307      	movs	r3, #7
 8002334:	e00e      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002336:	2308      	movs	r3, #8
 8002338:	e00c      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800233a:	2306      	movs	r3, #6
 800233c:	e00a      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800233e:	2305      	movs	r3, #5
 8002340:	e008      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002342:	2304      	movs	r3, #4
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002346:	2303      	movs	r3, #3
 8002348:	e004      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800234a:	2302      	movs	r3, #2
 800234c:	e002      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002352:	2300      	movs	r3, #0
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	f002 0203 	and.w	r2, r2, #3
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	4093      	lsls	r3, r2
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002364:	4935      	ldr	r1, [pc, #212]	@ (800243c <HAL_GPIO_Init+0x310>)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002372:	4b3b      	ldr	r3, [pc, #236]	@ (8002460 <HAL_GPIO_Init+0x334>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002396:	4a32      	ldr	r2, [pc, #200]	@ (8002460 <HAL_GPIO_Init+0x334>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800239c:	4b30      	ldr	r3, [pc, #192]	@ (8002460 <HAL_GPIO_Init+0x334>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c0:	4a27      	ldr	r2, [pc, #156]	@ (8002460 <HAL_GPIO_Init+0x334>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023c6:	4b26      	ldr	r3, [pc, #152]	@ (8002460 <HAL_GPIO_Init+0x334>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002460 <HAL_GPIO_Init+0x334>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002460 <HAL_GPIO_Init+0x334>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002414:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <HAL_GPIO_Init+0x334>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3301      	adds	r3, #1
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	f67f ae90 	bls.w	8002148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3724      	adds	r7, #36	@ 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	40013800 	.word	0x40013800
 8002440:	40020000 	.word	0x40020000
 8002444:	40020400 	.word	0x40020400
 8002448:	40020800 	.word	0x40020800
 800244c:	40020c00 	.word	0x40020c00
 8002450:	40021000 	.word	0x40021000
 8002454:	40021400 	.word	0x40021400
 8002458:	40021800 	.word	0x40021800
 800245c:	40021c00 	.word	0x40021c00
 8002460:	40013c00 	.word	0x40013c00

08002464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e267      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d075      	beq.n	800256e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002482:	4b88      	ldr	r3, [pc, #544]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d00c      	beq.n	80024a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248e:	4b85      	ldr	r3, [pc, #532]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002496:	2b08      	cmp	r3, #8
 8002498:	d112      	bne.n	80024c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249a:	4b82      	ldr	r3, [pc, #520]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024a6:	d10b      	bne.n	80024c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	4b7e      	ldr	r3, [pc, #504]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d05b      	beq.n	800256c <HAL_RCC_OscConfig+0x108>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d157      	bne.n	800256c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e242      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c8:	d106      	bne.n	80024d8 <HAL_RCC_OscConfig+0x74>
 80024ca:	4b76      	ldr	r3, [pc, #472]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a75      	ldr	r2, [pc, #468]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e01d      	b.n	8002514 <HAL_RCC_OscConfig+0xb0>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x98>
 80024e2:	4b70      	ldr	r3, [pc, #448]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6f      	ldr	r2, [pc, #444]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b6d      	ldr	r3, [pc, #436]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6c      	ldr	r2, [pc, #432]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0xb0>
 80024fc:	4b69      	ldr	r3, [pc, #420]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a68      	ldr	r2, [pc, #416]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b66      	ldr	r3, [pc, #408]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a65      	ldr	r2, [pc, #404]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 800250e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff f96a 	bl	80017f4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7ff f966 	bl	80017f4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e207      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b5b      	ldr	r3, [pc, #364]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0xc0>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff f956 	bl	80017f4 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7ff f952 	bl	80017f4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	@ 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1f3      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	4b51      	ldr	r3, [pc, #324]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0xe8>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d063      	beq.n	8002642 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800257a:	4b4a      	ldr	r3, [pc, #296]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002586:	4b47      	ldr	r3, [pc, #284]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800258e:	2b08      	cmp	r3, #8
 8002590:	d11c      	bne.n	80025cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002592:	4b44      	ldr	r3, [pc, #272]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d116      	bne.n	80025cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	4b41      	ldr	r3, [pc, #260]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_RCC_OscConfig+0x152>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1c7      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b3b      	ldr	r3, [pc, #236]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4937      	ldr	r1, [pc, #220]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	e03a      	b.n	8002642 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d4:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <HAL_RCC_OscConfig+0x244>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7ff f90b 	bl	80017f4 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7ff f907 	bl	80017f4 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1a8      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	4b2b      	ldr	r3, [pc, #172]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	4b28      	ldr	r3, [pc, #160]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4925      	ldr	r1, [pc, #148]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
 8002614:	e015      	b.n	8002642 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002616:	4b24      	ldr	r3, [pc, #144]	@ (80026a8 <HAL_RCC_OscConfig+0x244>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7ff f8ea 	bl	80017f4 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002624:	f7ff f8e6 	bl	80017f4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e187      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002636:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d036      	beq.n	80026bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d016      	beq.n	8002684 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002656:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <HAL_RCC_OscConfig+0x248>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7ff f8ca 	bl	80017f4 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7ff f8c6 	bl	80017f4 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e167      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002676:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x200>
 8002682:	e01b      	b.n	80026bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002684:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <HAL_RCC_OscConfig+0x248>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268a:	f7ff f8b3 	bl	80017f4 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002690:	e00e      	b.n	80026b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002692:	f7ff f8af 	bl	80017f4 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d907      	bls.n	80026b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e150      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
 80026a4:	40023800 	.word	0x40023800
 80026a8:	42470000 	.word	0x42470000
 80026ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	4b88      	ldr	r3, [pc, #544]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1ea      	bne.n	8002692 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8097 	beq.w	80027f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ce:	4b81      	ldr	r3, [pc, #516]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10f      	bne.n	80026fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	4b7d      	ldr	r3, [pc, #500]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	4a7c      	ldr	r2, [pc, #496]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ea:	4b7a      	ldr	r3, [pc, #488]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f6:	2301      	movs	r3, #1
 80026f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fa:	4b77      	ldr	r3, [pc, #476]	@ (80028d8 <HAL_RCC_OscConfig+0x474>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d118      	bne.n	8002738 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002706:	4b74      	ldr	r3, [pc, #464]	@ (80028d8 <HAL_RCC_OscConfig+0x474>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a73      	ldr	r2, [pc, #460]	@ (80028d8 <HAL_RCC_OscConfig+0x474>)
 800270c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002712:	f7ff f86f 	bl	80017f4 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271a:	f7ff f86b 	bl	80017f4 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e10c      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272c:	4b6a      	ldr	r3, [pc, #424]	@ (80028d8 <HAL_RCC_OscConfig+0x474>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x2ea>
 8002740:	4b64      	ldr	r3, [pc, #400]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002744:	4a63      	ldr	r2, [pc, #396]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	@ 0x70
 800274c:	e01c      	b.n	8002788 <HAL_RCC_OscConfig+0x324>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b05      	cmp	r3, #5
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0x30c>
 8002756:	4b5f      	ldr	r3, [pc, #380]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275a:	4a5e      	ldr	r2, [pc, #376]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	6713      	str	r3, [r2, #112]	@ 0x70
 8002762:	4b5c      	ldr	r3, [pc, #368]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002766:	4a5b      	ldr	r2, [pc, #364]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6713      	str	r3, [r2, #112]	@ 0x70
 800276e:	e00b      	b.n	8002788 <HAL_RCC_OscConfig+0x324>
 8002770:	4b58      	ldr	r3, [pc, #352]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002774:	4a57      	ldr	r2, [pc, #348]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	@ 0x70
 800277c:	4b55      	ldr	r3, [pc, #340]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	4a54      	ldr	r2, [pc, #336]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002782:	f023 0304 	bic.w	r3, r3, #4
 8002786:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d015      	beq.n	80027bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7ff f830 	bl	80017f4 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002796:	e00a      	b.n	80027ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7ff f82c 	bl	80017f4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0cb      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ae:	4b49      	ldr	r3, [pc, #292]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0ee      	beq.n	8002798 <HAL_RCC_OscConfig+0x334>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027bc:	f7ff f81a 	bl	80017f4 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7ff f816 	bl	80017f4 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0b5      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027da:	4b3e      	ldr	r3, [pc, #248]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1ee      	bne.n	80027c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d105      	bne.n	80027f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ec:	4b39      	ldr	r3, [pc, #228]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	4a38      	ldr	r2, [pc, #224]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80a1 	beq.w	8002944 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002802:	4b34      	ldr	r3, [pc, #208]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b08      	cmp	r3, #8
 800280c:	d05c      	beq.n	80028c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d141      	bne.n	800289a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b31      	ldr	r3, [pc, #196]	@ (80028dc <HAL_RCC_OscConfig+0x478>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe ffea 	bl	80017f4 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe ffe6 	bl	80017f4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e087      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	019b      	lsls	r3, r3, #6
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	3b01      	subs	r3, #1
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	491b      	ldr	r1, [pc, #108]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <HAL_RCC_OscConfig+0x478>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe ffbf 	bl	80017f4 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe ffbb 	bl	80017f4 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e05c      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288c:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x416>
 8002898:	e054      	b.n	8002944 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <HAL_RCC_OscConfig+0x478>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe ffa8 	bl	80017f4 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe ffa4 	bl	80017f4 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e045      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x444>
 80028c6:	e03d      	b.n	8002944 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e038      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40007000 	.word	0x40007000
 80028dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <HAL_RCC_OscConfig+0x4ec>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d028      	beq.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d121      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d11a      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002910:	4013      	ands	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002918:	4293      	cmp	r3, r2
 800291a:	d111      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	3b01      	subs	r3, #1
 800292a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d107      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0cc      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002968:	4b68      	ldr	r3, [pc, #416]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d90c      	bls.n	8002990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b65      	ldr	r3, [pc, #404]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b63      	ldr	r3, [pc, #396]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0b8      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a8:	4b59      	ldr	r3, [pc, #356]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a58      	ldr	r2, [pc, #352]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c0:	4b53      	ldr	r3, [pc, #332]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a52      	ldr	r2, [pc, #328]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029cc:	4b50      	ldr	r3, [pc, #320]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	494d      	ldr	r1, [pc, #308]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d044      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	4b47      	ldr	r3, [pc, #284]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d119      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e07f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d003      	beq.n	8002a12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a12:	4b3f      	ldr	r3, [pc, #252]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e06f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a22:	4b3b      	ldr	r3, [pc, #236]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e067      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a32:	4b37      	ldr	r3, [pc, #220]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4934      	ldr	r1, [pc, #208]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a44:	f7fe fed6 	bl	80017f4 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4c:	f7fe fed2 	bl	80017f4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e04f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	4b2b      	ldr	r3, [pc, #172]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 020c 	and.w	r2, r3, #12
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1eb      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a74:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d20c      	bcs.n	8002a9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b22      	ldr	r3, [pc, #136]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e032      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4916      	ldr	r1, [pc, #88]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac6:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	490e      	ldr	r1, [pc, #56]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ada:	f000 f821 	bl	8002b20 <HAL_RCC_GetSysClockFreq>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	490a      	ldr	r1, [pc, #40]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	5ccb      	ldrb	r3, [r1, r3]
 8002aee:	fa22 f303 	lsr.w	r3, r2, r3
 8002af2:	4a09      	ldr	r2, [pc, #36]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002af6:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe fe36 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023c00 	.word	0x40023c00
 8002b10:	40023800 	.word	0x40023800
 8002b14:	080074f4 	.word	0x080074f4
 8002b18:	20000000 	.word	0x20000000
 8002b1c:	20000004 	.word	0x20000004

08002b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b24:	b094      	sub	sp, #80	@ 0x50
 8002b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b38:	4b79      	ldr	r3, [pc, #484]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d00d      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x40>
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	f200 80e1 	bhi.w	8002d0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x34>
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d003      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b52:	e0db      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4b73      	ldr	r3, [pc, #460]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b58:	e0db      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5a:	4b73      	ldr	r3, [pc, #460]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b5e:	e0d8      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b60:	4b6f      	ldr	r3, [pc, #444]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d063      	beq.n	8002c3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b76:	4b6a      	ldr	r3, [pc, #424]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b92:	4622      	mov	r2, r4
 8002b94:	462b      	mov	r3, r5
 8002b96:	f04f 0000 	mov.w	r0, #0
 8002b9a:	f04f 0100 	mov.w	r1, #0
 8002b9e:	0159      	lsls	r1, r3, #5
 8002ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba4:	0150      	lsls	r0, r2, #5
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4621      	mov	r1, r4
 8002bac:	1a51      	subs	r1, r2, r1
 8002bae:	6139      	str	r1, [r7, #16]
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bc4:	4659      	mov	r1, fp
 8002bc6:	018b      	lsls	r3, r1, #6
 8002bc8:	4651      	mov	r1, sl
 8002bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bce:	4651      	mov	r1, sl
 8002bd0:	018a      	lsls	r2, r1, #6
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	ebb2 0801 	subs.w	r8, r2, r1
 8002bd8:	4659      	mov	r1, fp
 8002bda:	eb63 0901 	sbc.w	r9, r3, r1
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf2:	4690      	mov	r8, r2
 8002bf4:	4699      	mov	r9, r3
 8002bf6:	4623      	mov	r3, r4
 8002bf8:	eb18 0303 	adds.w	r3, r8, r3
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	462b      	mov	r3, r5
 8002c00:	eb49 0303 	adc.w	r3, r9, r3
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c12:	4629      	mov	r1, r5
 8002c14:	024b      	lsls	r3, r1, #9
 8002c16:	4621      	mov	r1, r4
 8002c18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	024a      	lsls	r2, r1, #9
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c26:	2200      	movs	r2, #0
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c30:	f7fd ffda 	bl	8000be8 <__aeabi_uldivmod>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4613      	mov	r3, r2
 8002c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c3c:	e058      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3e:	4b38      	ldr	r3, [pc, #224]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	099b      	lsrs	r3, r3, #6
 8002c44:	2200      	movs	r2, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	4611      	mov	r1, r2
 8002c4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c4e:	623b      	str	r3, [r7, #32]
 8002c50:	2300      	movs	r3, #0
 8002c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c58:	4642      	mov	r2, r8
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	f04f 0000 	mov.w	r0, #0
 8002c60:	f04f 0100 	mov.w	r1, #0
 8002c64:	0159      	lsls	r1, r3, #5
 8002c66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6a:	0150      	lsls	r0, r2, #5
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4641      	mov	r1, r8
 8002c72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c76:	4649      	mov	r1, r9
 8002c78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c90:	ebb2 040a 	subs.w	r4, r2, sl
 8002c94:	eb63 050b 	sbc.w	r5, r3, fp
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	00eb      	lsls	r3, r5, #3
 8002ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ca6:	00e2      	lsls	r2, r4, #3
 8002ca8:	4614      	mov	r4, r2
 8002caa:	461d      	mov	r5, r3
 8002cac:	4643      	mov	r3, r8
 8002cae:	18e3      	adds	r3, r4, r3
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	464b      	mov	r3, r9
 8002cb4:	eb45 0303 	adc.w	r3, r5, r3
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	028b      	lsls	r3, r1, #10
 8002cca:	4621      	mov	r1, r4
 8002ccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	028a      	lsls	r2, r1, #10
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	61fa      	str	r2, [r7, #28]
 8002ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce4:	f7fd ff80 	bl	8000be8 <__aeabi_uldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4613      	mov	r3, r2
 8002cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d0a:	e002      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3750      	adds	r7, #80	@ 0x50
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	00f42400 	.word	0x00f42400
 8002d28:	007a1200 	.word	0x007a1200

08002d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d30:	4b03      	ldr	r3, [pc, #12]	@ (8002d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20000000 	.word	0x20000000

08002d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d48:	f7ff fff0 	bl	8002d2c <HAL_RCC_GetHCLKFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b05      	ldr	r3, [pc, #20]	@ (8002d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	0a9b      	lsrs	r3, r3, #10
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4903      	ldr	r1, [pc, #12]	@ (8002d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	08007504 	.word	0x08007504

08002d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d70:	f7ff ffdc 	bl	8002d2c <HAL_RCC_GetHCLKFreq>
 8002d74:	4602      	mov	r2, r0
 8002d76:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	0b5b      	lsrs	r3, r3, #13
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	4903      	ldr	r1, [pc, #12]	@ (8002d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d82:	5ccb      	ldrb	r3, [r1, r3]
 8002d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	08007504 	.word	0x08007504

08002d94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e041      	b.n	8002e2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe fc30 	bl	8001620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f000 fada 	bl	800338c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_TIM_PWM_Start+0x24>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e022      	b.n	8002e9e <HAL_TIM_PWM_Start+0x6a>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d109      	bne.n	8002e72 <HAL_TIM_PWM_Start+0x3e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	bf14      	ite	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	2300      	moveq	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	e015      	b.n	8002e9e <HAL_TIM_PWM_Start+0x6a>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d109      	bne.n	8002e8c <HAL_TIM_PWM_Start+0x58>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e008      	b.n	8002e9e <HAL_TIM_PWM_Start+0x6a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07c      	b.n	8002fa0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d104      	bne.n	8002eb6 <HAL_TIM_PWM_Start+0x82>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eb4:	e013      	b.n	8002ede <HAL_TIM_PWM_Start+0xaa>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_PWM_Start+0x92>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ec4:	e00b      	b.n	8002ede <HAL_TIM_PWM_Start+0xaa>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0xa2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ed4:	e003      	b.n	8002ede <HAL_TIM_PWM_Start+0xaa>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	6839      	ldr	r1, [r7, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fcac 	bl	8003844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8002fa8 <HAL_TIM_PWM_Start+0x174>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <HAL_TIM_PWM_Start+0xcc>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2c      	ldr	r2, [pc, #176]	@ (8002fac <HAL_TIM_PWM_Start+0x178>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <HAL_TIM_PWM_Start+0xd0>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <HAL_TIM_PWM_Start+0xd2>
 8002f04:	2300      	movs	r3, #0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a22      	ldr	r2, [pc, #136]	@ (8002fa8 <HAL_TIM_PWM_Start+0x174>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d022      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f2c:	d01d      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb0 <HAL_TIM_PWM_Start+0x17c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d018      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb4 <HAL_TIM_PWM_Start+0x180>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb8 <HAL_TIM_PWM_Start+0x184>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00e      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a16      	ldr	r2, [pc, #88]	@ (8002fac <HAL_TIM_PWM_Start+0x178>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a18      	ldr	r2, [pc, #96]	@ (8002fbc <HAL_TIM_PWM_Start+0x188>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d004      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a16      	ldr	r2, [pc, #88]	@ (8002fc0 <HAL_TIM_PWM_Start+0x18c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d111      	bne.n	8002f8e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d010      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8c:	e007      	b.n	8002f9e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40010400 	.word	0x40010400
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40014000 	.word	0x40014000
 8002fc0:	40001800 	.word	0x40001800

08002fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d020      	beq.n	8003028 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01b      	beq.n	8003028 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0202 	mvn.w	r2, #2
 8002ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f99e 	bl	8003350 <HAL_TIM_IC_CaptureCallback>
 8003014:	e005      	b.n	8003022 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f990 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f9a1 	bl	8003364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d020      	beq.n	8003074 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01b      	beq.n	8003074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0204 	mvn.w	r2, #4
 8003044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f978 	bl	8003350 <HAL_TIM_IC_CaptureCallback>
 8003060:	e005      	b.n	800306e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f96a 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f97b 	bl	8003364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d020      	beq.n	80030c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01b      	beq.n	80030c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0208 	mvn.w	r2, #8
 8003090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2204      	movs	r2, #4
 8003096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f952 	bl	8003350 <HAL_TIM_IC_CaptureCallback>
 80030ac:	e005      	b.n	80030ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f944 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f955 	bl	8003364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d020      	beq.n	800310c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01b      	beq.n	800310c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0210 	mvn.w	r2, #16
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2208      	movs	r2, #8
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f92c 	bl	8003350 <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f91e 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f92f 	bl	8003364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00c      	beq.n	8003130 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0201 	mvn.w	r2, #1
 8003128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8fc 	bl	8003328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00c      	beq.n	8003154 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800314c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fba7 	bl	80038a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00c      	beq.n	8003178 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f900 	bl	8003378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00c      	beq.n	800319c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0220 	mvn.w	r2, #32
 8003194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fb79 	bl	800388e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031be:	2302      	movs	r3, #2
 80031c0:	e0ae      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	f200 809f 	bhi.w	8003310 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031d2:	a201      	add	r2, pc, #4	@ (adr r2, 80031d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	0800320d 	.word	0x0800320d
 80031dc:	08003311 	.word	0x08003311
 80031e0:	08003311 	.word	0x08003311
 80031e4:	08003311 	.word	0x08003311
 80031e8:	0800324d 	.word	0x0800324d
 80031ec:	08003311 	.word	0x08003311
 80031f0:	08003311 	.word	0x08003311
 80031f4:	08003311 	.word	0x08003311
 80031f8:	0800328f 	.word	0x0800328f
 80031fc:	08003311 	.word	0x08003311
 8003200:	08003311 	.word	0x08003311
 8003204:	08003311 	.word	0x08003311
 8003208:	080032cf 	.word	0x080032cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f966 	bl	80034e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0208 	orr.w	r2, r2, #8
 8003226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0204 	bic.w	r2, r2, #4
 8003236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6999      	ldr	r1, [r3, #24]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	619a      	str	r2, [r3, #24]
      break;
 800324a:	e064      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f9b6 	bl	80035c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6999      	ldr	r1, [r3, #24]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	021a      	lsls	r2, r3, #8
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	619a      	str	r2, [r3, #24]
      break;
 800328c:	e043      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fa0b 	bl	80036b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0208 	orr.w	r2, r2, #8
 80032a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0204 	bic.w	r2, r2, #4
 80032b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69d9      	ldr	r1, [r3, #28]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	61da      	str	r2, [r3, #28]
      break;
 80032cc:	e023      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fa5f 	bl	8003798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69da      	ldr	r2, [r3, #28]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69d9      	ldr	r1, [r3, #28]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	021a      	lsls	r2, r3, #8
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	61da      	str	r2, [r3, #28]
      break;
 800330e:	e002      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	75fb      	strb	r3, [r7, #23]
      break;
 8003314:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800331e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a46      	ldr	r2, [pc, #280]	@ (80034b8 <TIM_Base_SetConfig+0x12c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d013      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033aa:	d00f      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a43      	ldr	r2, [pc, #268]	@ (80034bc <TIM_Base_SetConfig+0x130>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00b      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a42      	ldr	r2, [pc, #264]	@ (80034c0 <TIM_Base_SetConfig+0x134>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a41      	ldr	r2, [pc, #260]	@ (80034c4 <TIM_Base_SetConfig+0x138>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_Base_SetConfig+0x40>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a40      	ldr	r2, [pc, #256]	@ (80034c8 <TIM_Base_SetConfig+0x13c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d108      	bne.n	80033de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a35      	ldr	r2, [pc, #212]	@ (80034b8 <TIM_Base_SetConfig+0x12c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d02b      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ec:	d027      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a32      	ldr	r2, [pc, #200]	@ (80034bc <TIM_Base_SetConfig+0x130>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d023      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a31      	ldr	r2, [pc, #196]	@ (80034c0 <TIM_Base_SetConfig+0x134>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d01f      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a30      	ldr	r2, [pc, #192]	@ (80034c4 <TIM_Base_SetConfig+0x138>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01b      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2f      	ldr	r2, [pc, #188]	@ (80034c8 <TIM_Base_SetConfig+0x13c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d017      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a2e      	ldr	r2, [pc, #184]	@ (80034cc <TIM_Base_SetConfig+0x140>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a2d      	ldr	r2, [pc, #180]	@ (80034d0 <TIM_Base_SetConfig+0x144>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00f      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2c      	ldr	r2, [pc, #176]	@ (80034d4 <TIM_Base_SetConfig+0x148>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00b      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2b      	ldr	r2, [pc, #172]	@ (80034d8 <TIM_Base_SetConfig+0x14c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a2a      	ldr	r2, [pc, #168]	@ (80034dc <TIM_Base_SetConfig+0x150>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <TIM_Base_SetConfig+0xb2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a29      	ldr	r2, [pc, #164]	@ (80034e0 <TIM_Base_SetConfig+0x154>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d108      	bne.n	8003450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a10      	ldr	r2, [pc, #64]	@ (80034b8 <TIM_Base_SetConfig+0x12c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_Base_SetConfig+0xf8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a12      	ldr	r2, [pc, #72]	@ (80034c8 <TIM_Base_SetConfig+0x13c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d103      	bne.n	800348c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d105      	bne.n	80034aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f023 0201 	bic.w	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	611a      	str	r2, [r3, #16]
  }
}
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40010000 	.word	0x40010000
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800
 80034c4:	40000c00 	.word	0x40000c00
 80034c8:	40010400 	.word	0x40010400
 80034cc:	40014000 	.word	0x40014000
 80034d0:	40014400 	.word	0x40014400
 80034d4:	40014800 	.word	0x40014800
 80034d8:	40001800 	.word	0x40001800
 80034dc:	40001c00 	.word	0x40001c00
 80034e0:	40002000 	.word	0x40002000

080034e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f023 0201 	bic.w	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0303 	bic.w	r3, r3, #3
 800351a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f023 0302 	bic.w	r3, r3, #2
 800352c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a20      	ldr	r2, [pc, #128]	@ (80035bc <TIM_OC1_SetConfig+0xd8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_OC1_SetConfig+0x64>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a1f      	ldr	r2, [pc, #124]	@ (80035c0 <TIM_OC1_SetConfig+0xdc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d10c      	bne.n	8003562 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f023 0308 	bic.w	r3, r3, #8
 800354e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f023 0304 	bic.w	r3, r3, #4
 8003560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a15      	ldr	r2, [pc, #84]	@ (80035bc <TIM_OC1_SetConfig+0xd8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d003      	beq.n	8003572 <TIM_OC1_SetConfig+0x8e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a14      	ldr	r2, [pc, #80]	@ (80035c0 <TIM_OC1_SetConfig+0xdc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d111      	bne.n	8003596 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	621a      	str	r2, [r3, #32]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	40010000 	.word	0x40010000
 80035c0:	40010400 	.word	0x40010400

080035c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f023 0210 	bic.w	r2, r3, #16
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f023 0320 	bic.w	r3, r3, #32
 800360e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a22      	ldr	r2, [pc, #136]	@ (80036a8 <TIM_OC2_SetConfig+0xe4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_OC2_SetConfig+0x68>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a21      	ldr	r2, [pc, #132]	@ (80036ac <TIM_OC2_SetConfig+0xe8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d10d      	bne.n	8003648 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003646:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a17      	ldr	r2, [pc, #92]	@ (80036a8 <TIM_OC2_SetConfig+0xe4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_OC2_SetConfig+0x94>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a16      	ldr	r2, [pc, #88]	@ (80036ac <TIM_OC2_SetConfig+0xe8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d113      	bne.n	8003680 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800365e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40010400 	.word	0x40010400

080036b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0303 	bic.w	r3, r3, #3
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a21      	ldr	r2, [pc, #132]	@ (8003790 <TIM_OC3_SetConfig+0xe0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d003      	beq.n	8003716 <TIM_OC3_SetConfig+0x66>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a20      	ldr	r2, [pc, #128]	@ (8003794 <TIM_OC3_SetConfig+0xe4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d10d      	bne.n	8003732 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800371c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a16      	ldr	r2, [pc, #88]	@ (8003790 <TIM_OC3_SetConfig+0xe0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d003      	beq.n	8003742 <TIM_OC3_SetConfig+0x92>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a15      	ldr	r2, [pc, #84]	@ (8003794 <TIM_OC3_SetConfig+0xe4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d113      	bne.n	800376a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	621a      	str	r2, [r3, #32]
}
 8003784:	bf00      	nop
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40010000 	.word	0x40010000
 8003794:	40010400 	.word	0x40010400

08003798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	031b      	lsls	r3, r3, #12
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a12      	ldr	r2, [pc, #72]	@ (800383c <TIM_OC4_SetConfig+0xa4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_OC4_SetConfig+0x68>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a11      	ldr	r2, [pc, #68]	@ (8003840 <TIM_OC4_SetConfig+0xa8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d109      	bne.n	8003814 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	019b      	lsls	r3, r3, #6
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	40010400 	.word	0x40010400

08003844 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2201      	movs	r2, #1
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a1a      	ldr	r2, [r3, #32]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	43db      	mvns	r3, r3
 8003866:	401a      	ands	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a1a      	ldr	r2, [r3, #32]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	fa01 f303 	lsl.w	r3, r1, r3
 800387c:	431a      	orrs	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e042      	b.n	800394e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7fd fe57 	bl	8001590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2224      	movs	r2, #36	@ 0x24
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fcb2 	bl	8004264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800390e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800391e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800392e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003956:	b480      	push	{r7}
 8003958:	b085      	sub	sp, #20
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	4613      	mov	r3, r2
 8003962:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b20      	cmp	r3, #32
 800396e:	d121      	bne.n	80039b4 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_UART_Transmit_IT+0x26>
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e01a      	b.n	80039b6 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	88fa      	ldrh	r2, [r7, #6]
 8003990:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2221      	movs	r2, #33	@ 0x21
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039ae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e000      	b.n	80039b6 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80039b4:	2302      	movs	r3, #2
  }
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b0ba      	sub	sp, #232	@ 0xe8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_UART_IRQHandler+0x66>
 8003a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fb5f 	bl	80040e6 <UART_Receive_IT>
      return;
 8003a28:	e25b      	b.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 80de 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x22c>
 8003a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80d1 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <HAL_UART_IRQHandler+0xae>
 8003a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_UART_IRQHandler+0xd2>
 8003a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	f043 0202 	orr.w	r2, r3, #2
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <HAL_UART_IRQHandler+0xf6>
 8003aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab2:	f043 0204 	orr.w	r2, r3, #4
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d011      	beq.n	8003aea <HAL_UART_IRQHandler+0x126>
 8003ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d105      	bne.n	8003ade <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	f043 0208 	orr.w	r2, r3, #8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 81f2 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_UART_IRQHandler+0x14e>
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 faea 	bl	80040e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1c:	2b40      	cmp	r3, #64	@ 0x40
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <HAL_UART_IRQHandler+0x17a>
 8003b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d04f      	beq.n	8003bde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f9f2 	bl	8003f28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4e:	2b40      	cmp	r3, #64	@ 0x40
 8003b50:	d141      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3314      	adds	r3, #20
 8003b58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3314      	adds	r3, #20
 8003b7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1d9      	bne.n	8003b52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d013      	beq.n	8003bce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003baa:	4a7e      	ldr	r2, [pc, #504]	@ (8003da4 <HAL_UART_IRQHandler+0x3e0>)
 8003bac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe fa98 	bl	80020e8 <HAL_DMA_Abort_IT>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	e00e      	b.n	8003bec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f994 	bl	8003efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd4:	e00a      	b.n	8003bec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f990 	bl	8003efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	e006      	b.n	8003bec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f98c 	bl	8003efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003bea:	e175      	b.n	8003ed8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bec:	bf00      	nop
    return;
 8003bee:	e173      	b.n	8003ed8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	f040 814f 	bne.w	8003e98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8148 	beq.w	8003e98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8141 	beq.w	8003e98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c36:	2b40      	cmp	r3, #64	@ 0x40
 8003c38:	f040 80b6 	bne.w	8003da8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8145 	beq.w	8003edc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	f080 813e 	bcs.w	8003edc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c72:	f000 8088 	beq.w	8003d86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ca2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1d9      	bne.n	8003c76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3314      	adds	r3, #20
 8003cc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3314      	adds	r3, #20
 8003ce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ce6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003cea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003cee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003cf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e1      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3314      	adds	r3, #20
 8003d04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3314      	adds	r3, #20
 8003d1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e3      	bne.n	8003cfe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d56:	f023 0310 	bic.w	r3, r3, #16
 8003d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d6a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e3      	bne.n	8003d44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe f941 	bl	8002008 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f8b7 	bl	8003f10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003da2:	e09b      	b.n	8003edc <HAL_UART_IRQHandler+0x518>
 8003da4:	08003fef 	.word	0x08003fef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 808e 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8089 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003de4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003df2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003df4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003df8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e3      	bne.n	8003dce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3314      	adds	r3, #20
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	623b      	str	r3, [r7, #32]
   return(result);
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3314      	adds	r3, #20
 8003e26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e3      	bne.n	8003e06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0310 	bic.w	r3, r3, #16
 8003e62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e70:	61fa      	str	r2, [r7, #28]
 8003e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e3      	bne.n	8003e4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f83d 	bl	8003f10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e96:	e023      	b.n	8003ee0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x4f4>
 8003ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f8b0 	bl	8004016 <UART_Transmit_IT>
    return;
 8003eb6:	e014      	b.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
 8003ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f8f0 	bl	80040b6 <UART_EndTransmit_IT>
    return;
 8003ed6:	e004      	b.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ed8:	bf00      	nop
 8003eda:	e002      	b.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003edc:	bf00      	nop
 8003ede:	e000      	b.n	8003ee2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ee0:	bf00      	nop
  }
}
 8003ee2:	37e8      	adds	r7, #232	@ 0xe8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b095      	sub	sp, #84	@ 0x54
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f50:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e5      	bne.n	8003f30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3314      	adds	r3, #20
 8003f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3314      	adds	r3, #20
 8003f82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e5      	bne.n	8003f64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d119      	bne.n	8003fd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f023 0310 	bic.w	r3, r3, #16
 8003fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fc0:	61ba      	str	r2, [r7, #24]
 8003fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6979      	ldr	r1, [r7, #20]
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e5      	bne.n	8003fa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003fe2:	bf00      	nop
 8003fe4:	3754      	adds	r7, #84	@ 0x54
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7ff ff77 	bl	8003efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b21      	cmp	r3, #33	@ 0x21
 8004028:	d13e      	bne.n	80040a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004032:	d114      	bne.n	800405e <UART_Transmit_IT+0x48>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d110      	bne.n	800405e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004050:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	1c9a      	adds	r2, r3, #2
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	621a      	str	r2, [r3, #32]
 800405c:	e008      	b.n	8004070 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	1c59      	adds	r1, r3, #1
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6211      	str	r1, [r2, #32]
 8004068:	781a      	ldrb	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29b      	uxth	r3, r3
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4619      	mov	r1, r3
 800407e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10f      	bne.n	80040a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004092:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e000      	b.n	80040aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
  }
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fd f9d4 	bl	8001484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b08c      	sub	sp, #48	@ 0x30
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b22      	cmp	r3, #34	@ 0x22
 80040f8:	f040 80ae 	bne.w	8004258 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004104:	d117      	bne.n	8004136 <UART_Receive_IT+0x50>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d113      	bne.n	8004136 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	b29b      	uxth	r3, r3
 8004120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004124:	b29a      	uxth	r2, r3
 8004126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004128:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412e:	1c9a      	adds	r2, r3, #2
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	629a      	str	r2, [r3, #40]	@ 0x28
 8004134:	e026      	b.n	8004184 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800413c:	2300      	movs	r3, #0
 800413e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004148:	d007      	beq.n	800415a <UART_Receive_IT+0x74>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <UART_Receive_IT+0x82>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	e008      	b.n	800417a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004174:	b2da      	uxtb	r2, r3
 8004176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004178:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29b      	uxth	r3, r3
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	4619      	mov	r1, r3
 8004192:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004194:	2b00      	cmp	r3, #0
 8004196:	d15d      	bne.n	8004254 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0220 	bic.w	r2, r2, #32
 80041a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d135      	bne.n	800424a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	613b      	str	r3, [r7, #16]
   return(result);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f023 0310 	bic.w	r3, r3, #16
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004204:	623a      	str	r2, [r7, #32]
 8004206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	69f9      	ldr	r1, [r7, #28]
 800420a:	6a3a      	ldr	r2, [r7, #32]
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	61bb      	str	r3, [r7, #24]
   return(result);
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e5      	bne.n	80041e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b10      	cmp	r3, #16
 8004224:	d10a      	bne.n	800423c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004240:	4619      	mov	r1, r3
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff fe64 	bl	8003f10 <HAL_UARTEx_RxEventCallback>
 8004248:	e002      	b.n	8004250 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff fe4c 	bl	8003ee8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	e002      	b.n	800425a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e000      	b.n	800425a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
  }
}
 800425a:	4618      	mov	r0, r3
 800425c:	3730      	adds	r7, #48	@ 0x30
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004268:	b0c0      	sub	sp, #256	@ 0x100
 800426a:	af00      	add	r7, sp, #0
 800426c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004280:	68d9      	ldr	r1, [r3, #12]
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	ea40 0301 	orr.w	r3, r0, r1
 800428c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	431a      	orrs	r2, r3
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042bc:	f021 010c 	bic.w	r1, r1, #12
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042ca:	430b      	orrs	r3, r1
 80042cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042de:	6999      	ldr	r1, [r3, #24]
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	ea40 0301 	orr.w	r3, r0, r1
 80042ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b8f      	ldr	r3, [pc, #572]	@ (8004530 <UART_SetConfig+0x2cc>)
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d005      	beq.n	8004304 <UART_SetConfig+0xa0>
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004534 <UART_SetConfig+0x2d0>)
 8004300:	429a      	cmp	r2, r3
 8004302:	d104      	bne.n	800430e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004304:	f7fe fd32 	bl	8002d6c <HAL_RCC_GetPCLK2Freq>
 8004308:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800430c:	e003      	b.n	8004316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800430e:	f7fe fd19 	bl	8002d44 <HAL_RCC_GetPCLK1Freq>
 8004312:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004320:	f040 810c 	bne.w	800453c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004328:	2200      	movs	r2, #0
 800432a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800432e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004336:	4622      	mov	r2, r4
 8004338:	462b      	mov	r3, r5
 800433a:	1891      	adds	r1, r2, r2
 800433c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800433e:	415b      	adcs	r3, r3
 8004340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004346:	4621      	mov	r1, r4
 8004348:	eb12 0801 	adds.w	r8, r2, r1
 800434c:	4629      	mov	r1, r5
 800434e:	eb43 0901 	adc.w	r9, r3, r1
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004366:	4690      	mov	r8, r2
 8004368:	4699      	mov	r9, r3
 800436a:	4623      	mov	r3, r4
 800436c:	eb18 0303 	adds.w	r3, r8, r3
 8004370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004374:	462b      	mov	r3, r5
 8004376:	eb49 0303 	adc.w	r3, r9, r3
 800437a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800438a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800438e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004392:	460b      	mov	r3, r1
 8004394:	18db      	adds	r3, r3, r3
 8004396:	653b      	str	r3, [r7, #80]	@ 0x50
 8004398:	4613      	mov	r3, r2
 800439a:	eb42 0303 	adc.w	r3, r2, r3
 800439e:	657b      	str	r3, [r7, #84]	@ 0x54
 80043a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043a8:	f7fc fc1e 	bl	8000be8 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4b61      	ldr	r3, [pc, #388]	@ (8004538 <UART_SetConfig+0x2d4>)
 80043b2:	fba3 2302 	umull	r2, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	011c      	lsls	r4, r3, #4
 80043ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	1891      	adds	r1, r2, r2
 80043d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043d4:	415b      	adcs	r3, r3
 80043d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043dc:	4641      	mov	r1, r8
 80043de:	eb12 0a01 	adds.w	sl, r2, r1
 80043e2:	4649      	mov	r1, r9
 80043e4:	eb43 0b01 	adc.w	fp, r3, r1
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043fc:	4692      	mov	sl, r2
 80043fe:	469b      	mov	fp, r3
 8004400:	4643      	mov	r3, r8
 8004402:	eb1a 0303 	adds.w	r3, sl, r3
 8004406:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800440a:	464b      	mov	r3, r9
 800440c:	eb4b 0303 	adc.w	r3, fp, r3
 8004410:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004420:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004428:	460b      	mov	r3, r1
 800442a:	18db      	adds	r3, r3, r3
 800442c:	643b      	str	r3, [r7, #64]	@ 0x40
 800442e:	4613      	mov	r3, r2
 8004430:	eb42 0303 	adc.w	r3, r2, r3
 8004434:	647b      	str	r3, [r7, #68]	@ 0x44
 8004436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800443a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800443e:	f7fc fbd3 	bl	8000be8 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4611      	mov	r1, r2
 8004448:	4b3b      	ldr	r3, [pc, #236]	@ (8004538 <UART_SetConfig+0x2d4>)
 800444a:	fba3 2301 	umull	r2, r3, r3, r1
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2264      	movs	r2, #100	@ 0x64
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	1acb      	subs	r3, r1, r3
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800445e:	4b36      	ldr	r3, [pc, #216]	@ (8004538 <UART_SetConfig+0x2d4>)
 8004460:	fba3 2302 	umull	r2, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800446c:	441c      	add	r4, r3
 800446e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004478:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800447c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004480:	4642      	mov	r2, r8
 8004482:	464b      	mov	r3, r9
 8004484:	1891      	adds	r1, r2, r2
 8004486:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004488:	415b      	adcs	r3, r3
 800448a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800448c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004490:	4641      	mov	r1, r8
 8004492:	1851      	adds	r1, r2, r1
 8004494:	6339      	str	r1, [r7, #48]	@ 0x30
 8004496:	4649      	mov	r1, r9
 8004498:	414b      	adcs	r3, r1
 800449a:	637b      	str	r3, [r7, #52]	@ 0x34
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044a8:	4659      	mov	r1, fp
 80044aa:	00cb      	lsls	r3, r1, #3
 80044ac:	4651      	mov	r1, sl
 80044ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b2:	4651      	mov	r1, sl
 80044b4:	00ca      	lsls	r2, r1, #3
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	4642      	mov	r2, r8
 80044be:	189b      	adds	r3, r3, r2
 80044c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044c4:	464b      	mov	r3, r9
 80044c6:	460a      	mov	r2, r1
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044e4:	460b      	mov	r3, r1
 80044e6:	18db      	adds	r3, r3, r3
 80044e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ea:	4613      	mov	r3, r2
 80044ec:	eb42 0303 	adc.w	r3, r2, r3
 80044f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044fa:	f7fc fb75 	bl	8000be8 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4b0d      	ldr	r3, [pc, #52]	@ (8004538 <UART_SetConfig+0x2d4>)
 8004504:	fba3 1302 	umull	r1, r3, r3, r2
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	2164      	movs	r1, #100	@ 0x64
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	3332      	adds	r3, #50	@ 0x32
 8004516:	4a08      	ldr	r2, [pc, #32]	@ (8004538 <UART_SetConfig+0x2d4>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	f003 0207 	and.w	r2, r3, #7
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4422      	add	r2, r4
 800452a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800452c:	e106      	b.n	800473c <UART_SetConfig+0x4d8>
 800452e:	bf00      	nop
 8004530:	40011000 	.word	0x40011000
 8004534:	40011400 	.word	0x40011400
 8004538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800453c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004540:	2200      	movs	r2, #0
 8004542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004546:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800454a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800454e:	4642      	mov	r2, r8
 8004550:	464b      	mov	r3, r9
 8004552:	1891      	adds	r1, r2, r2
 8004554:	6239      	str	r1, [r7, #32]
 8004556:	415b      	adcs	r3, r3
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
 800455a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800455e:	4641      	mov	r1, r8
 8004560:	1854      	adds	r4, r2, r1
 8004562:	4649      	mov	r1, r9
 8004564:	eb43 0501 	adc.w	r5, r3, r1
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	00eb      	lsls	r3, r5, #3
 8004572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004576:	00e2      	lsls	r2, r4, #3
 8004578:	4614      	mov	r4, r2
 800457a:	461d      	mov	r5, r3
 800457c:	4643      	mov	r3, r8
 800457e:	18e3      	adds	r3, r4, r3
 8004580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004584:	464b      	mov	r3, r9
 8004586:	eb45 0303 	adc.w	r3, r5, r3
 800458a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800459a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045aa:	4629      	mov	r1, r5
 80045ac:	008b      	lsls	r3, r1, #2
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b4:	4621      	mov	r1, r4
 80045b6:	008a      	lsls	r2, r1, #2
 80045b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045bc:	f7fc fb14 	bl	8000be8 <__aeabi_uldivmod>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4b60      	ldr	r3, [pc, #384]	@ (8004748 <UART_SetConfig+0x4e4>)
 80045c6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	011c      	lsls	r4, r3, #4
 80045ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	1891      	adds	r1, r2, r2
 80045e6:	61b9      	str	r1, [r7, #24]
 80045e8:	415b      	adcs	r3, r3
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f0:	4641      	mov	r1, r8
 80045f2:	1851      	adds	r1, r2, r1
 80045f4:	6139      	str	r1, [r7, #16]
 80045f6:	4649      	mov	r1, r9
 80045f8:	414b      	adcs	r3, r1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004608:	4659      	mov	r1, fp
 800460a:	00cb      	lsls	r3, r1, #3
 800460c:	4651      	mov	r1, sl
 800460e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004612:	4651      	mov	r1, sl
 8004614:	00ca      	lsls	r2, r1, #3
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	4603      	mov	r3, r0
 800461c:	4642      	mov	r2, r8
 800461e:	189b      	adds	r3, r3, r2
 8004620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004624:	464b      	mov	r3, r9
 8004626:	460a      	mov	r2, r1
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	67bb      	str	r3, [r7, #120]	@ 0x78
 800463a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004648:	4649      	mov	r1, r9
 800464a:	008b      	lsls	r3, r1, #2
 800464c:	4641      	mov	r1, r8
 800464e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004652:	4641      	mov	r1, r8
 8004654:	008a      	lsls	r2, r1, #2
 8004656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800465a:	f7fc fac5 	bl	8000be8 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4611      	mov	r1, r2
 8004664:	4b38      	ldr	r3, [pc, #224]	@ (8004748 <UART_SetConfig+0x4e4>)
 8004666:	fba3 2301 	umull	r2, r3, r3, r1
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	2264      	movs	r2, #100	@ 0x64
 800466e:	fb02 f303 	mul.w	r3, r2, r3
 8004672:	1acb      	subs	r3, r1, r3
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	3332      	adds	r3, #50	@ 0x32
 8004678:	4a33      	ldr	r2, [pc, #204]	@ (8004748 <UART_SetConfig+0x4e4>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004684:	441c      	add	r4, r3
 8004686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800468a:	2200      	movs	r2, #0
 800468c:	673b      	str	r3, [r7, #112]	@ 0x70
 800468e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004690:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004694:	4642      	mov	r2, r8
 8004696:	464b      	mov	r3, r9
 8004698:	1891      	adds	r1, r2, r2
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	415b      	adcs	r3, r3
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a4:	4641      	mov	r1, r8
 80046a6:	1851      	adds	r1, r2, r1
 80046a8:	6039      	str	r1, [r7, #0]
 80046aa:	4649      	mov	r1, r9
 80046ac:	414b      	adcs	r3, r1
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046bc:	4659      	mov	r1, fp
 80046be:	00cb      	lsls	r3, r1, #3
 80046c0:	4651      	mov	r1, sl
 80046c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046c6:	4651      	mov	r1, sl
 80046c8:	00ca      	lsls	r2, r1, #3
 80046ca:	4610      	mov	r0, r2
 80046cc:	4619      	mov	r1, r3
 80046ce:	4603      	mov	r3, r0
 80046d0:	4642      	mov	r2, r8
 80046d2:	189b      	adds	r3, r3, r2
 80046d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046d6:	464b      	mov	r3, r9
 80046d8:	460a      	mov	r2, r1
 80046da:	eb42 0303 	adc.w	r3, r2, r3
 80046de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80046ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046f8:	4649      	mov	r1, r9
 80046fa:	008b      	lsls	r3, r1, #2
 80046fc:	4641      	mov	r1, r8
 80046fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004702:	4641      	mov	r1, r8
 8004704:	008a      	lsls	r2, r1, #2
 8004706:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800470a:	f7fc fa6d 	bl	8000be8 <__aeabi_uldivmod>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4b0d      	ldr	r3, [pc, #52]	@ (8004748 <UART_SetConfig+0x4e4>)
 8004714:	fba3 1302 	umull	r1, r3, r3, r2
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	2164      	movs	r1, #100	@ 0x64
 800471c:	fb01 f303 	mul.w	r3, r1, r3
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	3332      	adds	r3, #50	@ 0x32
 8004726:	4a08      	ldr	r2, [pc, #32]	@ (8004748 <UART_SetConfig+0x4e4>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	095b      	lsrs	r3, r3, #5
 800472e:	f003 020f 	and.w	r2, r3, #15
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4422      	add	r2, r4
 800473a:	609a      	str	r2, [r3, #8]
}
 800473c:	bf00      	nop
 800473e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004742:	46bd      	mov	sp, r7
 8004744:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004748:	51eb851f 	.word	0x51eb851f

0800474c <__cvt>:
 800474c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004750:	ec57 6b10 	vmov	r6, r7, d0
 8004754:	2f00      	cmp	r7, #0
 8004756:	460c      	mov	r4, r1
 8004758:	4619      	mov	r1, r3
 800475a:	463b      	mov	r3, r7
 800475c:	bfbb      	ittet	lt
 800475e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004762:	461f      	movlt	r7, r3
 8004764:	2300      	movge	r3, #0
 8004766:	232d      	movlt	r3, #45	@ 0x2d
 8004768:	700b      	strb	r3, [r1, #0]
 800476a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800476c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004770:	4691      	mov	r9, r2
 8004772:	f023 0820 	bic.w	r8, r3, #32
 8004776:	bfbc      	itt	lt
 8004778:	4632      	movlt	r2, r6
 800477a:	4616      	movlt	r6, r2
 800477c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004780:	d005      	beq.n	800478e <__cvt+0x42>
 8004782:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004786:	d100      	bne.n	800478a <__cvt+0x3e>
 8004788:	3401      	adds	r4, #1
 800478a:	2102      	movs	r1, #2
 800478c:	e000      	b.n	8004790 <__cvt+0x44>
 800478e:	2103      	movs	r1, #3
 8004790:	ab03      	add	r3, sp, #12
 8004792:	9301      	str	r3, [sp, #4]
 8004794:	ab02      	add	r3, sp, #8
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	ec47 6b10 	vmov	d0, r6, r7
 800479c:	4653      	mov	r3, sl
 800479e:	4622      	mov	r2, r4
 80047a0:	f000 fe56 	bl	8005450 <_dtoa_r>
 80047a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80047a8:	4605      	mov	r5, r0
 80047aa:	d119      	bne.n	80047e0 <__cvt+0x94>
 80047ac:	f019 0f01 	tst.w	r9, #1
 80047b0:	d00e      	beq.n	80047d0 <__cvt+0x84>
 80047b2:	eb00 0904 	add.w	r9, r0, r4
 80047b6:	2200      	movs	r2, #0
 80047b8:	2300      	movs	r3, #0
 80047ba:	4630      	mov	r0, r6
 80047bc:	4639      	mov	r1, r7
 80047be:	f7fc f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80047c2:	b108      	cbz	r0, 80047c8 <__cvt+0x7c>
 80047c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80047c8:	2230      	movs	r2, #48	@ 0x30
 80047ca:	9b03      	ldr	r3, [sp, #12]
 80047cc:	454b      	cmp	r3, r9
 80047ce:	d31e      	bcc.n	800480e <__cvt+0xc2>
 80047d0:	9b03      	ldr	r3, [sp, #12]
 80047d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80047d4:	1b5b      	subs	r3, r3, r5
 80047d6:	4628      	mov	r0, r5
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	b004      	add	sp, #16
 80047dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047e4:	eb00 0904 	add.w	r9, r0, r4
 80047e8:	d1e5      	bne.n	80047b6 <__cvt+0x6a>
 80047ea:	7803      	ldrb	r3, [r0, #0]
 80047ec:	2b30      	cmp	r3, #48	@ 0x30
 80047ee:	d10a      	bne.n	8004806 <__cvt+0xba>
 80047f0:	2200      	movs	r2, #0
 80047f2:	2300      	movs	r3, #0
 80047f4:	4630      	mov	r0, r6
 80047f6:	4639      	mov	r1, r7
 80047f8:	f7fc f966 	bl	8000ac8 <__aeabi_dcmpeq>
 80047fc:	b918      	cbnz	r0, 8004806 <__cvt+0xba>
 80047fe:	f1c4 0401 	rsb	r4, r4, #1
 8004802:	f8ca 4000 	str.w	r4, [sl]
 8004806:	f8da 3000 	ldr.w	r3, [sl]
 800480a:	4499      	add	r9, r3
 800480c:	e7d3      	b.n	80047b6 <__cvt+0x6a>
 800480e:	1c59      	adds	r1, r3, #1
 8004810:	9103      	str	r1, [sp, #12]
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e7d9      	b.n	80047ca <__cvt+0x7e>

08004816 <__exponent>:
 8004816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004818:	2900      	cmp	r1, #0
 800481a:	bfba      	itte	lt
 800481c:	4249      	neglt	r1, r1
 800481e:	232d      	movlt	r3, #45	@ 0x2d
 8004820:	232b      	movge	r3, #43	@ 0x2b
 8004822:	2909      	cmp	r1, #9
 8004824:	7002      	strb	r2, [r0, #0]
 8004826:	7043      	strb	r3, [r0, #1]
 8004828:	dd29      	ble.n	800487e <__exponent+0x68>
 800482a:	f10d 0307 	add.w	r3, sp, #7
 800482e:	461d      	mov	r5, r3
 8004830:	270a      	movs	r7, #10
 8004832:	461a      	mov	r2, r3
 8004834:	fbb1 f6f7 	udiv	r6, r1, r7
 8004838:	fb07 1416 	mls	r4, r7, r6, r1
 800483c:	3430      	adds	r4, #48	@ 0x30
 800483e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004842:	460c      	mov	r4, r1
 8004844:	2c63      	cmp	r4, #99	@ 0x63
 8004846:	f103 33ff 	add.w	r3, r3, #4294967295
 800484a:	4631      	mov	r1, r6
 800484c:	dcf1      	bgt.n	8004832 <__exponent+0x1c>
 800484e:	3130      	adds	r1, #48	@ 0x30
 8004850:	1e94      	subs	r4, r2, #2
 8004852:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004856:	1c41      	adds	r1, r0, #1
 8004858:	4623      	mov	r3, r4
 800485a:	42ab      	cmp	r3, r5
 800485c:	d30a      	bcc.n	8004874 <__exponent+0x5e>
 800485e:	f10d 0309 	add.w	r3, sp, #9
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	42ac      	cmp	r4, r5
 8004866:	bf88      	it	hi
 8004868:	2300      	movhi	r3, #0
 800486a:	3302      	adds	r3, #2
 800486c:	4403      	add	r3, r0
 800486e:	1a18      	subs	r0, r3, r0
 8004870:	b003      	add	sp, #12
 8004872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004874:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004878:	f801 6f01 	strb.w	r6, [r1, #1]!
 800487c:	e7ed      	b.n	800485a <__exponent+0x44>
 800487e:	2330      	movs	r3, #48	@ 0x30
 8004880:	3130      	adds	r1, #48	@ 0x30
 8004882:	7083      	strb	r3, [r0, #2]
 8004884:	70c1      	strb	r1, [r0, #3]
 8004886:	1d03      	adds	r3, r0, #4
 8004888:	e7f1      	b.n	800486e <__exponent+0x58>
	...

0800488c <_printf_float>:
 800488c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004890:	b08d      	sub	sp, #52	@ 0x34
 8004892:	460c      	mov	r4, r1
 8004894:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004898:	4616      	mov	r6, r2
 800489a:	461f      	mov	r7, r3
 800489c:	4605      	mov	r5, r0
 800489e:	f000 fcdb 	bl	8005258 <_localeconv_r>
 80048a2:	6803      	ldr	r3, [r0, #0]
 80048a4:	9304      	str	r3, [sp, #16]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fb fce2 	bl	8000270 <strlen>
 80048ac:	2300      	movs	r3, #0
 80048ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80048b0:	f8d8 3000 	ldr.w	r3, [r8]
 80048b4:	9005      	str	r0, [sp, #20]
 80048b6:	3307      	adds	r3, #7
 80048b8:	f023 0307 	bic.w	r3, r3, #7
 80048bc:	f103 0208 	add.w	r2, r3, #8
 80048c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80048c4:	f8d4 b000 	ldr.w	fp, [r4]
 80048c8:	f8c8 2000 	str.w	r2, [r8]
 80048cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80048d4:	9307      	str	r3, [sp, #28]
 80048d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80048da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80048de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048e2:	4b9c      	ldr	r3, [pc, #624]	@ (8004b54 <_printf_float+0x2c8>)
 80048e4:	f04f 32ff 	mov.w	r2, #4294967295
 80048e8:	f7fc f920 	bl	8000b2c <__aeabi_dcmpun>
 80048ec:	bb70      	cbnz	r0, 800494c <_printf_float+0xc0>
 80048ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048f2:	4b98      	ldr	r3, [pc, #608]	@ (8004b54 <_printf_float+0x2c8>)
 80048f4:	f04f 32ff 	mov.w	r2, #4294967295
 80048f8:	f7fc f8fa 	bl	8000af0 <__aeabi_dcmple>
 80048fc:	bb30      	cbnz	r0, 800494c <_printf_float+0xc0>
 80048fe:	2200      	movs	r2, #0
 8004900:	2300      	movs	r3, #0
 8004902:	4640      	mov	r0, r8
 8004904:	4649      	mov	r1, r9
 8004906:	f7fc f8e9 	bl	8000adc <__aeabi_dcmplt>
 800490a:	b110      	cbz	r0, 8004912 <_printf_float+0x86>
 800490c:	232d      	movs	r3, #45	@ 0x2d
 800490e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004912:	4a91      	ldr	r2, [pc, #580]	@ (8004b58 <_printf_float+0x2cc>)
 8004914:	4b91      	ldr	r3, [pc, #580]	@ (8004b5c <_printf_float+0x2d0>)
 8004916:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800491a:	bf8c      	ite	hi
 800491c:	4690      	movhi	r8, r2
 800491e:	4698      	movls	r8, r3
 8004920:	2303      	movs	r3, #3
 8004922:	6123      	str	r3, [r4, #16]
 8004924:	f02b 0304 	bic.w	r3, fp, #4
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	f04f 0900 	mov.w	r9, #0
 800492e:	9700      	str	r7, [sp, #0]
 8004930:	4633      	mov	r3, r6
 8004932:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004934:	4621      	mov	r1, r4
 8004936:	4628      	mov	r0, r5
 8004938:	f000 f9d2 	bl	8004ce0 <_printf_common>
 800493c:	3001      	adds	r0, #1
 800493e:	f040 808d 	bne.w	8004a5c <_printf_float+0x1d0>
 8004942:	f04f 30ff 	mov.w	r0, #4294967295
 8004946:	b00d      	add	sp, #52	@ 0x34
 8004948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494c:	4642      	mov	r2, r8
 800494e:	464b      	mov	r3, r9
 8004950:	4640      	mov	r0, r8
 8004952:	4649      	mov	r1, r9
 8004954:	f7fc f8ea 	bl	8000b2c <__aeabi_dcmpun>
 8004958:	b140      	cbz	r0, 800496c <_printf_float+0xe0>
 800495a:	464b      	mov	r3, r9
 800495c:	2b00      	cmp	r3, #0
 800495e:	bfbc      	itt	lt
 8004960:	232d      	movlt	r3, #45	@ 0x2d
 8004962:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004966:	4a7e      	ldr	r2, [pc, #504]	@ (8004b60 <_printf_float+0x2d4>)
 8004968:	4b7e      	ldr	r3, [pc, #504]	@ (8004b64 <_printf_float+0x2d8>)
 800496a:	e7d4      	b.n	8004916 <_printf_float+0x8a>
 800496c:	6863      	ldr	r3, [r4, #4]
 800496e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004972:	9206      	str	r2, [sp, #24]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	d13b      	bne.n	80049f0 <_printf_float+0x164>
 8004978:	2306      	movs	r3, #6
 800497a:	6063      	str	r3, [r4, #4]
 800497c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004980:	2300      	movs	r3, #0
 8004982:	6022      	str	r2, [r4, #0]
 8004984:	9303      	str	r3, [sp, #12]
 8004986:	ab0a      	add	r3, sp, #40	@ 0x28
 8004988:	e9cd a301 	strd	sl, r3, [sp, #4]
 800498c:	ab09      	add	r3, sp, #36	@ 0x24
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	6861      	ldr	r1, [r4, #4]
 8004992:	ec49 8b10 	vmov	d0, r8, r9
 8004996:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800499a:	4628      	mov	r0, r5
 800499c:	f7ff fed6 	bl	800474c <__cvt>
 80049a0:	9b06      	ldr	r3, [sp, #24]
 80049a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80049a4:	2b47      	cmp	r3, #71	@ 0x47
 80049a6:	4680      	mov	r8, r0
 80049a8:	d129      	bne.n	80049fe <_printf_float+0x172>
 80049aa:	1cc8      	adds	r0, r1, #3
 80049ac:	db02      	blt.n	80049b4 <_printf_float+0x128>
 80049ae:	6863      	ldr	r3, [r4, #4]
 80049b0:	4299      	cmp	r1, r3
 80049b2:	dd41      	ble.n	8004a38 <_printf_float+0x1ac>
 80049b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80049b8:	fa5f fa8a 	uxtb.w	sl, sl
 80049bc:	3901      	subs	r1, #1
 80049be:	4652      	mov	r2, sl
 80049c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80049c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80049c6:	f7ff ff26 	bl	8004816 <__exponent>
 80049ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049cc:	1813      	adds	r3, r2, r0
 80049ce:	2a01      	cmp	r2, #1
 80049d0:	4681      	mov	r9, r0
 80049d2:	6123      	str	r3, [r4, #16]
 80049d4:	dc02      	bgt.n	80049dc <_printf_float+0x150>
 80049d6:	6822      	ldr	r2, [r4, #0]
 80049d8:	07d2      	lsls	r2, r2, #31
 80049da:	d501      	bpl.n	80049e0 <_printf_float+0x154>
 80049dc:	3301      	adds	r3, #1
 80049de:	6123      	str	r3, [r4, #16]
 80049e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0a2      	beq.n	800492e <_printf_float+0xa2>
 80049e8:	232d      	movs	r3, #45	@ 0x2d
 80049ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049ee:	e79e      	b.n	800492e <_printf_float+0xa2>
 80049f0:	9a06      	ldr	r2, [sp, #24]
 80049f2:	2a47      	cmp	r2, #71	@ 0x47
 80049f4:	d1c2      	bne.n	800497c <_printf_float+0xf0>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1c0      	bne.n	800497c <_printf_float+0xf0>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e7bd      	b.n	800497a <_printf_float+0xee>
 80049fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a02:	d9db      	bls.n	80049bc <_printf_float+0x130>
 8004a04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a08:	d118      	bne.n	8004a3c <_printf_float+0x1b0>
 8004a0a:	2900      	cmp	r1, #0
 8004a0c:	6863      	ldr	r3, [r4, #4]
 8004a0e:	dd0b      	ble.n	8004a28 <_printf_float+0x19c>
 8004a10:	6121      	str	r1, [r4, #16]
 8004a12:	b913      	cbnz	r3, 8004a1a <_printf_float+0x18e>
 8004a14:	6822      	ldr	r2, [r4, #0]
 8004a16:	07d0      	lsls	r0, r2, #31
 8004a18:	d502      	bpl.n	8004a20 <_printf_float+0x194>
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	440b      	add	r3, r1
 8004a1e:	6123      	str	r3, [r4, #16]
 8004a20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a22:	f04f 0900 	mov.w	r9, #0
 8004a26:	e7db      	b.n	80049e0 <_printf_float+0x154>
 8004a28:	b913      	cbnz	r3, 8004a30 <_printf_float+0x1a4>
 8004a2a:	6822      	ldr	r2, [r4, #0]
 8004a2c:	07d2      	lsls	r2, r2, #31
 8004a2e:	d501      	bpl.n	8004a34 <_printf_float+0x1a8>
 8004a30:	3302      	adds	r3, #2
 8004a32:	e7f4      	b.n	8004a1e <_printf_float+0x192>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e7f2      	b.n	8004a1e <_printf_float+0x192>
 8004a38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a3e:	4299      	cmp	r1, r3
 8004a40:	db05      	blt.n	8004a4e <_printf_float+0x1c2>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	6121      	str	r1, [r4, #16]
 8004a46:	07d8      	lsls	r0, r3, #31
 8004a48:	d5ea      	bpl.n	8004a20 <_printf_float+0x194>
 8004a4a:	1c4b      	adds	r3, r1, #1
 8004a4c:	e7e7      	b.n	8004a1e <_printf_float+0x192>
 8004a4e:	2900      	cmp	r1, #0
 8004a50:	bfd4      	ite	le
 8004a52:	f1c1 0202 	rsble	r2, r1, #2
 8004a56:	2201      	movgt	r2, #1
 8004a58:	4413      	add	r3, r2
 8004a5a:	e7e0      	b.n	8004a1e <_printf_float+0x192>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	055a      	lsls	r2, r3, #21
 8004a60:	d407      	bmi.n	8004a72 <_printf_float+0x1e6>
 8004a62:	6923      	ldr	r3, [r4, #16]
 8004a64:	4642      	mov	r2, r8
 8004a66:	4631      	mov	r1, r6
 8004a68:	4628      	mov	r0, r5
 8004a6a:	47b8      	blx	r7
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d12b      	bne.n	8004ac8 <_printf_float+0x23c>
 8004a70:	e767      	b.n	8004942 <_printf_float+0xb6>
 8004a72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a76:	f240 80dd 	bls.w	8004c34 <_printf_float+0x3a8>
 8004a7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2300      	movs	r3, #0
 8004a82:	f7fc f821 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a86:	2800      	cmp	r0, #0
 8004a88:	d033      	beq.n	8004af2 <_printf_float+0x266>
 8004a8a:	4a37      	ldr	r2, [pc, #220]	@ (8004b68 <_printf_float+0x2dc>)
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	f43f af54 	beq.w	8004942 <_printf_float+0xb6>
 8004a9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004a9e:	4543      	cmp	r3, r8
 8004aa0:	db02      	blt.n	8004aa8 <_printf_float+0x21c>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	07d8      	lsls	r0, r3, #31
 8004aa6:	d50f      	bpl.n	8004ac8 <_printf_float+0x23c>
 8004aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aac:	4631      	mov	r1, r6
 8004aae:	4628      	mov	r0, r5
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f43f af45 	beq.w	8004942 <_printf_float+0xb6>
 8004ab8:	f04f 0900 	mov.w	r9, #0
 8004abc:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ac0:	f104 0a1a 	add.w	sl, r4, #26
 8004ac4:	45c8      	cmp	r8, r9
 8004ac6:	dc09      	bgt.n	8004adc <_printf_float+0x250>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	079b      	lsls	r3, r3, #30
 8004acc:	f100 8103 	bmi.w	8004cd6 <_printf_float+0x44a>
 8004ad0:	68e0      	ldr	r0, [r4, #12]
 8004ad2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ad4:	4298      	cmp	r0, r3
 8004ad6:	bfb8      	it	lt
 8004ad8:	4618      	movlt	r0, r3
 8004ada:	e734      	b.n	8004946 <_printf_float+0xba>
 8004adc:	2301      	movs	r3, #1
 8004ade:	4652      	mov	r2, sl
 8004ae0:	4631      	mov	r1, r6
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	47b8      	blx	r7
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	f43f af2b 	beq.w	8004942 <_printf_float+0xb6>
 8004aec:	f109 0901 	add.w	r9, r9, #1
 8004af0:	e7e8      	b.n	8004ac4 <_printf_float+0x238>
 8004af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	dc39      	bgt.n	8004b6c <_printf_float+0x2e0>
 8004af8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b68 <_printf_float+0x2dc>)
 8004afa:	2301      	movs	r3, #1
 8004afc:	4631      	mov	r1, r6
 8004afe:	4628      	mov	r0, r5
 8004b00:	47b8      	blx	r7
 8004b02:	3001      	adds	r0, #1
 8004b04:	f43f af1d 	beq.w	8004942 <_printf_float+0xb6>
 8004b08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004b0c:	ea59 0303 	orrs.w	r3, r9, r3
 8004b10:	d102      	bne.n	8004b18 <_printf_float+0x28c>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	07d9      	lsls	r1, r3, #31
 8004b16:	d5d7      	bpl.n	8004ac8 <_printf_float+0x23c>
 8004b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b1c:	4631      	mov	r1, r6
 8004b1e:	4628      	mov	r0, r5
 8004b20:	47b8      	blx	r7
 8004b22:	3001      	adds	r0, #1
 8004b24:	f43f af0d 	beq.w	8004942 <_printf_float+0xb6>
 8004b28:	f04f 0a00 	mov.w	sl, #0
 8004b2c:	f104 0b1a 	add.w	fp, r4, #26
 8004b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b32:	425b      	negs	r3, r3
 8004b34:	4553      	cmp	r3, sl
 8004b36:	dc01      	bgt.n	8004b3c <_printf_float+0x2b0>
 8004b38:	464b      	mov	r3, r9
 8004b3a:	e793      	b.n	8004a64 <_printf_float+0x1d8>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	465a      	mov	r2, fp
 8004b40:	4631      	mov	r1, r6
 8004b42:	4628      	mov	r0, r5
 8004b44:	47b8      	blx	r7
 8004b46:	3001      	adds	r0, #1
 8004b48:	f43f aefb 	beq.w	8004942 <_printf_float+0xb6>
 8004b4c:	f10a 0a01 	add.w	sl, sl, #1
 8004b50:	e7ee      	b.n	8004b30 <_printf_float+0x2a4>
 8004b52:	bf00      	nop
 8004b54:	7fefffff 	.word	0x7fefffff
 8004b58:	08007510 	.word	0x08007510
 8004b5c:	0800750c 	.word	0x0800750c
 8004b60:	08007518 	.word	0x08007518
 8004b64:	08007514 	.word	0x08007514
 8004b68:	0800751c 	.word	0x0800751c
 8004b6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b72:	4553      	cmp	r3, sl
 8004b74:	bfa8      	it	ge
 8004b76:	4653      	movge	r3, sl
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	4699      	mov	r9, r3
 8004b7c:	dc36      	bgt.n	8004bec <_printf_float+0x360>
 8004b7e:	f04f 0b00 	mov.w	fp, #0
 8004b82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b86:	f104 021a 	add.w	r2, r4, #26
 8004b8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b8c:	9306      	str	r3, [sp, #24]
 8004b8e:	eba3 0309 	sub.w	r3, r3, r9
 8004b92:	455b      	cmp	r3, fp
 8004b94:	dc31      	bgt.n	8004bfa <_printf_float+0x36e>
 8004b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b98:	459a      	cmp	sl, r3
 8004b9a:	dc3a      	bgt.n	8004c12 <_printf_float+0x386>
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	07da      	lsls	r2, r3, #31
 8004ba0:	d437      	bmi.n	8004c12 <_printf_float+0x386>
 8004ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ba4:	ebaa 0903 	sub.w	r9, sl, r3
 8004ba8:	9b06      	ldr	r3, [sp, #24]
 8004baa:	ebaa 0303 	sub.w	r3, sl, r3
 8004bae:	4599      	cmp	r9, r3
 8004bb0:	bfa8      	it	ge
 8004bb2:	4699      	movge	r9, r3
 8004bb4:	f1b9 0f00 	cmp.w	r9, #0
 8004bb8:	dc33      	bgt.n	8004c22 <_printf_float+0x396>
 8004bba:	f04f 0800 	mov.w	r8, #0
 8004bbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bc2:	f104 0b1a 	add.w	fp, r4, #26
 8004bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bc8:	ebaa 0303 	sub.w	r3, sl, r3
 8004bcc:	eba3 0309 	sub.w	r3, r3, r9
 8004bd0:	4543      	cmp	r3, r8
 8004bd2:	f77f af79 	ble.w	8004ac8 <_printf_float+0x23c>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	465a      	mov	r2, fp
 8004bda:	4631      	mov	r1, r6
 8004bdc:	4628      	mov	r0, r5
 8004bde:	47b8      	blx	r7
 8004be0:	3001      	adds	r0, #1
 8004be2:	f43f aeae 	beq.w	8004942 <_printf_float+0xb6>
 8004be6:	f108 0801 	add.w	r8, r8, #1
 8004bea:	e7ec      	b.n	8004bc6 <_printf_float+0x33a>
 8004bec:	4642      	mov	r2, r8
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b8      	blx	r7
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d1c2      	bne.n	8004b7e <_printf_float+0x2f2>
 8004bf8:	e6a3      	b.n	8004942 <_printf_float+0xb6>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	9206      	str	r2, [sp, #24]
 8004c02:	47b8      	blx	r7
 8004c04:	3001      	adds	r0, #1
 8004c06:	f43f ae9c 	beq.w	8004942 <_printf_float+0xb6>
 8004c0a:	9a06      	ldr	r2, [sp, #24]
 8004c0c:	f10b 0b01 	add.w	fp, fp, #1
 8004c10:	e7bb      	b.n	8004b8a <_printf_float+0x2fe>
 8004c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c16:	4631      	mov	r1, r6
 8004c18:	4628      	mov	r0, r5
 8004c1a:	47b8      	blx	r7
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d1c0      	bne.n	8004ba2 <_printf_float+0x316>
 8004c20:	e68f      	b.n	8004942 <_printf_float+0xb6>
 8004c22:	9a06      	ldr	r2, [sp, #24]
 8004c24:	464b      	mov	r3, r9
 8004c26:	4442      	add	r2, r8
 8004c28:	4631      	mov	r1, r6
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	47b8      	blx	r7
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d1c3      	bne.n	8004bba <_printf_float+0x32e>
 8004c32:	e686      	b.n	8004942 <_printf_float+0xb6>
 8004c34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c38:	f1ba 0f01 	cmp.w	sl, #1
 8004c3c:	dc01      	bgt.n	8004c42 <_printf_float+0x3b6>
 8004c3e:	07db      	lsls	r3, r3, #31
 8004c40:	d536      	bpl.n	8004cb0 <_printf_float+0x424>
 8004c42:	2301      	movs	r3, #1
 8004c44:	4642      	mov	r2, r8
 8004c46:	4631      	mov	r1, r6
 8004c48:	4628      	mov	r0, r5
 8004c4a:	47b8      	blx	r7
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	f43f ae78 	beq.w	8004942 <_printf_float+0xb6>
 8004c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f43f ae70 	beq.w	8004942 <_printf_float+0xb6>
 8004c62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c66:	2200      	movs	r2, #0
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c6e:	f7fb ff2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c72:	b9c0      	cbnz	r0, 8004ca6 <_printf_float+0x41a>
 8004c74:	4653      	mov	r3, sl
 8004c76:	f108 0201 	add.w	r2, r8, #1
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	47b8      	blx	r7
 8004c80:	3001      	adds	r0, #1
 8004c82:	d10c      	bne.n	8004c9e <_printf_float+0x412>
 8004c84:	e65d      	b.n	8004942 <_printf_float+0xb6>
 8004c86:	2301      	movs	r3, #1
 8004c88:	465a      	mov	r2, fp
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	f43f ae56 	beq.w	8004942 <_printf_float+0xb6>
 8004c96:	f108 0801 	add.w	r8, r8, #1
 8004c9a:	45d0      	cmp	r8, sl
 8004c9c:	dbf3      	blt.n	8004c86 <_printf_float+0x3fa>
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ca4:	e6df      	b.n	8004a66 <_printf_float+0x1da>
 8004ca6:	f04f 0800 	mov.w	r8, #0
 8004caa:	f104 0b1a 	add.w	fp, r4, #26
 8004cae:	e7f4      	b.n	8004c9a <_printf_float+0x40e>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4642      	mov	r2, r8
 8004cb4:	e7e1      	b.n	8004c7a <_printf_float+0x3ee>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	464a      	mov	r2, r9
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	47b8      	blx	r7
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	f43f ae3e 	beq.w	8004942 <_printf_float+0xb6>
 8004cc6:	f108 0801 	add.w	r8, r8, #1
 8004cca:	68e3      	ldr	r3, [r4, #12]
 8004ccc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004cce:	1a5b      	subs	r3, r3, r1
 8004cd0:	4543      	cmp	r3, r8
 8004cd2:	dcf0      	bgt.n	8004cb6 <_printf_float+0x42a>
 8004cd4:	e6fc      	b.n	8004ad0 <_printf_float+0x244>
 8004cd6:	f04f 0800 	mov.w	r8, #0
 8004cda:	f104 0919 	add.w	r9, r4, #25
 8004cde:	e7f4      	b.n	8004cca <_printf_float+0x43e>

08004ce0 <_printf_common>:
 8004ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce4:	4616      	mov	r6, r2
 8004ce6:	4698      	mov	r8, r3
 8004ce8:	688a      	ldr	r2, [r1, #8]
 8004cea:	690b      	ldr	r3, [r1, #16]
 8004cec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	bfb8      	it	lt
 8004cf4:	4613      	movlt	r3, r2
 8004cf6:	6033      	str	r3, [r6, #0]
 8004cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cfc:	4607      	mov	r7, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	b10a      	cbz	r2, 8004d06 <_printf_common+0x26>
 8004d02:	3301      	adds	r3, #1
 8004d04:	6033      	str	r3, [r6, #0]
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	0699      	lsls	r1, r3, #26
 8004d0a:	bf42      	ittt	mi
 8004d0c:	6833      	ldrmi	r3, [r6, #0]
 8004d0e:	3302      	addmi	r3, #2
 8004d10:	6033      	strmi	r3, [r6, #0]
 8004d12:	6825      	ldr	r5, [r4, #0]
 8004d14:	f015 0506 	ands.w	r5, r5, #6
 8004d18:	d106      	bne.n	8004d28 <_printf_common+0x48>
 8004d1a:	f104 0a19 	add.w	sl, r4, #25
 8004d1e:	68e3      	ldr	r3, [r4, #12]
 8004d20:	6832      	ldr	r2, [r6, #0]
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	42ab      	cmp	r3, r5
 8004d26:	dc26      	bgt.n	8004d76 <_printf_common+0x96>
 8004d28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d2c:	6822      	ldr	r2, [r4, #0]
 8004d2e:	3b00      	subs	r3, #0
 8004d30:	bf18      	it	ne
 8004d32:	2301      	movne	r3, #1
 8004d34:	0692      	lsls	r2, r2, #26
 8004d36:	d42b      	bmi.n	8004d90 <_printf_common+0xb0>
 8004d38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	4638      	mov	r0, r7
 8004d40:	47c8      	blx	r9
 8004d42:	3001      	adds	r0, #1
 8004d44:	d01e      	beq.n	8004d84 <_printf_common+0xa4>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	6922      	ldr	r2, [r4, #16]
 8004d4a:	f003 0306 	and.w	r3, r3, #6
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	bf02      	ittt	eq
 8004d52:	68e5      	ldreq	r5, [r4, #12]
 8004d54:	6833      	ldreq	r3, [r6, #0]
 8004d56:	1aed      	subeq	r5, r5, r3
 8004d58:	68a3      	ldr	r3, [r4, #8]
 8004d5a:	bf0c      	ite	eq
 8004d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d60:	2500      	movne	r5, #0
 8004d62:	4293      	cmp	r3, r2
 8004d64:	bfc4      	itt	gt
 8004d66:	1a9b      	subgt	r3, r3, r2
 8004d68:	18ed      	addgt	r5, r5, r3
 8004d6a:	2600      	movs	r6, #0
 8004d6c:	341a      	adds	r4, #26
 8004d6e:	42b5      	cmp	r5, r6
 8004d70:	d11a      	bne.n	8004da8 <_printf_common+0xc8>
 8004d72:	2000      	movs	r0, #0
 8004d74:	e008      	b.n	8004d88 <_printf_common+0xa8>
 8004d76:	2301      	movs	r3, #1
 8004d78:	4652      	mov	r2, sl
 8004d7a:	4641      	mov	r1, r8
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	47c8      	blx	r9
 8004d80:	3001      	adds	r0, #1
 8004d82:	d103      	bne.n	8004d8c <_printf_common+0xac>
 8004d84:	f04f 30ff 	mov.w	r0, #4294967295
 8004d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8c:	3501      	adds	r5, #1
 8004d8e:	e7c6      	b.n	8004d1e <_printf_common+0x3e>
 8004d90:	18e1      	adds	r1, r4, r3
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	2030      	movs	r0, #48	@ 0x30
 8004d96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d9a:	4422      	add	r2, r4
 8004d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004da0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004da4:	3302      	adds	r3, #2
 8004da6:	e7c7      	b.n	8004d38 <_printf_common+0x58>
 8004da8:	2301      	movs	r3, #1
 8004daa:	4622      	mov	r2, r4
 8004dac:	4641      	mov	r1, r8
 8004dae:	4638      	mov	r0, r7
 8004db0:	47c8      	blx	r9
 8004db2:	3001      	adds	r0, #1
 8004db4:	d0e6      	beq.n	8004d84 <_printf_common+0xa4>
 8004db6:	3601      	adds	r6, #1
 8004db8:	e7d9      	b.n	8004d6e <_printf_common+0x8e>
	...

08004dbc <_printf_i>:
 8004dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc0:	7e0f      	ldrb	r7, [r1, #24]
 8004dc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dc4:	2f78      	cmp	r7, #120	@ 0x78
 8004dc6:	4691      	mov	r9, r2
 8004dc8:	4680      	mov	r8, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	469a      	mov	sl, r3
 8004dce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dd2:	d807      	bhi.n	8004de4 <_printf_i+0x28>
 8004dd4:	2f62      	cmp	r7, #98	@ 0x62
 8004dd6:	d80a      	bhi.n	8004dee <_printf_i+0x32>
 8004dd8:	2f00      	cmp	r7, #0
 8004dda:	f000 80d1 	beq.w	8004f80 <_printf_i+0x1c4>
 8004dde:	2f58      	cmp	r7, #88	@ 0x58
 8004de0:	f000 80b8 	beq.w	8004f54 <_printf_i+0x198>
 8004de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004de8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004dec:	e03a      	b.n	8004e64 <_printf_i+0xa8>
 8004dee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004df2:	2b15      	cmp	r3, #21
 8004df4:	d8f6      	bhi.n	8004de4 <_printf_i+0x28>
 8004df6:	a101      	add	r1, pc, #4	@ (adr r1, 8004dfc <_printf_i+0x40>)
 8004df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dfc:	08004e55 	.word	0x08004e55
 8004e00:	08004e69 	.word	0x08004e69
 8004e04:	08004de5 	.word	0x08004de5
 8004e08:	08004de5 	.word	0x08004de5
 8004e0c:	08004de5 	.word	0x08004de5
 8004e10:	08004de5 	.word	0x08004de5
 8004e14:	08004e69 	.word	0x08004e69
 8004e18:	08004de5 	.word	0x08004de5
 8004e1c:	08004de5 	.word	0x08004de5
 8004e20:	08004de5 	.word	0x08004de5
 8004e24:	08004de5 	.word	0x08004de5
 8004e28:	08004f67 	.word	0x08004f67
 8004e2c:	08004e93 	.word	0x08004e93
 8004e30:	08004f21 	.word	0x08004f21
 8004e34:	08004de5 	.word	0x08004de5
 8004e38:	08004de5 	.word	0x08004de5
 8004e3c:	08004f89 	.word	0x08004f89
 8004e40:	08004de5 	.word	0x08004de5
 8004e44:	08004e93 	.word	0x08004e93
 8004e48:	08004de5 	.word	0x08004de5
 8004e4c:	08004de5 	.word	0x08004de5
 8004e50:	08004f29 	.word	0x08004f29
 8004e54:	6833      	ldr	r3, [r6, #0]
 8004e56:	1d1a      	adds	r2, r3, #4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6032      	str	r2, [r6, #0]
 8004e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e64:	2301      	movs	r3, #1
 8004e66:	e09c      	b.n	8004fa2 <_printf_i+0x1e6>
 8004e68:	6833      	ldr	r3, [r6, #0]
 8004e6a:	6820      	ldr	r0, [r4, #0]
 8004e6c:	1d19      	adds	r1, r3, #4
 8004e6e:	6031      	str	r1, [r6, #0]
 8004e70:	0606      	lsls	r6, r0, #24
 8004e72:	d501      	bpl.n	8004e78 <_printf_i+0xbc>
 8004e74:	681d      	ldr	r5, [r3, #0]
 8004e76:	e003      	b.n	8004e80 <_printf_i+0xc4>
 8004e78:	0645      	lsls	r5, r0, #25
 8004e7a:	d5fb      	bpl.n	8004e74 <_printf_i+0xb8>
 8004e7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e80:	2d00      	cmp	r5, #0
 8004e82:	da03      	bge.n	8004e8c <_printf_i+0xd0>
 8004e84:	232d      	movs	r3, #45	@ 0x2d
 8004e86:	426d      	negs	r5, r5
 8004e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e8c:	4858      	ldr	r0, [pc, #352]	@ (8004ff0 <_printf_i+0x234>)
 8004e8e:	230a      	movs	r3, #10
 8004e90:	e011      	b.n	8004eb6 <_printf_i+0xfa>
 8004e92:	6821      	ldr	r1, [r4, #0]
 8004e94:	6833      	ldr	r3, [r6, #0]
 8004e96:	0608      	lsls	r0, r1, #24
 8004e98:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e9c:	d402      	bmi.n	8004ea4 <_printf_i+0xe8>
 8004e9e:	0649      	lsls	r1, r1, #25
 8004ea0:	bf48      	it	mi
 8004ea2:	b2ad      	uxthmi	r5, r5
 8004ea4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ea6:	4852      	ldr	r0, [pc, #328]	@ (8004ff0 <_printf_i+0x234>)
 8004ea8:	6033      	str	r3, [r6, #0]
 8004eaa:	bf14      	ite	ne
 8004eac:	230a      	movne	r3, #10
 8004eae:	2308      	moveq	r3, #8
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004eb6:	6866      	ldr	r6, [r4, #4]
 8004eb8:	60a6      	str	r6, [r4, #8]
 8004eba:	2e00      	cmp	r6, #0
 8004ebc:	db05      	blt.n	8004eca <_printf_i+0x10e>
 8004ebe:	6821      	ldr	r1, [r4, #0]
 8004ec0:	432e      	orrs	r6, r5
 8004ec2:	f021 0104 	bic.w	r1, r1, #4
 8004ec6:	6021      	str	r1, [r4, #0]
 8004ec8:	d04b      	beq.n	8004f62 <_printf_i+0x1a6>
 8004eca:	4616      	mov	r6, r2
 8004ecc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ed0:	fb03 5711 	mls	r7, r3, r1, r5
 8004ed4:	5dc7      	ldrb	r7, [r0, r7]
 8004ed6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004eda:	462f      	mov	r7, r5
 8004edc:	42bb      	cmp	r3, r7
 8004ede:	460d      	mov	r5, r1
 8004ee0:	d9f4      	bls.n	8004ecc <_printf_i+0x110>
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d10b      	bne.n	8004efe <_printf_i+0x142>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	07df      	lsls	r7, r3, #31
 8004eea:	d508      	bpl.n	8004efe <_printf_i+0x142>
 8004eec:	6923      	ldr	r3, [r4, #16]
 8004eee:	6861      	ldr	r1, [r4, #4]
 8004ef0:	4299      	cmp	r1, r3
 8004ef2:	bfde      	ittt	le
 8004ef4:	2330      	movle	r3, #48	@ 0x30
 8004ef6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004efa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004efe:	1b92      	subs	r2, r2, r6
 8004f00:	6122      	str	r2, [r4, #16]
 8004f02:	f8cd a000 	str.w	sl, [sp]
 8004f06:	464b      	mov	r3, r9
 8004f08:	aa03      	add	r2, sp, #12
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	4640      	mov	r0, r8
 8004f0e:	f7ff fee7 	bl	8004ce0 <_printf_common>
 8004f12:	3001      	adds	r0, #1
 8004f14:	d14a      	bne.n	8004fac <_printf_i+0x1f0>
 8004f16:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1a:	b004      	add	sp, #16
 8004f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	f043 0320 	orr.w	r3, r3, #32
 8004f26:	6023      	str	r3, [r4, #0]
 8004f28:	4832      	ldr	r0, [pc, #200]	@ (8004ff4 <_printf_i+0x238>)
 8004f2a:	2778      	movs	r7, #120	@ 0x78
 8004f2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	6831      	ldr	r1, [r6, #0]
 8004f34:	061f      	lsls	r7, r3, #24
 8004f36:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f3a:	d402      	bmi.n	8004f42 <_printf_i+0x186>
 8004f3c:	065f      	lsls	r7, r3, #25
 8004f3e:	bf48      	it	mi
 8004f40:	b2ad      	uxthmi	r5, r5
 8004f42:	6031      	str	r1, [r6, #0]
 8004f44:	07d9      	lsls	r1, r3, #31
 8004f46:	bf44      	itt	mi
 8004f48:	f043 0320 	orrmi.w	r3, r3, #32
 8004f4c:	6023      	strmi	r3, [r4, #0]
 8004f4e:	b11d      	cbz	r5, 8004f58 <_printf_i+0x19c>
 8004f50:	2310      	movs	r3, #16
 8004f52:	e7ad      	b.n	8004eb0 <_printf_i+0xf4>
 8004f54:	4826      	ldr	r0, [pc, #152]	@ (8004ff0 <_printf_i+0x234>)
 8004f56:	e7e9      	b.n	8004f2c <_printf_i+0x170>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	f023 0320 	bic.w	r3, r3, #32
 8004f5e:	6023      	str	r3, [r4, #0]
 8004f60:	e7f6      	b.n	8004f50 <_printf_i+0x194>
 8004f62:	4616      	mov	r6, r2
 8004f64:	e7bd      	b.n	8004ee2 <_printf_i+0x126>
 8004f66:	6833      	ldr	r3, [r6, #0]
 8004f68:	6825      	ldr	r5, [r4, #0]
 8004f6a:	6961      	ldr	r1, [r4, #20]
 8004f6c:	1d18      	adds	r0, r3, #4
 8004f6e:	6030      	str	r0, [r6, #0]
 8004f70:	062e      	lsls	r6, r5, #24
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	d501      	bpl.n	8004f7a <_printf_i+0x1be>
 8004f76:	6019      	str	r1, [r3, #0]
 8004f78:	e002      	b.n	8004f80 <_printf_i+0x1c4>
 8004f7a:	0668      	lsls	r0, r5, #25
 8004f7c:	d5fb      	bpl.n	8004f76 <_printf_i+0x1ba>
 8004f7e:	8019      	strh	r1, [r3, #0]
 8004f80:	2300      	movs	r3, #0
 8004f82:	6123      	str	r3, [r4, #16]
 8004f84:	4616      	mov	r6, r2
 8004f86:	e7bc      	b.n	8004f02 <_printf_i+0x146>
 8004f88:	6833      	ldr	r3, [r6, #0]
 8004f8a:	1d1a      	adds	r2, r3, #4
 8004f8c:	6032      	str	r2, [r6, #0]
 8004f8e:	681e      	ldr	r6, [r3, #0]
 8004f90:	6862      	ldr	r2, [r4, #4]
 8004f92:	2100      	movs	r1, #0
 8004f94:	4630      	mov	r0, r6
 8004f96:	f7fb f91b 	bl	80001d0 <memchr>
 8004f9a:	b108      	cbz	r0, 8004fa0 <_printf_i+0x1e4>
 8004f9c:	1b80      	subs	r0, r0, r6
 8004f9e:	6060      	str	r0, [r4, #4]
 8004fa0:	6863      	ldr	r3, [r4, #4]
 8004fa2:	6123      	str	r3, [r4, #16]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004faa:	e7aa      	b.n	8004f02 <_printf_i+0x146>
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	4632      	mov	r2, r6
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	4640      	mov	r0, r8
 8004fb4:	47d0      	blx	sl
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d0ad      	beq.n	8004f16 <_printf_i+0x15a>
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	079b      	lsls	r3, r3, #30
 8004fbe:	d413      	bmi.n	8004fe8 <_printf_i+0x22c>
 8004fc0:	68e0      	ldr	r0, [r4, #12]
 8004fc2:	9b03      	ldr	r3, [sp, #12]
 8004fc4:	4298      	cmp	r0, r3
 8004fc6:	bfb8      	it	lt
 8004fc8:	4618      	movlt	r0, r3
 8004fca:	e7a6      	b.n	8004f1a <_printf_i+0x15e>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	4632      	mov	r2, r6
 8004fd0:	4649      	mov	r1, r9
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	47d0      	blx	sl
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	d09d      	beq.n	8004f16 <_printf_i+0x15a>
 8004fda:	3501      	adds	r5, #1
 8004fdc:	68e3      	ldr	r3, [r4, #12]
 8004fde:	9903      	ldr	r1, [sp, #12]
 8004fe0:	1a5b      	subs	r3, r3, r1
 8004fe2:	42ab      	cmp	r3, r5
 8004fe4:	dcf2      	bgt.n	8004fcc <_printf_i+0x210>
 8004fe6:	e7eb      	b.n	8004fc0 <_printf_i+0x204>
 8004fe8:	2500      	movs	r5, #0
 8004fea:	f104 0619 	add.w	r6, r4, #25
 8004fee:	e7f5      	b.n	8004fdc <_printf_i+0x220>
 8004ff0:	0800751e 	.word	0x0800751e
 8004ff4:	0800752f 	.word	0x0800752f

08004ff8 <std>:
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	b510      	push	{r4, lr}
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	e9c0 3300 	strd	r3, r3, [r0]
 8005002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005006:	6083      	str	r3, [r0, #8]
 8005008:	8181      	strh	r1, [r0, #12]
 800500a:	6643      	str	r3, [r0, #100]	@ 0x64
 800500c:	81c2      	strh	r2, [r0, #14]
 800500e:	6183      	str	r3, [r0, #24]
 8005010:	4619      	mov	r1, r3
 8005012:	2208      	movs	r2, #8
 8005014:	305c      	adds	r0, #92	@ 0x5c
 8005016:	f000 f916 	bl	8005246 <memset>
 800501a:	4b0d      	ldr	r3, [pc, #52]	@ (8005050 <std+0x58>)
 800501c:	6263      	str	r3, [r4, #36]	@ 0x24
 800501e:	4b0d      	ldr	r3, [pc, #52]	@ (8005054 <std+0x5c>)
 8005020:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005022:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <std+0x60>)
 8005024:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005026:	4b0d      	ldr	r3, [pc, #52]	@ (800505c <std+0x64>)
 8005028:	6323      	str	r3, [r4, #48]	@ 0x30
 800502a:	4b0d      	ldr	r3, [pc, #52]	@ (8005060 <std+0x68>)
 800502c:	6224      	str	r4, [r4, #32]
 800502e:	429c      	cmp	r4, r3
 8005030:	d006      	beq.n	8005040 <std+0x48>
 8005032:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005036:	4294      	cmp	r4, r2
 8005038:	d002      	beq.n	8005040 <std+0x48>
 800503a:	33d0      	adds	r3, #208	@ 0xd0
 800503c:	429c      	cmp	r4, r3
 800503e:	d105      	bne.n	800504c <std+0x54>
 8005040:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005048:	f000 b974 	b.w	8005334 <__retarget_lock_init_recursive>
 800504c:	bd10      	pop	{r4, pc}
 800504e:	bf00      	nop
 8005050:	080051c1 	.word	0x080051c1
 8005054:	080051e3 	.word	0x080051e3
 8005058:	0800521b 	.word	0x0800521b
 800505c:	0800523f 	.word	0x0800523f
 8005060:	2000032c 	.word	0x2000032c

08005064 <stdio_exit_handler>:
 8005064:	4a02      	ldr	r2, [pc, #8]	@ (8005070 <stdio_exit_handler+0xc>)
 8005066:	4903      	ldr	r1, [pc, #12]	@ (8005074 <stdio_exit_handler+0x10>)
 8005068:	4803      	ldr	r0, [pc, #12]	@ (8005078 <stdio_exit_handler+0x14>)
 800506a:	f000 b869 	b.w	8005140 <_fwalk_sglue>
 800506e:	bf00      	nop
 8005070:	2000000c 	.word	0x2000000c
 8005074:	08006c9d 	.word	0x08006c9d
 8005078:	2000001c 	.word	0x2000001c

0800507c <cleanup_stdio>:
 800507c:	6841      	ldr	r1, [r0, #4]
 800507e:	4b0c      	ldr	r3, [pc, #48]	@ (80050b0 <cleanup_stdio+0x34>)
 8005080:	4299      	cmp	r1, r3
 8005082:	b510      	push	{r4, lr}
 8005084:	4604      	mov	r4, r0
 8005086:	d001      	beq.n	800508c <cleanup_stdio+0x10>
 8005088:	f001 fe08 	bl	8006c9c <_fflush_r>
 800508c:	68a1      	ldr	r1, [r4, #8]
 800508e:	4b09      	ldr	r3, [pc, #36]	@ (80050b4 <cleanup_stdio+0x38>)
 8005090:	4299      	cmp	r1, r3
 8005092:	d002      	beq.n	800509a <cleanup_stdio+0x1e>
 8005094:	4620      	mov	r0, r4
 8005096:	f001 fe01 	bl	8006c9c <_fflush_r>
 800509a:	68e1      	ldr	r1, [r4, #12]
 800509c:	4b06      	ldr	r3, [pc, #24]	@ (80050b8 <cleanup_stdio+0x3c>)
 800509e:	4299      	cmp	r1, r3
 80050a0:	d004      	beq.n	80050ac <cleanup_stdio+0x30>
 80050a2:	4620      	mov	r0, r4
 80050a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a8:	f001 bdf8 	b.w	8006c9c <_fflush_r>
 80050ac:	bd10      	pop	{r4, pc}
 80050ae:	bf00      	nop
 80050b0:	2000032c 	.word	0x2000032c
 80050b4:	20000394 	.word	0x20000394
 80050b8:	200003fc 	.word	0x200003fc

080050bc <global_stdio_init.part.0>:
 80050bc:	b510      	push	{r4, lr}
 80050be:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <global_stdio_init.part.0+0x30>)
 80050c0:	4c0b      	ldr	r4, [pc, #44]	@ (80050f0 <global_stdio_init.part.0+0x34>)
 80050c2:	4a0c      	ldr	r2, [pc, #48]	@ (80050f4 <global_stdio_init.part.0+0x38>)
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	4620      	mov	r0, r4
 80050c8:	2200      	movs	r2, #0
 80050ca:	2104      	movs	r1, #4
 80050cc:	f7ff ff94 	bl	8004ff8 <std>
 80050d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050d4:	2201      	movs	r2, #1
 80050d6:	2109      	movs	r1, #9
 80050d8:	f7ff ff8e 	bl	8004ff8 <std>
 80050dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050e0:	2202      	movs	r2, #2
 80050e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e6:	2112      	movs	r1, #18
 80050e8:	f7ff bf86 	b.w	8004ff8 <std>
 80050ec:	20000464 	.word	0x20000464
 80050f0:	2000032c 	.word	0x2000032c
 80050f4:	08005065 	.word	0x08005065

080050f8 <__sfp_lock_acquire>:
 80050f8:	4801      	ldr	r0, [pc, #4]	@ (8005100 <__sfp_lock_acquire+0x8>)
 80050fa:	f000 b91c 	b.w	8005336 <__retarget_lock_acquire_recursive>
 80050fe:	bf00      	nop
 8005100:	2000046d 	.word	0x2000046d

08005104 <__sfp_lock_release>:
 8005104:	4801      	ldr	r0, [pc, #4]	@ (800510c <__sfp_lock_release+0x8>)
 8005106:	f000 b917 	b.w	8005338 <__retarget_lock_release_recursive>
 800510a:	bf00      	nop
 800510c:	2000046d 	.word	0x2000046d

08005110 <__sinit>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4604      	mov	r4, r0
 8005114:	f7ff fff0 	bl	80050f8 <__sfp_lock_acquire>
 8005118:	6a23      	ldr	r3, [r4, #32]
 800511a:	b11b      	cbz	r3, 8005124 <__sinit+0x14>
 800511c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005120:	f7ff bff0 	b.w	8005104 <__sfp_lock_release>
 8005124:	4b04      	ldr	r3, [pc, #16]	@ (8005138 <__sinit+0x28>)
 8005126:	6223      	str	r3, [r4, #32]
 8005128:	4b04      	ldr	r3, [pc, #16]	@ (800513c <__sinit+0x2c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f5      	bne.n	800511c <__sinit+0xc>
 8005130:	f7ff ffc4 	bl	80050bc <global_stdio_init.part.0>
 8005134:	e7f2      	b.n	800511c <__sinit+0xc>
 8005136:	bf00      	nop
 8005138:	0800507d 	.word	0x0800507d
 800513c:	20000464 	.word	0x20000464

08005140 <_fwalk_sglue>:
 8005140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005144:	4607      	mov	r7, r0
 8005146:	4688      	mov	r8, r1
 8005148:	4614      	mov	r4, r2
 800514a:	2600      	movs	r6, #0
 800514c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005150:	f1b9 0901 	subs.w	r9, r9, #1
 8005154:	d505      	bpl.n	8005162 <_fwalk_sglue+0x22>
 8005156:	6824      	ldr	r4, [r4, #0]
 8005158:	2c00      	cmp	r4, #0
 800515a:	d1f7      	bne.n	800514c <_fwalk_sglue+0xc>
 800515c:	4630      	mov	r0, r6
 800515e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005162:	89ab      	ldrh	r3, [r5, #12]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d907      	bls.n	8005178 <_fwalk_sglue+0x38>
 8005168:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800516c:	3301      	adds	r3, #1
 800516e:	d003      	beq.n	8005178 <_fwalk_sglue+0x38>
 8005170:	4629      	mov	r1, r5
 8005172:	4638      	mov	r0, r7
 8005174:	47c0      	blx	r8
 8005176:	4306      	orrs	r6, r0
 8005178:	3568      	adds	r5, #104	@ 0x68
 800517a:	e7e9      	b.n	8005150 <_fwalk_sglue+0x10>

0800517c <siprintf>:
 800517c:	b40e      	push	{r1, r2, r3}
 800517e:	b510      	push	{r4, lr}
 8005180:	b09d      	sub	sp, #116	@ 0x74
 8005182:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005184:	9002      	str	r0, [sp, #8]
 8005186:	9006      	str	r0, [sp, #24]
 8005188:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800518c:	480a      	ldr	r0, [pc, #40]	@ (80051b8 <siprintf+0x3c>)
 800518e:	9107      	str	r1, [sp, #28]
 8005190:	9104      	str	r1, [sp, #16]
 8005192:	490a      	ldr	r1, [pc, #40]	@ (80051bc <siprintf+0x40>)
 8005194:	f853 2b04 	ldr.w	r2, [r3], #4
 8005198:	9105      	str	r1, [sp, #20]
 800519a:	2400      	movs	r4, #0
 800519c:	a902      	add	r1, sp, #8
 800519e:	6800      	ldr	r0, [r0, #0]
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80051a4:	f001 fbfa 	bl	800699c <_svfiprintf_r>
 80051a8:	9b02      	ldr	r3, [sp, #8]
 80051aa:	701c      	strb	r4, [r3, #0]
 80051ac:	b01d      	add	sp, #116	@ 0x74
 80051ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b2:	b003      	add	sp, #12
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000018 	.word	0x20000018
 80051bc:	ffff0208 	.word	0xffff0208

080051c0 <__sread>:
 80051c0:	b510      	push	{r4, lr}
 80051c2:	460c      	mov	r4, r1
 80051c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c8:	f000 f86c 	bl	80052a4 <_read_r>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	bfab      	itete	ge
 80051d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051d2:	89a3      	ldrhlt	r3, [r4, #12]
 80051d4:	181b      	addge	r3, r3, r0
 80051d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051da:	bfac      	ite	ge
 80051dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051de:	81a3      	strhlt	r3, [r4, #12]
 80051e0:	bd10      	pop	{r4, pc}

080051e2 <__swrite>:
 80051e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e6:	461f      	mov	r7, r3
 80051e8:	898b      	ldrh	r3, [r1, #12]
 80051ea:	05db      	lsls	r3, r3, #23
 80051ec:	4605      	mov	r5, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	4616      	mov	r6, r2
 80051f2:	d505      	bpl.n	8005200 <__swrite+0x1e>
 80051f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f8:	2302      	movs	r3, #2
 80051fa:	2200      	movs	r2, #0
 80051fc:	f000 f840 	bl	8005280 <_lseek_r>
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005206:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800520a:	81a3      	strh	r3, [r4, #12]
 800520c:	4632      	mov	r2, r6
 800520e:	463b      	mov	r3, r7
 8005210:	4628      	mov	r0, r5
 8005212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005216:	f000 b857 	b.w	80052c8 <_write_r>

0800521a <__sseek>:
 800521a:	b510      	push	{r4, lr}
 800521c:	460c      	mov	r4, r1
 800521e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005222:	f000 f82d 	bl	8005280 <_lseek_r>
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	bf15      	itete	ne
 800522c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800522e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005232:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005236:	81a3      	strheq	r3, [r4, #12]
 8005238:	bf18      	it	ne
 800523a:	81a3      	strhne	r3, [r4, #12]
 800523c:	bd10      	pop	{r4, pc}

0800523e <__sclose>:
 800523e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005242:	f000 b80d 	b.w	8005260 <_close_r>

08005246 <memset>:
 8005246:	4402      	add	r2, r0
 8005248:	4603      	mov	r3, r0
 800524a:	4293      	cmp	r3, r2
 800524c:	d100      	bne.n	8005250 <memset+0xa>
 800524e:	4770      	bx	lr
 8005250:	f803 1b01 	strb.w	r1, [r3], #1
 8005254:	e7f9      	b.n	800524a <memset+0x4>
	...

08005258 <_localeconv_r>:
 8005258:	4800      	ldr	r0, [pc, #0]	@ (800525c <_localeconv_r+0x4>)
 800525a:	4770      	bx	lr
 800525c:	20000158 	.word	0x20000158

08005260 <_close_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4d06      	ldr	r5, [pc, #24]	@ (800527c <_close_r+0x1c>)
 8005264:	2300      	movs	r3, #0
 8005266:	4604      	mov	r4, r0
 8005268:	4608      	mov	r0, r1
 800526a:	602b      	str	r3, [r5, #0]
 800526c:	f002 f8b4 	bl	80073d8 <_close>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_close_r+0x1a>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_close_r+0x1a>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	20000468 	.word	0x20000468

08005280 <_lseek_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4d07      	ldr	r5, [pc, #28]	@ (80052a0 <_lseek_r+0x20>)
 8005284:	4604      	mov	r4, r0
 8005286:	4608      	mov	r0, r1
 8005288:	4611      	mov	r1, r2
 800528a:	2200      	movs	r2, #0
 800528c:	602a      	str	r2, [r5, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	f002 f8ca 	bl	8007428 <_lseek>
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d102      	bne.n	800529e <_lseek_r+0x1e>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	b103      	cbz	r3, 800529e <_lseek_r+0x1e>
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	20000468 	.word	0x20000468

080052a4 <_read_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	4d07      	ldr	r5, [pc, #28]	@ (80052c4 <_read_r+0x20>)
 80052a8:	4604      	mov	r4, r0
 80052aa:	4608      	mov	r0, r1
 80052ac:	4611      	mov	r1, r2
 80052ae:	2200      	movs	r2, #0
 80052b0:	602a      	str	r2, [r5, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f002 f8c0 	bl	8007438 <_read>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_read_r+0x1e>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_read_r+0x1e>
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	20000468 	.word	0x20000468

080052c8 <_write_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4d07      	ldr	r5, [pc, #28]	@ (80052e8 <_write_r+0x20>)
 80052cc:	4604      	mov	r4, r0
 80052ce:	4608      	mov	r0, r1
 80052d0:	4611      	mov	r1, r2
 80052d2:	2200      	movs	r2, #0
 80052d4:	602a      	str	r2, [r5, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	f002 f8c4 	bl	8007464 <_write>
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d102      	bne.n	80052e6 <_write_r+0x1e>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	b103      	cbz	r3, 80052e6 <_write_r+0x1e>
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	bd38      	pop	{r3, r4, r5, pc}
 80052e8:	20000468 	.word	0x20000468

080052ec <__libc_init_array>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005324 <__libc_init_array+0x38>)
 80052f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005328 <__libc_init_array+0x3c>)
 80052f2:	1b64      	subs	r4, r4, r5
 80052f4:	10a4      	asrs	r4, r4, #2
 80052f6:	2600      	movs	r6, #0
 80052f8:	42a6      	cmp	r6, r4
 80052fa:	d109      	bne.n	8005310 <__libc_init_array+0x24>
 80052fc:	4d0b      	ldr	r5, [pc, #44]	@ (800532c <__libc_init_array+0x40>)
 80052fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005330 <__libc_init_array+0x44>)
 8005300:	f002 f8ba 	bl	8007478 <_init>
 8005304:	1b64      	subs	r4, r4, r5
 8005306:	10a4      	asrs	r4, r4, #2
 8005308:	2600      	movs	r6, #0
 800530a:	42a6      	cmp	r6, r4
 800530c:	d105      	bne.n	800531a <__libc_init_array+0x2e>
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	f855 3b04 	ldr.w	r3, [r5], #4
 8005314:	4798      	blx	r3
 8005316:	3601      	adds	r6, #1
 8005318:	e7ee      	b.n	80052f8 <__libc_init_array+0xc>
 800531a:	f855 3b04 	ldr.w	r3, [r5], #4
 800531e:	4798      	blx	r3
 8005320:	3601      	adds	r6, #1
 8005322:	e7f2      	b.n	800530a <__libc_init_array+0x1e>
 8005324:	0800788c 	.word	0x0800788c
 8005328:	0800788c 	.word	0x0800788c
 800532c:	0800788c 	.word	0x0800788c
 8005330:	08007890 	.word	0x08007890

08005334 <__retarget_lock_init_recursive>:
 8005334:	4770      	bx	lr

08005336 <__retarget_lock_acquire_recursive>:
 8005336:	4770      	bx	lr

08005338 <__retarget_lock_release_recursive>:
 8005338:	4770      	bx	lr

0800533a <quorem>:
 800533a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533e:	6903      	ldr	r3, [r0, #16]
 8005340:	690c      	ldr	r4, [r1, #16]
 8005342:	42a3      	cmp	r3, r4
 8005344:	4607      	mov	r7, r0
 8005346:	db7e      	blt.n	8005446 <quorem+0x10c>
 8005348:	3c01      	subs	r4, #1
 800534a:	f101 0814 	add.w	r8, r1, #20
 800534e:	00a3      	lsls	r3, r4, #2
 8005350:	f100 0514 	add.w	r5, r0, #20
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005360:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005364:	3301      	adds	r3, #1
 8005366:	429a      	cmp	r2, r3
 8005368:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800536c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005370:	d32e      	bcc.n	80053d0 <quorem+0x96>
 8005372:	f04f 0a00 	mov.w	sl, #0
 8005376:	46c4      	mov	ip, r8
 8005378:	46ae      	mov	lr, r5
 800537a:	46d3      	mov	fp, sl
 800537c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005380:	b298      	uxth	r0, r3
 8005382:	fb06 a000 	mla	r0, r6, r0, sl
 8005386:	0c02      	lsrs	r2, r0, #16
 8005388:	0c1b      	lsrs	r3, r3, #16
 800538a:	fb06 2303 	mla	r3, r6, r3, r2
 800538e:	f8de 2000 	ldr.w	r2, [lr]
 8005392:	b280      	uxth	r0, r0
 8005394:	b292      	uxth	r2, r2
 8005396:	1a12      	subs	r2, r2, r0
 8005398:	445a      	add	r2, fp
 800539a:	f8de 0000 	ldr.w	r0, [lr]
 800539e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80053a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80053ac:	b292      	uxth	r2, r2
 80053ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80053b2:	45e1      	cmp	r9, ip
 80053b4:	f84e 2b04 	str.w	r2, [lr], #4
 80053b8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80053bc:	d2de      	bcs.n	800537c <quorem+0x42>
 80053be:	9b00      	ldr	r3, [sp, #0]
 80053c0:	58eb      	ldr	r3, [r5, r3]
 80053c2:	b92b      	cbnz	r3, 80053d0 <quorem+0x96>
 80053c4:	9b01      	ldr	r3, [sp, #4]
 80053c6:	3b04      	subs	r3, #4
 80053c8:	429d      	cmp	r5, r3
 80053ca:	461a      	mov	r2, r3
 80053cc:	d32f      	bcc.n	800542e <quorem+0xf4>
 80053ce:	613c      	str	r4, [r7, #16]
 80053d0:	4638      	mov	r0, r7
 80053d2:	f001 f97f 	bl	80066d4 <__mcmp>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	db25      	blt.n	8005426 <quorem+0xec>
 80053da:	4629      	mov	r1, r5
 80053dc:	2000      	movs	r0, #0
 80053de:	f858 2b04 	ldr.w	r2, [r8], #4
 80053e2:	f8d1 c000 	ldr.w	ip, [r1]
 80053e6:	fa1f fe82 	uxth.w	lr, r2
 80053ea:	fa1f f38c 	uxth.w	r3, ip
 80053ee:	eba3 030e 	sub.w	r3, r3, lr
 80053f2:	4403      	add	r3, r0
 80053f4:	0c12      	lsrs	r2, r2, #16
 80053f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80053fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80053fe:	b29b      	uxth	r3, r3
 8005400:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005404:	45c1      	cmp	r9, r8
 8005406:	f841 3b04 	str.w	r3, [r1], #4
 800540a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800540e:	d2e6      	bcs.n	80053de <quorem+0xa4>
 8005410:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005414:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005418:	b922      	cbnz	r2, 8005424 <quorem+0xea>
 800541a:	3b04      	subs	r3, #4
 800541c:	429d      	cmp	r5, r3
 800541e:	461a      	mov	r2, r3
 8005420:	d30b      	bcc.n	800543a <quorem+0x100>
 8005422:	613c      	str	r4, [r7, #16]
 8005424:	3601      	adds	r6, #1
 8005426:	4630      	mov	r0, r6
 8005428:	b003      	add	sp, #12
 800542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	3b04      	subs	r3, #4
 8005432:	2a00      	cmp	r2, #0
 8005434:	d1cb      	bne.n	80053ce <quorem+0x94>
 8005436:	3c01      	subs	r4, #1
 8005438:	e7c6      	b.n	80053c8 <quorem+0x8e>
 800543a:	6812      	ldr	r2, [r2, #0]
 800543c:	3b04      	subs	r3, #4
 800543e:	2a00      	cmp	r2, #0
 8005440:	d1ef      	bne.n	8005422 <quorem+0xe8>
 8005442:	3c01      	subs	r4, #1
 8005444:	e7ea      	b.n	800541c <quorem+0xe2>
 8005446:	2000      	movs	r0, #0
 8005448:	e7ee      	b.n	8005428 <quorem+0xee>
 800544a:	0000      	movs	r0, r0
 800544c:	0000      	movs	r0, r0
	...

08005450 <_dtoa_r>:
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005454:	69c7      	ldr	r7, [r0, #28]
 8005456:	b097      	sub	sp, #92	@ 0x5c
 8005458:	ed8d 0b04 	vstr	d0, [sp, #16]
 800545c:	ec55 4b10 	vmov	r4, r5, d0
 8005460:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005462:	9107      	str	r1, [sp, #28]
 8005464:	4681      	mov	r9, r0
 8005466:	920c      	str	r2, [sp, #48]	@ 0x30
 8005468:	9311      	str	r3, [sp, #68]	@ 0x44
 800546a:	b97f      	cbnz	r7, 800548c <_dtoa_r+0x3c>
 800546c:	2010      	movs	r0, #16
 800546e:	f000 fe09 	bl	8006084 <malloc>
 8005472:	4602      	mov	r2, r0
 8005474:	f8c9 001c 	str.w	r0, [r9, #28]
 8005478:	b920      	cbnz	r0, 8005484 <_dtoa_r+0x34>
 800547a:	4ba9      	ldr	r3, [pc, #676]	@ (8005720 <_dtoa_r+0x2d0>)
 800547c:	21ef      	movs	r1, #239	@ 0xef
 800547e:	48a9      	ldr	r0, [pc, #676]	@ (8005724 <_dtoa_r+0x2d4>)
 8005480:	f001 fc6c 	bl	8006d5c <__assert_func>
 8005484:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005488:	6007      	str	r7, [r0, #0]
 800548a:	60c7      	str	r7, [r0, #12]
 800548c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005490:	6819      	ldr	r1, [r3, #0]
 8005492:	b159      	cbz	r1, 80054ac <_dtoa_r+0x5c>
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	604a      	str	r2, [r1, #4]
 8005498:	2301      	movs	r3, #1
 800549a:	4093      	lsls	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
 800549e:	4648      	mov	r0, r9
 80054a0:	f000 fee6 	bl	8006270 <_Bfree>
 80054a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	1e2b      	subs	r3, r5, #0
 80054ae:	bfb9      	ittee	lt
 80054b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80054b4:	9305      	strlt	r3, [sp, #20]
 80054b6:	2300      	movge	r3, #0
 80054b8:	6033      	strge	r3, [r6, #0]
 80054ba:	9f05      	ldr	r7, [sp, #20]
 80054bc:	4b9a      	ldr	r3, [pc, #616]	@ (8005728 <_dtoa_r+0x2d8>)
 80054be:	bfbc      	itt	lt
 80054c0:	2201      	movlt	r2, #1
 80054c2:	6032      	strlt	r2, [r6, #0]
 80054c4:	43bb      	bics	r3, r7
 80054c6:	d112      	bne.n	80054ee <_dtoa_r+0x9e>
 80054c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80054ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054d4:	4323      	orrs	r3, r4
 80054d6:	f000 855a 	beq.w	8005f8e <_dtoa_r+0xb3e>
 80054da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054dc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800573c <_dtoa_r+0x2ec>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 855c 	beq.w	8005f9e <_dtoa_r+0xb4e>
 80054e6:	f10a 0303 	add.w	r3, sl, #3
 80054ea:	f000 bd56 	b.w	8005f9a <_dtoa_r+0xb4a>
 80054ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 80054f2:	2200      	movs	r2, #0
 80054f4:	ec51 0b17 	vmov	r0, r1, d7
 80054f8:	2300      	movs	r3, #0
 80054fa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80054fe:	f7fb fae3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005502:	4680      	mov	r8, r0
 8005504:	b158      	cbz	r0, 800551e <_dtoa_r+0xce>
 8005506:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005508:	2301      	movs	r3, #1
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800550e:	b113      	cbz	r3, 8005516 <_dtoa_r+0xc6>
 8005510:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005512:	4b86      	ldr	r3, [pc, #536]	@ (800572c <_dtoa_r+0x2dc>)
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005740 <_dtoa_r+0x2f0>
 800551a:	f000 bd40 	b.w	8005f9e <_dtoa_r+0xb4e>
 800551e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005522:	aa14      	add	r2, sp, #80	@ 0x50
 8005524:	a915      	add	r1, sp, #84	@ 0x54
 8005526:	4648      	mov	r0, r9
 8005528:	f001 f984 	bl	8006834 <__d2b>
 800552c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005530:	9002      	str	r0, [sp, #8]
 8005532:	2e00      	cmp	r6, #0
 8005534:	d078      	beq.n	8005628 <_dtoa_r+0x1d8>
 8005536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005538:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800553c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005540:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005544:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005548:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800554c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005550:	4619      	mov	r1, r3
 8005552:	2200      	movs	r2, #0
 8005554:	4b76      	ldr	r3, [pc, #472]	@ (8005730 <_dtoa_r+0x2e0>)
 8005556:	f7fa fe97 	bl	8000288 <__aeabi_dsub>
 800555a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005708 <_dtoa_r+0x2b8>)
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f7fb f84a 	bl	80005f8 <__aeabi_dmul>
 8005564:	a36a      	add	r3, pc, #424	@ (adr r3, 8005710 <_dtoa_r+0x2c0>)
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	f7fa fe8f 	bl	800028c <__adddf3>
 800556e:	4604      	mov	r4, r0
 8005570:	4630      	mov	r0, r6
 8005572:	460d      	mov	r5, r1
 8005574:	f7fa ffd6 	bl	8000524 <__aeabi_i2d>
 8005578:	a367      	add	r3, pc, #412	@ (adr r3, 8005718 <_dtoa_r+0x2c8>)
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f7fb f83b 	bl	80005f8 <__aeabi_dmul>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4620      	mov	r0, r4
 8005588:	4629      	mov	r1, r5
 800558a:	f7fa fe7f 	bl	800028c <__adddf3>
 800558e:	4604      	mov	r4, r0
 8005590:	460d      	mov	r5, r1
 8005592:	f7fb fae1 	bl	8000b58 <__aeabi_d2iz>
 8005596:	2200      	movs	r2, #0
 8005598:	4607      	mov	r7, r0
 800559a:	2300      	movs	r3, #0
 800559c:	4620      	mov	r0, r4
 800559e:	4629      	mov	r1, r5
 80055a0:	f7fb fa9c 	bl	8000adc <__aeabi_dcmplt>
 80055a4:	b140      	cbz	r0, 80055b8 <_dtoa_r+0x168>
 80055a6:	4638      	mov	r0, r7
 80055a8:	f7fa ffbc 	bl	8000524 <__aeabi_i2d>
 80055ac:	4622      	mov	r2, r4
 80055ae:	462b      	mov	r3, r5
 80055b0:	f7fb fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80055b4:	b900      	cbnz	r0, 80055b8 <_dtoa_r+0x168>
 80055b6:	3f01      	subs	r7, #1
 80055b8:	2f16      	cmp	r7, #22
 80055ba:	d852      	bhi.n	8005662 <_dtoa_r+0x212>
 80055bc:	4b5d      	ldr	r3, [pc, #372]	@ (8005734 <_dtoa_r+0x2e4>)
 80055be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055ca:	f7fb fa87 	bl	8000adc <__aeabi_dcmplt>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d049      	beq.n	8005666 <_dtoa_r+0x216>
 80055d2:	3f01      	subs	r7, #1
 80055d4:	2300      	movs	r3, #0
 80055d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80055d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80055da:	1b9b      	subs	r3, r3, r6
 80055dc:	1e5a      	subs	r2, r3, #1
 80055de:	bf45      	ittet	mi
 80055e0:	f1c3 0301 	rsbmi	r3, r3, #1
 80055e4:	9300      	strmi	r3, [sp, #0]
 80055e6:	2300      	movpl	r3, #0
 80055e8:	2300      	movmi	r3, #0
 80055ea:	9206      	str	r2, [sp, #24]
 80055ec:	bf54      	ite	pl
 80055ee:	9300      	strpl	r3, [sp, #0]
 80055f0:	9306      	strmi	r3, [sp, #24]
 80055f2:	2f00      	cmp	r7, #0
 80055f4:	db39      	blt.n	800566a <_dtoa_r+0x21a>
 80055f6:	9b06      	ldr	r3, [sp, #24]
 80055f8:	970d      	str	r7, [sp, #52]	@ 0x34
 80055fa:	443b      	add	r3, r7
 80055fc:	9306      	str	r3, [sp, #24]
 80055fe:	2300      	movs	r3, #0
 8005600:	9308      	str	r3, [sp, #32]
 8005602:	9b07      	ldr	r3, [sp, #28]
 8005604:	2b09      	cmp	r3, #9
 8005606:	d863      	bhi.n	80056d0 <_dtoa_r+0x280>
 8005608:	2b05      	cmp	r3, #5
 800560a:	bfc4      	itt	gt
 800560c:	3b04      	subgt	r3, #4
 800560e:	9307      	strgt	r3, [sp, #28]
 8005610:	9b07      	ldr	r3, [sp, #28]
 8005612:	f1a3 0302 	sub.w	r3, r3, #2
 8005616:	bfcc      	ite	gt
 8005618:	2400      	movgt	r4, #0
 800561a:	2401      	movle	r4, #1
 800561c:	2b03      	cmp	r3, #3
 800561e:	d863      	bhi.n	80056e8 <_dtoa_r+0x298>
 8005620:	e8df f003 	tbb	[pc, r3]
 8005624:	2b375452 	.word	0x2b375452
 8005628:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800562c:	441e      	add	r6, r3
 800562e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005632:	2b20      	cmp	r3, #32
 8005634:	bfc1      	itttt	gt
 8005636:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800563a:	409f      	lslgt	r7, r3
 800563c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005640:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005644:	bfd6      	itet	le
 8005646:	f1c3 0320 	rsble	r3, r3, #32
 800564a:	ea47 0003 	orrgt.w	r0, r7, r3
 800564e:	fa04 f003 	lslle.w	r0, r4, r3
 8005652:	f7fa ff57 	bl	8000504 <__aeabi_ui2d>
 8005656:	2201      	movs	r2, #1
 8005658:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800565c:	3e01      	subs	r6, #1
 800565e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005660:	e776      	b.n	8005550 <_dtoa_r+0x100>
 8005662:	2301      	movs	r3, #1
 8005664:	e7b7      	b.n	80055d6 <_dtoa_r+0x186>
 8005666:	9010      	str	r0, [sp, #64]	@ 0x40
 8005668:	e7b6      	b.n	80055d8 <_dtoa_r+0x188>
 800566a:	9b00      	ldr	r3, [sp, #0]
 800566c:	1bdb      	subs	r3, r3, r7
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	427b      	negs	r3, r7
 8005672:	9308      	str	r3, [sp, #32]
 8005674:	2300      	movs	r3, #0
 8005676:	930d      	str	r3, [sp, #52]	@ 0x34
 8005678:	e7c3      	b.n	8005602 <_dtoa_r+0x1b2>
 800567a:	2301      	movs	r3, #1
 800567c:	9309      	str	r3, [sp, #36]	@ 0x24
 800567e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005680:	eb07 0b03 	add.w	fp, r7, r3
 8005684:	f10b 0301 	add.w	r3, fp, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	9303      	str	r3, [sp, #12]
 800568c:	bfb8      	it	lt
 800568e:	2301      	movlt	r3, #1
 8005690:	e006      	b.n	80056a0 <_dtoa_r+0x250>
 8005692:	2301      	movs	r3, #1
 8005694:	9309      	str	r3, [sp, #36]	@ 0x24
 8005696:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005698:	2b00      	cmp	r3, #0
 800569a:	dd28      	ble.n	80056ee <_dtoa_r+0x29e>
 800569c:	469b      	mov	fp, r3
 800569e:	9303      	str	r3, [sp, #12]
 80056a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80056a4:	2100      	movs	r1, #0
 80056a6:	2204      	movs	r2, #4
 80056a8:	f102 0514 	add.w	r5, r2, #20
 80056ac:	429d      	cmp	r5, r3
 80056ae:	d926      	bls.n	80056fe <_dtoa_r+0x2ae>
 80056b0:	6041      	str	r1, [r0, #4]
 80056b2:	4648      	mov	r0, r9
 80056b4:	f000 fd9c 	bl	80061f0 <_Balloc>
 80056b8:	4682      	mov	sl, r0
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d142      	bne.n	8005744 <_dtoa_r+0x2f4>
 80056be:	4b1e      	ldr	r3, [pc, #120]	@ (8005738 <_dtoa_r+0x2e8>)
 80056c0:	4602      	mov	r2, r0
 80056c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80056c6:	e6da      	b.n	800547e <_dtoa_r+0x2e>
 80056c8:	2300      	movs	r3, #0
 80056ca:	e7e3      	b.n	8005694 <_dtoa_r+0x244>
 80056cc:	2300      	movs	r3, #0
 80056ce:	e7d5      	b.n	800567c <_dtoa_r+0x22c>
 80056d0:	2401      	movs	r4, #1
 80056d2:	2300      	movs	r3, #0
 80056d4:	9307      	str	r3, [sp, #28]
 80056d6:	9409      	str	r4, [sp, #36]	@ 0x24
 80056d8:	f04f 3bff 	mov.w	fp, #4294967295
 80056dc:	2200      	movs	r2, #0
 80056de:	f8cd b00c 	str.w	fp, [sp, #12]
 80056e2:	2312      	movs	r3, #18
 80056e4:	920c      	str	r2, [sp, #48]	@ 0x30
 80056e6:	e7db      	b.n	80056a0 <_dtoa_r+0x250>
 80056e8:	2301      	movs	r3, #1
 80056ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ec:	e7f4      	b.n	80056d8 <_dtoa_r+0x288>
 80056ee:	f04f 0b01 	mov.w	fp, #1
 80056f2:	f8cd b00c 	str.w	fp, [sp, #12]
 80056f6:	465b      	mov	r3, fp
 80056f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80056fc:	e7d0      	b.n	80056a0 <_dtoa_r+0x250>
 80056fe:	3101      	adds	r1, #1
 8005700:	0052      	lsls	r2, r2, #1
 8005702:	e7d1      	b.n	80056a8 <_dtoa_r+0x258>
 8005704:	f3af 8000 	nop.w
 8005708:	636f4361 	.word	0x636f4361
 800570c:	3fd287a7 	.word	0x3fd287a7
 8005710:	8b60c8b3 	.word	0x8b60c8b3
 8005714:	3fc68a28 	.word	0x3fc68a28
 8005718:	509f79fb 	.word	0x509f79fb
 800571c:	3fd34413 	.word	0x3fd34413
 8005720:	0800754d 	.word	0x0800754d
 8005724:	08007564 	.word	0x08007564
 8005728:	7ff00000 	.word	0x7ff00000
 800572c:	0800751d 	.word	0x0800751d
 8005730:	3ff80000 	.word	0x3ff80000
 8005734:	080076b8 	.word	0x080076b8
 8005738:	080075bc 	.word	0x080075bc
 800573c:	08007549 	.word	0x08007549
 8005740:	0800751c 	.word	0x0800751c
 8005744:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005748:	6018      	str	r0, [r3, #0]
 800574a:	9b03      	ldr	r3, [sp, #12]
 800574c:	2b0e      	cmp	r3, #14
 800574e:	f200 80a1 	bhi.w	8005894 <_dtoa_r+0x444>
 8005752:	2c00      	cmp	r4, #0
 8005754:	f000 809e 	beq.w	8005894 <_dtoa_r+0x444>
 8005758:	2f00      	cmp	r7, #0
 800575a:	dd33      	ble.n	80057c4 <_dtoa_r+0x374>
 800575c:	4b9c      	ldr	r3, [pc, #624]	@ (80059d0 <_dtoa_r+0x580>)
 800575e:	f007 020f 	and.w	r2, r7, #15
 8005762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005766:	ed93 7b00 	vldr	d7, [r3]
 800576a:	05f8      	lsls	r0, r7, #23
 800576c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005770:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005774:	d516      	bpl.n	80057a4 <_dtoa_r+0x354>
 8005776:	4b97      	ldr	r3, [pc, #604]	@ (80059d4 <_dtoa_r+0x584>)
 8005778:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800577c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005780:	f7fb f864 	bl	800084c <__aeabi_ddiv>
 8005784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005788:	f004 040f 	and.w	r4, r4, #15
 800578c:	2603      	movs	r6, #3
 800578e:	4d91      	ldr	r5, [pc, #580]	@ (80059d4 <_dtoa_r+0x584>)
 8005790:	b954      	cbnz	r4, 80057a8 <_dtoa_r+0x358>
 8005792:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800579a:	f7fb f857 	bl	800084c <__aeabi_ddiv>
 800579e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057a2:	e028      	b.n	80057f6 <_dtoa_r+0x3a6>
 80057a4:	2602      	movs	r6, #2
 80057a6:	e7f2      	b.n	800578e <_dtoa_r+0x33e>
 80057a8:	07e1      	lsls	r1, r4, #31
 80057aa:	d508      	bpl.n	80057be <_dtoa_r+0x36e>
 80057ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80057b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057b4:	f7fa ff20 	bl	80005f8 <__aeabi_dmul>
 80057b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80057bc:	3601      	adds	r6, #1
 80057be:	1064      	asrs	r4, r4, #1
 80057c0:	3508      	adds	r5, #8
 80057c2:	e7e5      	b.n	8005790 <_dtoa_r+0x340>
 80057c4:	f000 80af 	beq.w	8005926 <_dtoa_r+0x4d6>
 80057c8:	427c      	negs	r4, r7
 80057ca:	4b81      	ldr	r3, [pc, #516]	@ (80059d0 <_dtoa_r+0x580>)
 80057cc:	4d81      	ldr	r5, [pc, #516]	@ (80059d4 <_dtoa_r+0x584>)
 80057ce:	f004 020f 	and.w	r2, r4, #15
 80057d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80057de:	f7fa ff0b 	bl	80005f8 <__aeabi_dmul>
 80057e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057e6:	1124      	asrs	r4, r4, #4
 80057e8:	2300      	movs	r3, #0
 80057ea:	2602      	movs	r6, #2
 80057ec:	2c00      	cmp	r4, #0
 80057ee:	f040 808f 	bne.w	8005910 <_dtoa_r+0x4c0>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1d3      	bne.n	800579e <_dtoa_r+0x34e>
 80057f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80057f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 8094 	beq.w	800592a <_dtoa_r+0x4da>
 8005802:	4b75      	ldr	r3, [pc, #468]	@ (80059d8 <_dtoa_r+0x588>)
 8005804:	2200      	movs	r2, #0
 8005806:	4620      	mov	r0, r4
 8005808:	4629      	mov	r1, r5
 800580a:	f7fb f967 	bl	8000adc <__aeabi_dcmplt>
 800580e:	2800      	cmp	r0, #0
 8005810:	f000 808b 	beq.w	800592a <_dtoa_r+0x4da>
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 8087 	beq.w	800592a <_dtoa_r+0x4da>
 800581c:	f1bb 0f00 	cmp.w	fp, #0
 8005820:	dd34      	ble.n	800588c <_dtoa_r+0x43c>
 8005822:	4620      	mov	r0, r4
 8005824:	4b6d      	ldr	r3, [pc, #436]	@ (80059dc <_dtoa_r+0x58c>)
 8005826:	2200      	movs	r2, #0
 8005828:	4629      	mov	r1, r5
 800582a:	f7fa fee5 	bl	80005f8 <__aeabi_dmul>
 800582e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005832:	f107 38ff 	add.w	r8, r7, #4294967295
 8005836:	3601      	adds	r6, #1
 8005838:	465c      	mov	r4, fp
 800583a:	4630      	mov	r0, r6
 800583c:	f7fa fe72 	bl	8000524 <__aeabi_i2d>
 8005840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005844:	f7fa fed8 	bl	80005f8 <__aeabi_dmul>
 8005848:	4b65      	ldr	r3, [pc, #404]	@ (80059e0 <_dtoa_r+0x590>)
 800584a:	2200      	movs	r2, #0
 800584c:	f7fa fd1e 	bl	800028c <__adddf3>
 8005850:	4605      	mov	r5, r0
 8005852:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005856:	2c00      	cmp	r4, #0
 8005858:	d16a      	bne.n	8005930 <_dtoa_r+0x4e0>
 800585a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800585e:	4b61      	ldr	r3, [pc, #388]	@ (80059e4 <_dtoa_r+0x594>)
 8005860:	2200      	movs	r2, #0
 8005862:	f7fa fd11 	bl	8000288 <__aeabi_dsub>
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800586e:	462a      	mov	r2, r5
 8005870:	4633      	mov	r3, r6
 8005872:	f7fb f951 	bl	8000b18 <__aeabi_dcmpgt>
 8005876:	2800      	cmp	r0, #0
 8005878:	f040 8298 	bne.w	8005dac <_dtoa_r+0x95c>
 800587c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005880:	462a      	mov	r2, r5
 8005882:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005886:	f7fb f929 	bl	8000adc <__aeabi_dcmplt>
 800588a:	bb38      	cbnz	r0, 80058dc <_dtoa_r+0x48c>
 800588c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005890:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005894:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005896:	2b00      	cmp	r3, #0
 8005898:	f2c0 8157 	blt.w	8005b4a <_dtoa_r+0x6fa>
 800589c:	2f0e      	cmp	r7, #14
 800589e:	f300 8154 	bgt.w	8005b4a <_dtoa_r+0x6fa>
 80058a2:	4b4b      	ldr	r3, [pc, #300]	@ (80059d0 <_dtoa_r+0x580>)
 80058a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058a8:	ed93 7b00 	vldr	d7, [r3]
 80058ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	ed8d 7b00 	vstr	d7, [sp]
 80058b4:	f280 80e5 	bge.w	8005a82 <_dtoa_r+0x632>
 80058b8:	9b03      	ldr	r3, [sp, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f300 80e1 	bgt.w	8005a82 <_dtoa_r+0x632>
 80058c0:	d10c      	bne.n	80058dc <_dtoa_r+0x48c>
 80058c2:	4b48      	ldr	r3, [pc, #288]	@ (80059e4 <_dtoa_r+0x594>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	ec51 0b17 	vmov	r0, r1, d7
 80058ca:	f7fa fe95 	bl	80005f8 <__aeabi_dmul>
 80058ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058d2:	f7fb f917 	bl	8000b04 <__aeabi_dcmpge>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	f000 8266 	beq.w	8005da8 <_dtoa_r+0x958>
 80058dc:	2400      	movs	r4, #0
 80058de:	4625      	mov	r5, r4
 80058e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058e2:	4656      	mov	r6, sl
 80058e4:	ea6f 0803 	mvn.w	r8, r3
 80058e8:	2700      	movs	r7, #0
 80058ea:	4621      	mov	r1, r4
 80058ec:	4648      	mov	r0, r9
 80058ee:	f000 fcbf 	bl	8006270 <_Bfree>
 80058f2:	2d00      	cmp	r5, #0
 80058f4:	f000 80bd 	beq.w	8005a72 <_dtoa_r+0x622>
 80058f8:	b12f      	cbz	r7, 8005906 <_dtoa_r+0x4b6>
 80058fa:	42af      	cmp	r7, r5
 80058fc:	d003      	beq.n	8005906 <_dtoa_r+0x4b6>
 80058fe:	4639      	mov	r1, r7
 8005900:	4648      	mov	r0, r9
 8005902:	f000 fcb5 	bl	8006270 <_Bfree>
 8005906:	4629      	mov	r1, r5
 8005908:	4648      	mov	r0, r9
 800590a:	f000 fcb1 	bl	8006270 <_Bfree>
 800590e:	e0b0      	b.n	8005a72 <_dtoa_r+0x622>
 8005910:	07e2      	lsls	r2, r4, #31
 8005912:	d505      	bpl.n	8005920 <_dtoa_r+0x4d0>
 8005914:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005918:	f7fa fe6e 	bl	80005f8 <__aeabi_dmul>
 800591c:	3601      	adds	r6, #1
 800591e:	2301      	movs	r3, #1
 8005920:	1064      	asrs	r4, r4, #1
 8005922:	3508      	adds	r5, #8
 8005924:	e762      	b.n	80057ec <_dtoa_r+0x39c>
 8005926:	2602      	movs	r6, #2
 8005928:	e765      	b.n	80057f6 <_dtoa_r+0x3a6>
 800592a:	9c03      	ldr	r4, [sp, #12]
 800592c:	46b8      	mov	r8, r7
 800592e:	e784      	b.n	800583a <_dtoa_r+0x3ea>
 8005930:	4b27      	ldr	r3, [pc, #156]	@ (80059d0 <_dtoa_r+0x580>)
 8005932:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005934:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005938:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800593c:	4454      	add	r4, sl
 800593e:	2900      	cmp	r1, #0
 8005940:	d054      	beq.n	80059ec <_dtoa_r+0x59c>
 8005942:	4929      	ldr	r1, [pc, #164]	@ (80059e8 <_dtoa_r+0x598>)
 8005944:	2000      	movs	r0, #0
 8005946:	f7fa ff81 	bl	800084c <__aeabi_ddiv>
 800594a:	4633      	mov	r3, r6
 800594c:	462a      	mov	r2, r5
 800594e:	f7fa fc9b 	bl	8000288 <__aeabi_dsub>
 8005952:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005956:	4656      	mov	r6, sl
 8005958:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800595c:	f7fb f8fc 	bl	8000b58 <__aeabi_d2iz>
 8005960:	4605      	mov	r5, r0
 8005962:	f7fa fddf 	bl	8000524 <__aeabi_i2d>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800596e:	f7fa fc8b 	bl	8000288 <__aeabi_dsub>
 8005972:	3530      	adds	r5, #48	@ 0x30
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800597c:	f806 5b01 	strb.w	r5, [r6], #1
 8005980:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005984:	f7fb f8aa 	bl	8000adc <__aeabi_dcmplt>
 8005988:	2800      	cmp	r0, #0
 800598a:	d172      	bne.n	8005a72 <_dtoa_r+0x622>
 800598c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005990:	4911      	ldr	r1, [pc, #68]	@ (80059d8 <_dtoa_r+0x588>)
 8005992:	2000      	movs	r0, #0
 8005994:	f7fa fc78 	bl	8000288 <__aeabi_dsub>
 8005998:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800599c:	f7fb f89e 	bl	8000adc <__aeabi_dcmplt>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f040 80b4 	bne.w	8005b0e <_dtoa_r+0x6be>
 80059a6:	42a6      	cmp	r6, r4
 80059a8:	f43f af70 	beq.w	800588c <_dtoa_r+0x43c>
 80059ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80059b0:	4b0a      	ldr	r3, [pc, #40]	@ (80059dc <_dtoa_r+0x58c>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	f7fa fe20 	bl	80005f8 <__aeabi_dmul>
 80059b8:	4b08      	ldr	r3, [pc, #32]	@ (80059dc <_dtoa_r+0x58c>)
 80059ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80059be:	2200      	movs	r2, #0
 80059c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059c4:	f7fa fe18 	bl	80005f8 <__aeabi_dmul>
 80059c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059cc:	e7c4      	b.n	8005958 <_dtoa_r+0x508>
 80059ce:	bf00      	nop
 80059d0:	080076b8 	.word	0x080076b8
 80059d4:	08007690 	.word	0x08007690
 80059d8:	3ff00000 	.word	0x3ff00000
 80059dc:	40240000 	.word	0x40240000
 80059e0:	401c0000 	.word	0x401c0000
 80059e4:	40140000 	.word	0x40140000
 80059e8:	3fe00000 	.word	0x3fe00000
 80059ec:	4631      	mov	r1, r6
 80059ee:	4628      	mov	r0, r5
 80059f0:	f7fa fe02 	bl	80005f8 <__aeabi_dmul>
 80059f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80059f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80059fa:	4656      	mov	r6, sl
 80059fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a00:	f7fb f8aa 	bl	8000b58 <__aeabi_d2iz>
 8005a04:	4605      	mov	r5, r0
 8005a06:	f7fa fd8d 	bl	8000524 <__aeabi_i2d>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a12:	f7fa fc39 	bl	8000288 <__aeabi_dsub>
 8005a16:	3530      	adds	r5, #48	@ 0x30
 8005a18:	f806 5b01 	strb.w	r5, [r6], #1
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	42a6      	cmp	r6, r4
 8005a22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	d124      	bne.n	8005a76 <_dtoa_r+0x626>
 8005a2c:	4baf      	ldr	r3, [pc, #700]	@ (8005cec <_dtoa_r+0x89c>)
 8005a2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005a32:	f7fa fc2b 	bl	800028c <__adddf3>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a3e:	f7fb f86b 	bl	8000b18 <__aeabi_dcmpgt>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d163      	bne.n	8005b0e <_dtoa_r+0x6be>
 8005a46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005a4a:	49a8      	ldr	r1, [pc, #672]	@ (8005cec <_dtoa_r+0x89c>)
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	f7fa fc1b 	bl	8000288 <__aeabi_dsub>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a5a:	f7fb f83f 	bl	8000adc <__aeabi_dcmplt>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	f43f af14 	beq.w	800588c <_dtoa_r+0x43c>
 8005a64:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005a66:	1e73      	subs	r3, r6, #1
 8005a68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a6e:	2b30      	cmp	r3, #48	@ 0x30
 8005a70:	d0f8      	beq.n	8005a64 <_dtoa_r+0x614>
 8005a72:	4647      	mov	r7, r8
 8005a74:	e03b      	b.n	8005aee <_dtoa_r+0x69e>
 8005a76:	4b9e      	ldr	r3, [pc, #632]	@ (8005cf0 <_dtoa_r+0x8a0>)
 8005a78:	f7fa fdbe 	bl	80005f8 <__aeabi_dmul>
 8005a7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a80:	e7bc      	b.n	80059fc <_dtoa_r+0x5ac>
 8005a82:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005a86:	4656      	mov	r6, sl
 8005a88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	4629      	mov	r1, r5
 8005a90:	f7fa fedc 	bl	800084c <__aeabi_ddiv>
 8005a94:	f7fb f860 	bl	8000b58 <__aeabi_d2iz>
 8005a98:	4680      	mov	r8, r0
 8005a9a:	f7fa fd43 	bl	8000524 <__aeabi_i2d>
 8005a9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aa2:	f7fa fda9 	bl	80005f8 <__aeabi_dmul>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4620      	mov	r0, r4
 8005aac:	4629      	mov	r1, r5
 8005aae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005ab2:	f7fa fbe9 	bl	8000288 <__aeabi_dsub>
 8005ab6:	f806 4b01 	strb.w	r4, [r6], #1
 8005aba:	9d03      	ldr	r5, [sp, #12]
 8005abc:	eba6 040a 	sub.w	r4, r6, sl
 8005ac0:	42a5      	cmp	r5, r4
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	d133      	bne.n	8005b30 <_dtoa_r+0x6e0>
 8005ac8:	f7fa fbe0 	bl	800028c <__adddf3>
 8005acc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	460d      	mov	r5, r1
 8005ad4:	f7fb f820 	bl	8000b18 <__aeabi_dcmpgt>
 8005ad8:	b9c0      	cbnz	r0, 8005b0c <_dtoa_r+0x6bc>
 8005ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ade:	4620      	mov	r0, r4
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	f7fa fff1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ae6:	b110      	cbz	r0, 8005aee <_dtoa_r+0x69e>
 8005ae8:	f018 0f01 	tst.w	r8, #1
 8005aec:	d10e      	bne.n	8005b0c <_dtoa_r+0x6bc>
 8005aee:	9902      	ldr	r1, [sp, #8]
 8005af0:	4648      	mov	r0, r9
 8005af2:	f000 fbbd 	bl	8006270 <_Bfree>
 8005af6:	2300      	movs	r3, #0
 8005af8:	7033      	strb	r3, [r6, #0]
 8005afa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005afc:	3701      	adds	r7, #1
 8005afe:	601f      	str	r7, [r3, #0]
 8005b00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 824b 	beq.w	8005f9e <_dtoa_r+0xb4e>
 8005b08:	601e      	str	r6, [r3, #0]
 8005b0a:	e248      	b.n	8005f9e <_dtoa_r+0xb4e>
 8005b0c:	46b8      	mov	r8, r7
 8005b0e:	4633      	mov	r3, r6
 8005b10:	461e      	mov	r6, r3
 8005b12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b16:	2a39      	cmp	r2, #57	@ 0x39
 8005b18:	d106      	bne.n	8005b28 <_dtoa_r+0x6d8>
 8005b1a:	459a      	cmp	sl, r3
 8005b1c:	d1f8      	bne.n	8005b10 <_dtoa_r+0x6c0>
 8005b1e:	2230      	movs	r2, #48	@ 0x30
 8005b20:	f108 0801 	add.w	r8, r8, #1
 8005b24:	f88a 2000 	strb.w	r2, [sl]
 8005b28:	781a      	ldrb	r2, [r3, #0]
 8005b2a:	3201      	adds	r2, #1
 8005b2c:	701a      	strb	r2, [r3, #0]
 8005b2e:	e7a0      	b.n	8005a72 <_dtoa_r+0x622>
 8005b30:	4b6f      	ldr	r3, [pc, #444]	@ (8005cf0 <_dtoa_r+0x8a0>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	f7fa fd60 	bl	80005f8 <__aeabi_dmul>
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	460d      	mov	r5, r1
 8005b40:	f7fa ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d09f      	beq.n	8005a88 <_dtoa_r+0x638>
 8005b48:	e7d1      	b.n	8005aee <_dtoa_r+0x69e>
 8005b4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b4c:	2a00      	cmp	r2, #0
 8005b4e:	f000 80ea 	beq.w	8005d26 <_dtoa_r+0x8d6>
 8005b52:	9a07      	ldr	r2, [sp, #28]
 8005b54:	2a01      	cmp	r2, #1
 8005b56:	f300 80cd 	bgt.w	8005cf4 <_dtoa_r+0x8a4>
 8005b5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b5c:	2a00      	cmp	r2, #0
 8005b5e:	f000 80c1 	beq.w	8005ce4 <_dtoa_r+0x894>
 8005b62:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005b66:	9c08      	ldr	r4, [sp, #32]
 8005b68:	9e00      	ldr	r6, [sp, #0]
 8005b6a:	9a00      	ldr	r2, [sp, #0]
 8005b6c:	441a      	add	r2, r3
 8005b6e:	9200      	str	r2, [sp, #0]
 8005b70:	9a06      	ldr	r2, [sp, #24]
 8005b72:	2101      	movs	r1, #1
 8005b74:	441a      	add	r2, r3
 8005b76:	4648      	mov	r0, r9
 8005b78:	9206      	str	r2, [sp, #24]
 8005b7a:	f000 fc2d 	bl	80063d8 <__i2b>
 8005b7e:	4605      	mov	r5, r0
 8005b80:	b166      	cbz	r6, 8005b9c <_dtoa_r+0x74c>
 8005b82:	9b06      	ldr	r3, [sp, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	dd09      	ble.n	8005b9c <_dtoa_r+0x74c>
 8005b88:	42b3      	cmp	r3, r6
 8005b8a:	9a00      	ldr	r2, [sp, #0]
 8005b8c:	bfa8      	it	ge
 8005b8e:	4633      	movge	r3, r6
 8005b90:	1ad2      	subs	r2, r2, r3
 8005b92:	9200      	str	r2, [sp, #0]
 8005b94:	9a06      	ldr	r2, [sp, #24]
 8005b96:	1af6      	subs	r6, r6, r3
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	9306      	str	r3, [sp, #24]
 8005b9c:	9b08      	ldr	r3, [sp, #32]
 8005b9e:	b30b      	cbz	r3, 8005be4 <_dtoa_r+0x794>
 8005ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 80c6 	beq.w	8005d34 <_dtoa_r+0x8e4>
 8005ba8:	2c00      	cmp	r4, #0
 8005baa:	f000 80c0 	beq.w	8005d2e <_dtoa_r+0x8de>
 8005bae:	4629      	mov	r1, r5
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	4648      	mov	r0, r9
 8005bb4:	f000 fcc8 	bl	8006548 <__pow5mult>
 8005bb8:	9a02      	ldr	r2, [sp, #8]
 8005bba:	4601      	mov	r1, r0
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	4648      	mov	r0, r9
 8005bc0:	f000 fc20 	bl	8006404 <__multiply>
 8005bc4:	9902      	ldr	r1, [sp, #8]
 8005bc6:	4680      	mov	r8, r0
 8005bc8:	4648      	mov	r0, r9
 8005bca:	f000 fb51 	bl	8006270 <_Bfree>
 8005bce:	9b08      	ldr	r3, [sp, #32]
 8005bd0:	1b1b      	subs	r3, r3, r4
 8005bd2:	9308      	str	r3, [sp, #32]
 8005bd4:	f000 80b1 	beq.w	8005d3a <_dtoa_r+0x8ea>
 8005bd8:	9a08      	ldr	r2, [sp, #32]
 8005bda:	4641      	mov	r1, r8
 8005bdc:	4648      	mov	r0, r9
 8005bde:	f000 fcb3 	bl	8006548 <__pow5mult>
 8005be2:	9002      	str	r0, [sp, #8]
 8005be4:	2101      	movs	r1, #1
 8005be6:	4648      	mov	r0, r9
 8005be8:	f000 fbf6 	bl	80063d8 <__i2b>
 8005bec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bee:	4604      	mov	r4, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 81d8 	beq.w	8005fa6 <_dtoa_r+0xb56>
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	4601      	mov	r1, r0
 8005bfa:	4648      	mov	r0, r9
 8005bfc:	f000 fca4 	bl	8006548 <__pow5mult>
 8005c00:	9b07      	ldr	r3, [sp, #28]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	4604      	mov	r4, r0
 8005c06:	f300 809f 	bgt.w	8005d48 <_dtoa_r+0x8f8>
 8005c0a:	9b04      	ldr	r3, [sp, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f040 8097 	bne.w	8005d40 <_dtoa_r+0x8f0>
 8005c12:	9b05      	ldr	r3, [sp, #20]
 8005c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f040 8093 	bne.w	8005d44 <_dtoa_r+0x8f4>
 8005c1e:	9b05      	ldr	r3, [sp, #20]
 8005c20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c24:	0d1b      	lsrs	r3, r3, #20
 8005c26:	051b      	lsls	r3, r3, #20
 8005c28:	b133      	cbz	r3, 8005c38 <_dtoa_r+0x7e8>
 8005c2a:	9b00      	ldr	r3, [sp, #0]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	9b06      	ldr	r3, [sp, #24]
 8005c32:	3301      	adds	r3, #1
 8005c34:	9306      	str	r3, [sp, #24]
 8005c36:	2301      	movs	r3, #1
 8005c38:	9308      	str	r3, [sp, #32]
 8005c3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 81b8 	beq.w	8005fb2 <_dtoa_r+0xb62>
 8005c42:	6923      	ldr	r3, [r4, #16]
 8005c44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c48:	6918      	ldr	r0, [r3, #16]
 8005c4a:	f000 fb79 	bl	8006340 <__hi0bits>
 8005c4e:	f1c0 0020 	rsb	r0, r0, #32
 8005c52:	9b06      	ldr	r3, [sp, #24]
 8005c54:	4418      	add	r0, r3
 8005c56:	f010 001f 	ands.w	r0, r0, #31
 8005c5a:	f000 8082 	beq.w	8005d62 <_dtoa_r+0x912>
 8005c5e:	f1c0 0320 	rsb	r3, r0, #32
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	dd73      	ble.n	8005d4e <_dtoa_r+0x8fe>
 8005c66:	9b00      	ldr	r3, [sp, #0]
 8005c68:	f1c0 001c 	rsb	r0, r0, #28
 8005c6c:	4403      	add	r3, r0
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	9b06      	ldr	r3, [sp, #24]
 8005c72:	4403      	add	r3, r0
 8005c74:	4406      	add	r6, r0
 8005c76:	9306      	str	r3, [sp, #24]
 8005c78:	9b00      	ldr	r3, [sp, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	dd05      	ble.n	8005c8a <_dtoa_r+0x83a>
 8005c7e:	9902      	ldr	r1, [sp, #8]
 8005c80:	461a      	mov	r2, r3
 8005c82:	4648      	mov	r0, r9
 8005c84:	f000 fcba 	bl	80065fc <__lshift>
 8005c88:	9002      	str	r0, [sp, #8]
 8005c8a:	9b06      	ldr	r3, [sp, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	dd05      	ble.n	8005c9c <_dtoa_r+0x84c>
 8005c90:	4621      	mov	r1, r4
 8005c92:	461a      	mov	r2, r3
 8005c94:	4648      	mov	r0, r9
 8005c96:	f000 fcb1 	bl	80065fc <__lshift>
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d061      	beq.n	8005d66 <_dtoa_r+0x916>
 8005ca2:	9802      	ldr	r0, [sp, #8]
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	f000 fd15 	bl	80066d4 <__mcmp>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	da5b      	bge.n	8005d66 <_dtoa_r+0x916>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	9902      	ldr	r1, [sp, #8]
 8005cb2:	220a      	movs	r2, #10
 8005cb4:	4648      	mov	r0, r9
 8005cb6:	f000 fafd 	bl	80062b4 <__multadd>
 8005cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cbc:	9002      	str	r0, [sp, #8]
 8005cbe:	f107 38ff 	add.w	r8, r7, #4294967295
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 8177 	beq.w	8005fb6 <_dtoa_r+0xb66>
 8005cc8:	4629      	mov	r1, r5
 8005cca:	2300      	movs	r3, #0
 8005ccc:	220a      	movs	r2, #10
 8005cce:	4648      	mov	r0, r9
 8005cd0:	f000 faf0 	bl	80062b4 <__multadd>
 8005cd4:	f1bb 0f00 	cmp.w	fp, #0
 8005cd8:	4605      	mov	r5, r0
 8005cda:	dc6f      	bgt.n	8005dbc <_dtoa_r+0x96c>
 8005cdc:	9b07      	ldr	r3, [sp, #28]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	dc49      	bgt.n	8005d76 <_dtoa_r+0x926>
 8005ce2:	e06b      	b.n	8005dbc <_dtoa_r+0x96c>
 8005ce4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ce6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005cea:	e73c      	b.n	8005b66 <_dtoa_r+0x716>
 8005cec:	3fe00000 	.word	0x3fe00000
 8005cf0:	40240000 	.word	0x40240000
 8005cf4:	9b03      	ldr	r3, [sp, #12]
 8005cf6:	1e5c      	subs	r4, r3, #1
 8005cf8:	9b08      	ldr	r3, [sp, #32]
 8005cfa:	42a3      	cmp	r3, r4
 8005cfc:	db09      	blt.n	8005d12 <_dtoa_r+0x8c2>
 8005cfe:	1b1c      	subs	r4, r3, r4
 8005d00:	9b03      	ldr	r3, [sp, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f6bf af30 	bge.w	8005b68 <_dtoa_r+0x718>
 8005d08:	9b00      	ldr	r3, [sp, #0]
 8005d0a:	9a03      	ldr	r2, [sp, #12]
 8005d0c:	1a9e      	subs	r6, r3, r2
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e72b      	b.n	8005b6a <_dtoa_r+0x71a>
 8005d12:	9b08      	ldr	r3, [sp, #32]
 8005d14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005d16:	9408      	str	r4, [sp, #32]
 8005d18:	1ae3      	subs	r3, r4, r3
 8005d1a:	441a      	add	r2, r3
 8005d1c:	9e00      	ldr	r6, [sp, #0]
 8005d1e:	9b03      	ldr	r3, [sp, #12]
 8005d20:	920d      	str	r2, [sp, #52]	@ 0x34
 8005d22:	2400      	movs	r4, #0
 8005d24:	e721      	b.n	8005b6a <_dtoa_r+0x71a>
 8005d26:	9c08      	ldr	r4, [sp, #32]
 8005d28:	9e00      	ldr	r6, [sp, #0]
 8005d2a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005d2c:	e728      	b.n	8005b80 <_dtoa_r+0x730>
 8005d2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005d32:	e751      	b.n	8005bd8 <_dtoa_r+0x788>
 8005d34:	9a08      	ldr	r2, [sp, #32]
 8005d36:	9902      	ldr	r1, [sp, #8]
 8005d38:	e750      	b.n	8005bdc <_dtoa_r+0x78c>
 8005d3a:	f8cd 8008 	str.w	r8, [sp, #8]
 8005d3e:	e751      	b.n	8005be4 <_dtoa_r+0x794>
 8005d40:	2300      	movs	r3, #0
 8005d42:	e779      	b.n	8005c38 <_dtoa_r+0x7e8>
 8005d44:	9b04      	ldr	r3, [sp, #16]
 8005d46:	e777      	b.n	8005c38 <_dtoa_r+0x7e8>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9308      	str	r3, [sp, #32]
 8005d4c:	e779      	b.n	8005c42 <_dtoa_r+0x7f2>
 8005d4e:	d093      	beq.n	8005c78 <_dtoa_r+0x828>
 8005d50:	9a00      	ldr	r2, [sp, #0]
 8005d52:	331c      	adds	r3, #28
 8005d54:	441a      	add	r2, r3
 8005d56:	9200      	str	r2, [sp, #0]
 8005d58:	9a06      	ldr	r2, [sp, #24]
 8005d5a:	441a      	add	r2, r3
 8005d5c:	441e      	add	r6, r3
 8005d5e:	9206      	str	r2, [sp, #24]
 8005d60:	e78a      	b.n	8005c78 <_dtoa_r+0x828>
 8005d62:	4603      	mov	r3, r0
 8005d64:	e7f4      	b.n	8005d50 <_dtoa_r+0x900>
 8005d66:	9b03      	ldr	r3, [sp, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	46b8      	mov	r8, r7
 8005d6c:	dc20      	bgt.n	8005db0 <_dtoa_r+0x960>
 8005d6e:	469b      	mov	fp, r3
 8005d70:	9b07      	ldr	r3, [sp, #28]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	dd1e      	ble.n	8005db4 <_dtoa_r+0x964>
 8005d76:	f1bb 0f00 	cmp.w	fp, #0
 8005d7a:	f47f adb1 	bne.w	80058e0 <_dtoa_r+0x490>
 8005d7e:	4621      	mov	r1, r4
 8005d80:	465b      	mov	r3, fp
 8005d82:	2205      	movs	r2, #5
 8005d84:	4648      	mov	r0, r9
 8005d86:	f000 fa95 	bl	80062b4 <__multadd>
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	9802      	ldr	r0, [sp, #8]
 8005d90:	f000 fca0 	bl	80066d4 <__mcmp>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	f77f ada3 	ble.w	80058e0 <_dtoa_r+0x490>
 8005d9a:	4656      	mov	r6, sl
 8005d9c:	2331      	movs	r3, #49	@ 0x31
 8005d9e:	f806 3b01 	strb.w	r3, [r6], #1
 8005da2:	f108 0801 	add.w	r8, r8, #1
 8005da6:	e59f      	b.n	80058e8 <_dtoa_r+0x498>
 8005da8:	9c03      	ldr	r4, [sp, #12]
 8005daa:	46b8      	mov	r8, r7
 8005dac:	4625      	mov	r5, r4
 8005dae:	e7f4      	b.n	8005d9a <_dtoa_r+0x94a>
 8005db0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 8101 	beq.w	8005fbe <_dtoa_r+0xb6e>
 8005dbc:	2e00      	cmp	r6, #0
 8005dbe:	dd05      	ble.n	8005dcc <_dtoa_r+0x97c>
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4632      	mov	r2, r6
 8005dc4:	4648      	mov	r0, r9
 8005dc6:	f000 fc19 	bl	80065fc <__lshift>
 8005dca:	4605      	mov	r5, r0
 8005dcc:	9b08      	ldr	r3, [sp, #32]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d05c      	beq.n	8005e8c <_dtoa_r+0xa3c>
 8005dd2:	6869      	ldr	r1, [r5, #4]
 8005dd4:	4648      	mov	r0, r9
 8005dd6:	f000 fa0b 	bl	80061f0 <_Balloc>
 8005dda:	4606      	mov	r6, r0
 8005ddc:	b928      	cbnz	r0, 8005dea <_dtoa_r+0x99a>
 8005dde:	4b82      	ldr	r3, [pc, #520]	@ (8005fe8 <_dtoa_r+0xb98>)
 8005de0:	4602      	mov	r2, r0
 8005de2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005de6:	f7ff bb4a 	b.w	800547e <_dtoa_r+0x2e>
 8005dea:	692a      	ldr	r2, [r5, #16]
 8005dec:	3202      	adds	r2, #2
 8005dee:	0092      	lsls	r2, r2, #2
 8005df0:	f105 010c 	add.w	r1, r5, #12
 8005df4:	300c      	adds	r0, #12
 8005df6:	f000 ffa3 	bl	8006d40 <memcpy>
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	4648      	mov	r0, r9
 8005e00:	f000 fbfc 	bl	80065fc <__lshift>
 8005e04:	f10a 0301 	add.w	r3, sl, #1
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	eb0a 030b 	add.w	r3, sl, fp
 8005e0e:	9308      	str	r3, [sp, #32]
 8005e10:	9b04      	ldr	r3, [sp, #16]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	462f      	mov	r7, r5
 8005e18:	9306      	str	r3, [sp, #24]
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	9b00      	ldr	r3, [sp, #0]
 8005e1e:	9802      	ldr	r0, [sp, #8]
 8005e20:	4621      	mov	r1, r4
 8005e22:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e26:	f7ff fa88 	bl	800533a <quorem>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	3330      	adds	r3, #48	@ 0x30
 8005e2e:	9003      	str	r0, [sp, #12]
 8005e30:	4639      	mov	r1, r7
 8005e32:	9802      	ldr	r0, [sp, #8]
 8005e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e36:	f000 fc4d 	bl	80066d4 <__mcmp>
 8005e3a:	462a      	mov	r2, r5
 8005e3c:	9004      	str	r0, [sp, #16]
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4648      	mov	r0, r9
 8005e42:	f000 fc63 	bl	800670c <__mdiff>
 8005e46:	68c2      	ldr	r2, [r0, #12]
 8005e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e4a:	4606      	mov	r6, r0
 8005e4c:	bb02      	cbnz	r2, 8005e90 <_dtoa_r+0xa40>
 8005e4e:	4601      	mov	r1, r0
 8005e50:	9802      	ldr	r0, [sp, #8]
 8005e52:	f000 fc3f 	bl	80066d4 <__mcmp>
 8005e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e58:	4602      	mov	r2, r0
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4648      	mov	r0, r9
 8005e5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e62:	f000 fa05 	bl	8006270 <_Bfree>
 8005e66:	9b07      	ldr	r3, [sp, #28]
 8005e68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e6a:	9e00      	ldr	r6, [sp, #0]
 8005e6c:	ea42 0103 	orr.w	r1, r2, r3
 8005e70:	9b06      	ldr	r3, [sp, #24]
 8005e72:	4319      	orrs	r1, r3
 8005e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e76:	d10d      	bne.n	8005e94 <_dtoa_r+0xa44>
 8005e78:	2b39      	cmp	r3, #57	@ 0x39
 8005e7a:	d027      	beq.n	8005ecc <_dtoa_r+0xa7c>
 8005e7c:	9a04      	ldr	r2, [sp, #16]
 8005e7e:	2a00      	cmp	r2, #0
 8005e80:	dd01      	ble.n	8005e86 <_dtoa_r+0xa36>
 8005e82:	9b03      	ldr	r3, [sp, #12]
 8005e84:	3331      	adds	r3, #49	@ 0x31
 8005e86:	f88b 3000 	strb.w	r3, [fp]
 8005e8a:	e52e      	b.n	80058ea <_dtoa_r+0x49a>
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	e7b9      	b.n	8005e04 <_dtoa_r+0x9b4>
 8005e90:	2201      	movs	r2, #1
 8005e92:	e7e2      	b.n	8005e5a <_dtoa_r+0xa0a>
 8005e94:	9904      	ldr	r1, [sp, #16]
 8005e96:	2900      	cmp	r1, #0
 8005e98:	db04      	blt.n	8005ea4 <_dtoa_r+0xa54>
 8005e9a:	9807      	ldr	r0, [sp, #28]
 8005e9c:	4301      	orrs	r1, r0
 8005e9e:	9806      	ldr	r0, [sp, #24]
 8005ea0:	4301      	orrs	r1, r0
 8005ea2:	d120      	bne.n	8005ee6 <_dtoa_r+0xa96>
 8005ea4:	2a00      	cmp	r2, #0
 8005ea6:	ddee      	ble.n	8005e86 <_dtoa_r+0xa36>
 8005ea8:	9902      	ldr	r1, [sp, #8]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	2201      	movs	r2, #1
 8005eae:	4648      	mov	r0, r9
 8005eb0:	f000 fba4 	bl	80065fc <__lshift>
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	9002      	str	r0, [sp, #8]
 8005eb8:	f000 fc0c 	bl	80066d4 <__mcmp>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	9b00      	ldr	r3, [sp, #0]
 8005ec0:	dc02      	bgt.n	8005ec8 <_dtoa_r+0xa78>
 8005ec2:	d1e0      	bne.n	8005e86 <_dtoa_r+0xa36>
 8005ec4:	07da      	lsls	r2, r3, #31
 8005ec6:	d5de      	bpl.n	8005e86 <_dtoa_r+0xa36>
 8005ec8:	2b39      	cmp	r3, #57	@ 0x39
 8005eca:	d1da      	bne.n	8005e82 <_dtoa_r+0xa32>
 8005ecc:	2339      	movs	r3, #57	@ 0x39
 8005ece:	f88b 3000 	strb.w	r3, [fp]
 8005ed2:	4633      	mov	r3, r6
 8005ed4:	461e      	mov	r6, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005edc:	2a39      	cmp	r2, #57	@ 0x39
 8005ede:	d04e      	beq.n	8005f7e <_dtoa_r+0xb2e>
 8005ee0:	3201      	adds	r2, #1
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	e501      	b.n	80058ea <_dtoa_r+0x49a>
 8005ee6:	2a00      	cmp	r2, #0
 8005ee8:	dd03      	ble.n	8005ef2 <_dtoa_r+0xaa2>
 8005eea:	2b39      	cmp	r3, #57	@ 0x39
 8005eec:	d0ee      	beq.n	8005ecc <_dtoa_r+0xa7c>
 8005eee:	3301      	adds	r3, #1
 8005ef0:	e7c9      	b.n	8005e86 <_dtoa_r+0xa36>
 8005ef2:	9a00      	ldr	r2, [sp, #0]
 8005ef4:	9908      	ldr	r1, [sp, #32]
 8005ef6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005efa:	428a      	cmp	r2, r1
 8005efc:	d028      	beq.n	8005f50 <_dtoa_r+0xb00>
 8005efe:	9902      	ldr	r1, [sp, #8]
 8005f00:	2300      	movs	r3, #0
 8005f02:	220a      	movs	r2, #10
 8005f04:	4648      	mov	r0, r9
 8005f06:	f000 f9d5 	bl	80062b4 <__multadd>
 8005f0a:	42af      	cmp	r7, r5
 8005f0c:	9002      	str	r0, [sp, #8]
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	f04f 020a 	mov.w	r2, #10
 8005f16:	4639      	mov	r1, r7
 8005f18:	4648      	mov	r0, r9
 8005f1a:	d107      	bne.n	8005f2c <_dtoa_r+0xadc>
 8005f1c:	f000 f9ca 	bl	80062b4 <__multadd>
 8005f20:	4607      	mov	r7, r0
 8005f22:	4605      	mov	r5, r0
 8005f24:	9b00      	ldr	r3, [sp, #0]
 8005f26:	3301      	adds	r3, #1
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	e777      	b.n	8005e1c <_dtoa_r+0x9cc>
 8005f2c:	f000 f9c2 	bl	80062b4 <__multadd>
 8005f30:	4629      	mov	r1, r5
 8005f32:	4607      	mov	r7, r0
 8005f34:	2300      	movs	r3, #0
 8005f36:	220a      	movs	r2, #10
 8005f38:	4648      	mov	r0, r9
 8005f3a:	f000 f9bb 	bl	80062b4 <__multadd>
 8005f3e:	4605      	mov	r5, r0
 8005f40:	e7f0      	b.n	8005f24 <_dtoa_r+0xad4>
 8005f42:	f1bb 0f00 	cmp.w	fp, #0
 8005f46:	bfcc      	ite	gt
 8005f48:	465e      	movgt	r6, fp
 8005f4a:	2601      	movle	r6, #1
 8005f4c:	4456      	add	r6, sl
 8005f4e:	2700      	movs	r7, #0
 8005f50:	9902      	ldr	r1, [sp, #8]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	2201      	movs	r2, #1
 8005f56:	4648      	mov	r0, r9
 8005f58:	f000 fb50 	bl	80065fc <__lshift>
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	9002      	str	r0, [sp, #8]
 8005f60:	f000 fbb8 	bl	80066d4 <__mcmp>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	dcb4      	bgt.n	8005ed2 <_dtoa_r+0xa82>
 8005f68:	d102      	bne.n	8005f70 <_dtoa_r+0xb20>
 8005f6a:	9b00      	ldr	r3, [sp, #0]
 8005f6c:	07db      	lsls	r3, r3, #31
 8005f6e:	d4b0      	bmi.n	8005ed2 <_dtoa_r+0xa82>
 8005f70:	4633      	mov	r3, r6
 8005f72:	461e      	mov	r6, r3
 8005f74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f78:	2a30      	cmp	r2, #48	@ 0x30
 8005f7a:	d0fa      	beq.n	8005f72 <_dtoa_r+0xb22>
 8005f7c:	e4b5      	b.n	80058ea <_dtoa_r+0x49a>
 8005f7e:	459a      	cmp	sl, r3
 8005f80:	d1a8      	bne.n	8005ed4 <_dtoa_r+0xa84>
 8005f82:	2331      	movs	r3, #49	@ 0x31
 8005f84:	f108 0801 	add.w	r8, r8, #1
 8005f88:	f88a 3000 	strb.w	r3, [sl]
 8005f8c:	e4ad      	b.n	80058ea <_dtoa_r+0x49a>
 8005f8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f90:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005fec <_dtoa_r+0xb9c>
 8005f94:	b11b      	cbz	r3, 8005f9e <_dtoa_r+0xb4e>
 8005f96:	f10a 0308 	add.w	r3, sl, #8
 8005f9a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	4650      	mov	r0, sl
 8005fa0:	b017      	add	sp, #92	@ 0x5c
 8005fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa6:	9b07      	ldr	r3, [sp, #28]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	f77f ae2e 	ble.w	8005c0a <_dtoa_r+0x7ba>
 8005fae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fb0:	9308      	str	r3, [sp, #32]
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	e64d      	b.n	8005c52 <_dtoa_r+0x802>
 8005fb6:	f1bb 0f00 	cmp.w	fp, #0
 8005fba:	f77f aed9 	ble.w	8005d70 <_dtoa_r+0x920>
 8005fbe:	4656      	mov	r6, sl
 8005fc0:	9802      	ldr	r0, [sp, #8]
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	f7ff f9b9 	bl	800533a <quorem>
 8005fc8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005fcc:	f806 3b01 	strb.w	r3, [r6], #1
 8005fd0:	eba6 020a 	sub.w	r2, r6, sl
 8005fd4:	4593      	cmp	fp, r2
 8005fd6:	ddb4      	ble.n	8005f42 <_dtoa_r+0xaf2>
 8005fd8:	9902      	ldr	r1, [sp, #8]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	220a      	movs	r2, #10
 8005fde:	4648      	mov	r0, r9
 8005fe0:	f000 f968 	bl	80062b4 <__multadd>
 8005fe4:	9002      	str	r0, [sp, #8]
 8005fe6:	e7eb      	b.n	8005fc0 <_dtoa_r+0xb70>
 8005fe8:	080075bc 	.word	0x080075bc
 8005fec:	08007540 	.word	0x08007540

08005ff0 <_free_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	2900      	cmp	r1, #0
 8005ff6:	d041      	beq.n	800607c <_free_r+0x8c>
 8005ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ffc:	1f0c      	subs	r4, r1, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	bfb8      	it	lt
 8006002:	18e4      	addlt	r4, r4, r3
 8006004:	f000 f8e8 	bl	80061d8 <__malloc_lock>
 8006008:	4a1d      	ldr	r2, [pc, #116]	@ (8006080 <_free_r+0x90>)
 800600a:	6813      	ldr	r3, [r2, #0]
 800600c:	b933      	cbnz	r3, 800601c <_free_r+0x2c>
 800600e:	6063      	str	r3, [r4, #4]
 8006010:	6014      	str	r4, [r2, #0]
 8006012:	4628      	mov	r0, r5
 8006014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006018:	f000 b8e4 	b.w	80061e4 <__malloc_unlock>
 800601c:	42a3      	cmp	r3, r4
 800601e:	d908      	bls.n	8006032 <_free_r+0x42>
 8006020:	6820      	ldr	r0, [r4, #0]
 8006022:	1821      	adds	r1, r4, r0
 8006024:	428b      	cmp	r3, r1
 8006026:	bf01      	itttt	eq
 8006028:	6819      	ldreq	r1, [r3, #0]
 800602a:	685b      	ldreq	r3, [r3, #4]
 800602c:	1809      	addeq	r1, r1, r0
 800602e:	6021      	streq	r1, [r4, #0]
 8006030:	e7ed      	b.n	800600e <_free_r+0x1e>
 8006032:	461a      	mov	r2, r3
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	b10b      	cbz	r3, 800603c <_free_r+0x4c>
 8006038:	42a3      	cmp	r3, r4
 800603a:	d9fa      	bls.n	8006032 <_free_r+0x42>
 800603c:	6811      	ldr	r1, [r2, #0]
 800603e:	1850      	adds	r0, r2, r1
 8006040:	42a0      	cmp	r0, r4
 8006042:	d10b      	bne.n	800605c <_free_r+0x6c>
 8006044:	6820      	ldr	r0, [r4, #0]
 8006046:	4401      	add	r1, r0
 8006048:	1850      	adds	r0, r2, r1
 800604a:	4283      	cmp	r3, r0
 800604c:	6011      	str	r1, [r2, #0]
 800604e:	d1e0      	bne.n	8006012 <_free_r+0x22>
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	6053      	str	r3, [r2, #4]
 8006056:	4408      	add	r0, r1
 8006058:	6010      	str	r0, [r2, #0]
 800605a:	e7da      	b.n	8006012 <_free_r+0x22>
 800605c:	d902      	bls.n	8006064 <_free_r+0x74>
 800605e:	230c      	movs	r3, #12
 8006060:	602b      	str	r3, [r5, #0]
 8006062:	e7d6      	b.n	8006012 <_free_r+0x22>
 8006064:	6820      	ldr	r0, [r4, #0]
 8006066:	1821      	adds	r1, r4, r0
 8006068:	428b      	cmp	r3, r1
 800606a:	bf04      	itt	eq
 800606c:	6819      	ldreq	r1, [r3, #0]
 800606e:	685b      	ldreq	r3, [r3, #4]
 8006070:	6063      	str	r3, [r4, #4]
 8006072:	bf04      	itt	eq
 8006074:	1809      	addeq	r1, r1, r0
 8006076:	6021      	streq	r1, [r4, #0]
 8006078:	6054      	str	r4, [r2, #4]
 800607a:	e7ca      	b.n	8006012 <_free_r+0x22>
 800607c:	bd38      	pop	{r3, r4, r5, pc}
 800607e:	bf00      	nop
 8006080:	20000474 	.word	0x20000474

08006084 <malloc>:
 8006084:	4b02      	ldr	r3, [pc, #8]	@ (8006090 <malloc+0xc>)
 8006086:	4601      	mov	r1, r0
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	f000 b825 	b.w	80060d8 <_malloc_r>
 800608e:	bf00      	nop
 8006090:	20000018 	.word	0x20000018

08006094 <sbrk_aligned>:
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	4e0f      	ldr	r6, [pc, #60]	@ (80060d4 <sbrk_aligned+0x40>)
 8006098:	460c      	mov	r4, r1
 800609a:	6831      	ldr	r1, [r6, #0]
 800609c:	4605      	mov	r5, r0
 800609e:	b911      	cbnz	r1, 80060a6 <sbrk_aligned+0x12>
 80060a0:	f000 fe3e 	bl	8006d20 <_sbrk_r>
 80060a4:	6030      	str	r0, [r6, #0]
 80060a6:	4621      	mov	r1, r4
 80060a8:	4628      	mov	r0, r5
 80060aa:	f000 fe39 	bl	8006d20 <_sbrk_r>
 80060ae:	1c43      	adds	r3, r0, #1
 80060b0:	d103      	bne.n	80060ba <sbrk_aligned+0x26>
 80060b2:	f04f 34ff 	mov.w	r4, #4294967295
 80060b6:	4620      	mov	r0, r4
 80060b8:	bd70      	pop	{r4, r5, r6, pc}
 80060ba:	1cc4      	adds	r4, r0, #3
 80060bc:	f024 0403 	bic.w	r4, r4, #3
 80060c0:	42a0      	cmp	r0, r4
 80060c2:	d0f8      	beq.n	80060b6 <sbrk_aligned+0x22>
 80060c4:	1a21      	subs	r1, r4, r0
 80060c6:	4628      	mov	r0, r5
 80060c8:	f000 fe2a 	bl	8006d20 <_sbrk_r>
 80060cc:	3001      	adds	r0, #1
 80060ce:	d1f2      	bne.n	80060b6 <sbrk_aligned+0x22>
 80060d0:	e7ef      	b.n	80060b2 <sbrk_aligned+0x1e>
 80060d2:	bf00      	nop
 80060d4:	20000470 	.word	0x20000470

080060d8 <_malloc_r>:
 80060d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060dc:	1ccd      	adds	r5, r1, #3
 80060de:	f025 0503 	bic.w	r5, r5, #3
 80060e2:	3508      	adds	r5, #8
 80060e4:	2d0c      	cmp	r5, #12
 80060e6:	bf38      	it	cc
 80060e8:	250c      	movcc	r5, #12
 80060ea:	2d00      	cmp	r5, #0
 80060ec:	4606      	mov	r6, r0
 80060ee:	db01      	blt.n	80060f4 <_malloc_r+0x1c>
 80060f0:	42a9      	cmp	r1, r5
 80060f2:	d904      	bls.n	80060fe <_malloc_r+0x26>
 80060f4:	230c      	movs	r3, #12
 80060f6:	6033      	str	r3, [r6, #0]
 80060f8:	2000      	movs	r0, #0
 80060fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061d4 <_malloc_r+0xfc>
 8006102:	f000 f869 	bl	80061d8 <__malloc_lock>
 8006106:	f8d8 3000 	ldr.w	r3, [r8]
 800610a:	461c      	mov	r4, r3
 800610c:	bb44      	cbnz	r4, 8006160 <_malloc_r+0x88>
 800610e:	4629      	mov	r1, r5
 8006110:	4630      	mov	r0, r6
 8006112:	f7ff ffbf 	bl	8006094 <sbrk_aligned>
 8006116:	1c43      	adds	r3, r0, #1
 8006118:	4604      	mov	r4, r0
 800611a:	d158      	bne.n	80061ce <_malloc_r+0xf6>
 800611c:	f8d8 4000 	ldr.w	r4, [r8]
 8006120:	4627      	mov	r7, r4
 8006122:	2f00      	cmp	r7, #0
 8006124:	d143      	bne.n	80061ae <_malloc_r+0xd6>
 8006126:	2c00      	cmp	r4, #0
 8006128:	d04b      	beq.n	80061c2 <_malloc_r+0xea>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	4639      	mov	r1, r7
 800612e:	4630      	mov	r0, r6
 8006130:	eb04 0903 	add.w	r9, r4, r3
 8006134:	f000 fdf4 	bl	8006d20 <_sbrk_r>
 8006138:	4581      	cmp	r9, r0
 800613a:	d142      	bne.n	80061c2 <_malloc_r+0xea>
 800613c:	6821      	ldr	r1, [r4, #0]
 800613e:	1a6d      	subs	r5, r5, r1
 8006140:	4629      	mov	r1, r5
 8006142:	4630      	mov	r0, r6
 8006144:	f7ff ffa6 	bl	8006094 <sbrk_aligned>
 8006148:	3001      	adds	r0, #1
 800614a:	d03a      	beq.n	80061c2 <_malloc_r+0xea>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	442b      	add	r3, r5
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	f8d8 3000 	ldr.w	r3, [r8]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	bb62      	cbnz	r2, 80061b4 <_malloc_r+0xdc>
 800615a:	f8c8 7000 	str.w	r7, [r8]
 800615e:	e00f      	b.n	8006180 <_malloc_r+0xa8>
 8006160:	6822      	ldr	r2, [r4, #0]
 8006162:	1b52      	subs	r2, r2, r5
 8006164:	d420      	bmi.n	80061a8 <_malloc_r+0xd0>
 8006166:	2a0b      	cmp	r2, #11
 8006168:	d917      	bls.n	800619a <_malloc_r+0xc2>
 800616a:	1961      	adds	r1, r4, r5
 800616c:	42a3      	cmp	r3, r4
 800616e:	6025      	str	r5, [r4, #0]
 8006170:	bf18      	it	ne
 8006172:	6059      	strne	r1, [r3, #4]
 8006174:	6863      	ldr	r3, [r4, #4]
 8006176:	bf08      	it	eq
 8006178:	f8c8 1000 	streq.w	r1, [r8]
 800617c:	5162      	str	r2, [r4, r5]
 800617e:	604b      	str	r3, [r1, #4]
 8006180:	4630      	mov	r0, r6
 8006182:	f000 f82f 	bl	80061e4 <__malloc_unlock>
 8006186:	f104 000b 	add.w	r0, r4, #11
 800618a:	1d23      	adds	r3, r4, #4
 800618c:	f020 0007 	bic.w	r0, r0, #7
 8006190:	1ac2      	subs	r2, r0, r3
 8006192:	bf1c      	itt	ne
 8006194:	1a1b      	subne	r3, r3, r0
 8006196:	50a3      	strne	r3, [r4, r2]
 8006198:	e7af      	b.n	80060fa <_malloc_r+0x22>
 800619a:	6862      	ldr	r2, [r4, #4]
 800619c:	42a3      	cmp	r3, r4
 800619e:	bf0c      	ite	eq
 80061a0:	f8c8 2000 	streq.w	r2, [r8]
 80061a4:	605a      	strne	r2, [r3, #4]
 80061a6:	e7eb      	b.n	8006180 <_malloc_r+0xa8>
 80061a8:	4623      	mov	r3, r4
 80061aa:	6864      	ldr	r4, [r4, #4]
 80061ac:	e7ae      	b.n	800610c <_malloc_r+0x34>
 80061ae:	463c      	mov	r4, r7
 80061b0:	687f      	ldr	r7, [r7, #4]
 80061b2:	e7b6      	b.n	8006122 <_malloc_r+0x4a>
 80061b4:	461a      	mov	r2, r3
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	d1fb      	bne.n	80061b4 <_malloc_r+0xdc>
 80061bc:	2300      	movs	r3, #0
 80061be:	6053      	str	r3, [r2, #4]
 80061c0:	e7de      	b.n	8006180 <_malloc_r+0xa8>
 80061c2:	230c      	movs	r3, #12
 80061c4:	6033      	str	r3, [r6, #0]
 80061c6:	4630      	mov	r0, r6
 80061c8:	f000 f80c 	bl	80061e4 <__malloc_unlock>
 80061cc:	e794      	b.n	80060f8 <_malloc_r+0x20>
 80061ce:	6005      	str	r5, [r0, #0]
 80061d0:	e7d6      	b.n	8006180 <_malloc_r+0xa8>
 80061d2:	bf00      	nop
 80061d4:	20000474 	.word	0x20000474

080061d8 <__malloc_lock>:
 80061d8:	4801      	ldr	r0, [pc, #4]	@ (80061e0 <__malloc_lock+0x8>)
 80061da:	f7ff b8ac 	b.w	8005336 <__retarget_lock_acquire_recursive>
 80061de:	bf00      	nop
 80061e0:	2000046c 	.word	0x2000046c

080061e4 <__malloc_unlock>:
 80061e4:	4801      	ldr	r0, [pc, #4]	@ (80061ec <__malloc_unlock+0x8>)
 80061e6:	f7ff b8a7 	b.w	8005338 <__retarget_lock_release_recursive>
 80061ea:	bf00      	nop
 80061ec:	2000046c 	.word	0x2000046c

080061f0 <_Balloc>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	69c6      	ldr	r6, [r0, #28]
 80061f4:	4604      	mov	r4, r0
 80061f6:	460d      	mov	r5, r1
 80061f8:	b976      	cbnz	r6, 8006218 <_Balloc+0x28>
 80061fa:	2010      	movs	r0, #16
 80061fc:	f7ff ff42 	bl	8006084 <malloc>
 8006200:	4602      	mov	r2, r0
 8006202:	61e0      	str	r0, [r4, #28]
 8006204:	b920      	cbnz	r0, 8006210 <_Balloc+0x20>
 8006206:	4b18      	ldr	r3, [pc, #96]	@ (8006268 <_Balloc+0x78>)
 8006208:	4818      	ldr	r0, [pc, #96]	@ (800626c <_Balloc+0x7c>)
 800620a:	216b      	movs	r1, #107	@ 0x6b
 800620c:	f000 fda6 	bl	8006d5c <__assert_func>
 8006210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006214:	6006      	str	r6, [r0, #0]
 8006216:	60c6      	str	r6, [r0, #12]
 8006218:	69e6      	ldr	r6, [r4, #28]
 800621a:	68f3      	ldr	r3, [r6, #12]
 800621c:	b183      	cbz	r3, 8006240 <_Balloc+0x50>
 800621e:	69e3      	ldr	r3, [r4, #28]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006226:	b9b8      	cbnz	r0, 8006258 <_Balloc+0x68>
 8006228:	2101      	movs	r1, #1
 800622a:	fa01 f605 	lsl.w	r6, r1, r5
 800622e:	1d72      	adds	r2, r6, #5
 8006230:	0092      	lsls	r2, r2, #2
 8006232:	4620      	mov	r0, r4
 8006234:	f000 fdb0 	bl	8006d98 <_calloc_r>
 8006238:	b160      	cbz	r0, 8006254 <_Balloc+0x64>
 800623a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800623e:	e00e      	b.n	800625e <_Balloc+0x6e>
 8006240:	2221      	movs	r2, #33	@ 0x21
 8006242:	2104      	movs	r1, #4
 8006244:	4620      	mov	r0, r4
 8006246:	f000 fda7 	bl	8006d98 <_calloc_r>
 800624a:	69e3      	ldr	r3, [r4, #28]
 800624c:	60f0      	str	r0, [r6, #12]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e4      	bne.n	800621e <_Balloc+0x2e>
 8006254:	2000      	movs	r0, #0
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	6802      	ldr	r2, [r0, #0]
 800625a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800625e:	2300      	movs	r3, #0
 8006260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006264:	e7f7      	b.n	8006256 <_Balloc+0x66>
 8006266:	bf00      	nop
 8006268:	0800754d 	.word	0x0800754d
 800626c:	080075cd 	.word	0x080075cd

08006270 <_Bfree>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	69c6      	ldr	r6, [r0, #28]
 8006274:	4605      	mov	r5, r0
 8006276:	460c      	mov	r4, r1
 8006278:	b976      	cbnz	r6, 8006298 <_Bfree+0x28>
 800627a:	2010      	movs	r0, #16
 800627c:	f7ff ff02 	bl	8006084 <malloc>
 8006280:	4602      	mov	r2, r0
 8006282:	61e8      	str	r0, [r5, #28]
 8006284:	b920      	cbnz	r0, 8006290 <_Bfree+0x20>
 8006286:	4b09      	ldr	r3, [pc, #36]	@ (80062ac <_Bfree+0x3c>)
 8006288:	4809      	ldr	r0, [pc, #36]	@ (80062b0 <_Bfree+0x40>)
 800628a:	218f      	movs	r1, #143	@ 0x8f
 800628c:	f000 fd66 	bl	8006d5c <__assert_func>
 8006290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006294:	6006      	str	r6, [r0, #0]
 8006296:	60c6      	str	r6, [r0, #12]
 8006298:	b13c      	cbz	r4, 80062aa <_Bfree+0x3a>
 800629a:	69eb      	ldr	r3, [r5, #28]
 800629c:	6862      	ldr	r2, [r4, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062a4:	6021      	str	r1, [r4, #0]
 80062a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
 80062ac:	0800754d 	.word	0x0800754d
 80062b0:	080075cd 	.word	0x080075cd

080062b4 <__multadd>:
 80062b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b8:	690d      	ldr	r5, [r1, #16]
 80062ba:	4607      	mov	r7, r0
 80062bc:	460c      	mov	r4, r1
 80062be:	461e      	mov	r6, r3
 80062c0:	f101 0c14 	add.w	ip, r1, #20
 80062c4:	2000      	movs	r0, #0
 80062c6:	f8dc 3000 	ldr.w	r3, [ip]
 80062ca:	b299      	uxth	r1, r3
 80062cc:	fb02 6101 	mla	r1, r2, r1, r6
 80062d0:	0c1e      	lsrs	r6, r3, #16
 80062d2:	0c0b      	lsrs	r3, r1, #16
 80062d4:	fb02 3306 	mla	r3, r2, r6, r3
 80062d8:	b289      	uxth	r1, r1
 80062da:	3001      	adds	r0, #1
 80062dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062e0:	4285      	cmp	r5, r0
 80062e2:	f84c 1b04 	str.w	r1, [ip], #4
 80062e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80062ea:	dcec      	bgt.n	80062c6 <__multadd+0x12>
 80062ec:	b30e      	cbz	r6, 8006332 <__multadd+0x7e>
 80062ee:	68a3      	ldr	r3, [r4, #8]
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	dc19      	bgt.n	8006328 <__multadd+0x74>
 80062f4:	6861      	ldr	r1, [r4, #4]
 80062f6:	4638      	mov	r0, r7
 80062f8:	3101      	adds	r1, #1
 80062fa:	f7ff ff79 	bl	80061f0 <_Balloc>
 80062fe:	4680      	mov	r8, r0
 8006300:	b928      	cbnz	r0, 800630e <__multadd+0x5a>
 8006302:	4602      	mov	r2, r0
 8006304:	4b0c      	ldr	r3, [pc, #48]	@ (8006338 <__multadd+0x84>)
 8006306:	480d      	ldr	r0, [pc, #52]	@ (800633c <__multadd+0x88>)
 8006308:	21ba      	movs	r1, #186	@ 0xba
 800630a:	f000 fd27 	bl	8006d5c <__assert_func>
 800630e:	6922      	ldr	r2, [r4, #16]
 8006310:	3202      	adds	r2, #2
 8006312:	f104 010c 	add.w	r1, r4, #12
 8006316:	0092      	lsls	r2, r2, #2
 8006318:	300c      	adds	r0, #12
 800631a:	f000 fd11 	bl	8006d40 <memcpy>
 800631e:	4621      	mov	r1, r4
 8006320:	4638      	mov	r0, r7
 8006322:	f7ff ffa5 	bl	8006270 <_Bfree>
 8006326:	4644      	mov	r4, r8
 8006328:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800632c:	3501      	adds	r5, #1
 800632e:	615e      	str	r6, [r3, #20]
 8006330:	6125      	str	r5, [r4, #16]
 8006332:	4620      	mov	r0, r4
 8006334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006338:	080075bc 	.word	0x080075bc
 800633c:	080075cd 	.word	0x080075cd

08006340 <__hi0bits>:
 8006340:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006344:	4603      	mov	r3, r0
 8006346:	bf36      	itet	cc
 8006348:	0403      	lslcc	r3, r0, #16
 800634a:	2000      	movcs	r0, #0
 800634c:	2010      	movcc	r0, #16
 800634e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006352:	bf3c      	itt	cc
 8006354:	021b      	lslcc	r3, r3, #8
 8006356:	3008      	addcc	r0, #8
 8006358:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800635c:	bf3c      	itt	cc
 800635e:	011b      	lslcc	r3, r3, #4
 8006360:	3004      	addcc	r0, #4
 8006362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006366:	bf3c      	itt	cc
 8006368:	009b      	lslcc	r3, r3, #2
 800636a:	3002      	addcc	r0, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	db05      	blt.n	800637c <__hi0bits+0x3c>
 8006370:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006374:	f100 0001 	add.w	r0, r0, #1
 8006378:	bf08      	it	eq
 800637a:	2020      	moveq	r0, #32
 800637c:	4770      	bx	lr

0800637e <__lo0bits>:
 800637e:	6803      	ldr	r3, [r0, #0]
 8006380:	4602      	mov	r2, r0
 8006382:	f013 0007 	ands.w	r0, r3, #7
 8006386:	d00b      	beq.n	80063a0 <__lo0bits+0x22>
 8006388:	07d9      	lsls	r1, r3, #31
 800638a:	d421      	bmi.n	80063d0 <__lo0bits+0x52>
 800638c:	0798      	lsls	r0, r3, #30
 800638e:	bf49      	itett	mi
 8006390:	085b      	lsrmi	r3, r3, #1
 8006392:	089b      	lsrpl	r3, r3, #2
 8006394:	2001      	movmi	r0, #1
 8006396:	6013      	strmi	r3, [r2, #0]
 8006398:	bf5c      	itt	pl
 800639a:	6013      	strpl	r3, [r2, #0]
 800639c:	2002      	movpl	r0, #2
 800639e:	4770      	bx	lr
 80063a0:	b299      	uxth	r1, r3
 80063a2:	b909      	cbnz	r1, 80063a8 <__lo0bits+0x2a>
 80063a4:	0c1b      	lsrs	r3, r3, #16
 80063a6:	2010      	movs	r0, #16
 80063a8:	b2d9      	uxtb	r1, r3
 80063aa:	b909      	cbnz	r1, 80063b0 <__lo0bits+0x32>
 80063ac:	3008      	adds	r0, #8
 80063ae:	0a1b      	lsrs	r3, r3, #8
 80063b0:	0719      	lsls	r1, r3, #28
 80063b2:	bf04      	itt	eq
 80063b4:	091b      	lsreq	r3, r3, #4
 80063b6:	3004      	addeq	r0, #4
 80063b8:	0799      	lsls	r1, r3, #30
 80063ba:	bf04      	itt	eq
 80063bc:	089b      	lsreq	r3, r3, #2
 80063be:	3002      	addeq	r0, #2
 80063c0:	07d9      	lsls	r1, r3, #31
 80063c2:	d403      	bmi.n	80063cc <__lo0bits+0x4e>
 80063c4:	085b      	lsrs	r3, r3, #1
 80063c6:	f100 0001 	add.w	r0, r0, #1
 80063ca:	d003      	beq.n	80063d4 <__lo0bits+0x56>
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	4770      	bx	lr
 80063d0:	2000      	movs	r0, #0
 80063d2:	4770      	bx	lr
 80063d4:	2020      	movs	r0, #32
 80063d6:	4770      	bx	lr

080063d8 <__i2b>:
 80063d8:	b510      	push	{r4, lr}
 80063da:	460c      	mov	r4, r1
 80063dc:	2101      	movs	r1, #1
 80063de:	f7ff ff07 	bl	80061f0 <_Balloc>
 80063e2:	4602      	mov	r2, r0
 80063e4:	b928      	cbnz	r0, 80063f2 <__i2b+0x1a>
 80063e6:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <__i2b+0x24>)
 80063e8:	4805      	ldr	r0, [pc, #20]	@ (8006400 <__i2b+0x28>)
 80063ea:	f240 1145 	movw	r1, #325	@ 0x145
 80063ee:	f000 fcb5 	bl	8006d5c <__assert_func>
 80063f2:	2301      	movs	r3, #1
 80063f4:	6144      	str	r4, [r0, #20]
 80063f6:	6103      	str	r3, [r0, #16]
 80063f8:	bd10      	pop	{r4, pc}
 80063fa:	bf00      	nop
 80063fc:	080075bc 	.word	0x080075bc
 8006400:	080075cd 	.word	0x080075cd

08006404 <__multiply>:
 8006404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006408:	4617      	mov	r7, r2
 800640a:	690a      	ldr	r2, [r1, #16]
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	429a      	cmp	r2, r3
 8006410:	bfa8      	it	ge
 8006412:	463b      	movge	r3, r7
 8006414:	4689      	mov	r9, r1
 8006416:	bfa4      	itt	ge
 8006418:	460f      	movge	r7, r1
 800641a:	4699      	movge	r9, r3
 800641c:	693d      	ldr	r5, [r7, #16]
 800641e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	eb05 060a 	add.w	r6, r5, sl
 800642a:	42b3      	cmp	r3, r6
 800642c:	b085      	sub	sp, #20
 800642e:	bfb8      	it	lt
 8006430:	3101      	addlt	r1, #1
 8006432:	f7ff fedd 	bl	80061f0 <_Balloc>
 8006436:	b930      	cbnz	r0, 8006446 <__multiply+0x42>
 8006438:	4602      	mov	r2, r0
 800643a:	4b41      	ldr	r3, [pc, #260]	@ (8006540 <__multiply+0x13c>)
 800643c:	4841      	ldr	r0, [pc, #260]	@ (8006544 <__multiply+0x140>)
 800643e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006442:	f000 fc8b 	bl	8006d5c <__assert_func>
 8006446:	f100 0414 	add.w	r4, r0, #20
 800644a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800644e:	4623      	mov	r3, r4
 8006450:	2200      	movs	r2, #0
 8006452:	4573      	cmp	r3, lr
 8006454:	d320      	bcc.n	8006498 <__multiply+0x94>
 8006456:	f107 0814 	add.w	r8, r7, #20
 800645a:	f109 0114 	add.w	r1, r9, #20
 800645e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006462:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006466:	9302      	str	r3, [sp, #8]
 8006468:	1beb      	subs	r3, r5, r7
 800646a:	3b15      	subs	r3, #21
 800646c:	f023 0303 	bic.w	r3, r3, #3
 8006470:	3304      	adds	r3, #4
 8006472:	3715      	adds	r7, #21
 8006474:	42bd      	cmp	r5, r7
 8006476:	bf38      	it	cc
 8006478:	2304      	movcc	r3, #4
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	9b02      	ldr	r3, [sp, #8]
 800647e:	9103      	str	r1, [sp, #12]
 8006480:	428b      	cmp	r3, r1
 8006482:	d80c      	bhi.n	800649e <__multiply+0x9a>
 8006484:	2e00      	cmp	r6, #0
 8006486:	dd03      	ble.n	8006490 <__multiply+0x8c>
 8006488:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800648c:	2b00      	cmp	r3, #0
 800648e:	d055      	beq.n	800653c <__multiply+0x138>
 8006490:	6106      	str	r6, [r0, #16]
 8006492:	b005      	add	sp, #20
 8006494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006498:	f843 2b04 	str.w	r2, [r3], #4
 800649c:	e7d9      	b.n	8006452 <__multiply+0x4e>
 800649e:	f8b1 a000 	ldrh.w	sl, [r1]
 80064a2:	f1ba 0f00 	cmp.w	sl, #0
 80064a6:	d01f      	beq.n	80064e8 <__multiply+0xe4>
 80064a8:	46c4      	mov	ip, r8
 80064aa:	46a1      	mov	r9, r4
 80064ac:	2700      	movs	r7, #0
 80064ae:	f85c 2b04 	ldr.w	r2, [ip], #4
 80064b2:	f8d9 3000 	ldr.w	r3, [r9]
 80064b6:	fa1f fb82 	uxth.w	fp, r2
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80064c0:	443b      	add	r3, r7
 80064c2:	f8d9 7000 	ldr.w	r7, [r9]
 80064c6:	0c12      	lsrs	r2, r2, #16
 80064c8:	0c3f      	lsrs	r7, r7, #16
 80064ca:	fb0a 7202 	mla	r2, sl, r2, r7
 80064ce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064d8:	4565      	cmp	r5, ip
 80064da:	f849 3b04 	str.w	r3, [r9], #4
 80064de:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80064e2:	d8e4      	bhi.n	80064ae <__multiply+0xaa>
 80064e4:	9b01      	ldr	r3, [sp, #4]
 80064e6:	50e7      	str	r7, [r4, r3]
 80064e8:	9b03      	ldr	r3, [sp, #12]
 80064ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80064ee:	3104      	adds	r1, #4
 80064f0:	f1b9 0f00 	cmp.w	r9, #0
 80064f4:	d020      	beq.n	8006538 <__multiply+0x134>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	4647      	mov	r7, r8
 80064fa:	46a4      	mov	ip, r4
 80064fc:	f04f 0a00 	mov.w	sl, #0
 8006500:	f8b7 b000 	ldrh.w	fp, [r7]
 8006504:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006508:	fb09 220b 	mla	r2, r9, fp, r2
 800650c:	4452      	add	r2, sl
 800650e:	b29b      	uxth	r3, r3
 8006510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006514:	f84c 3b04 	str.w	r3, [ip], #4
 8006518:	f857 3b04 	ldr.w	r3, [r7], #4
 800651c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006520:	f8bc 3000 	ldrh.w	r3, [ip]
 8006524:	fb09 330a 	mla	r3, r9, sl, r3
 8006528:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800652c:	42bd      	cmp	r5, r7
 800652e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006532:	d8e5      	bhi.n	8006500 <__multiply+0xfc>
 8006534:	9a01      	ldr	r2, [sp, #4]
 8006536:	50a3      	str	r3, [r4, r2]
 8006538:	3404      	adds	r4, #4
 800653a:	e79f      	b.n	800647c <__multiply+0x78>
 800653c:	3e01      	subs	r6, #1
 800653e:	e7a1      	b.n	8006484 <__multiply+0x80>
 8006540:	080075bc 	.word	0x080075bc
 8006544:	080075cd 	.word	0x080075cd

08006548 <__pow5mult>:
 8006548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800654c:	4615      	mov	r5, r2
 800654e:	f012 0203 	ands.w	r2, r2, #3
 8006552:	4607      	mov	r7, r0
 8006554:	460e      	mov	r6, r1
 8006556:	d007      	beq.n	8006568 <__pow5mult+0x20>
 8006558:	4c25      	ldr	r4, [pc, #148]	@ (80065f0 <__pow5mult+0xa8>)
 800655a:	3a01      	subs	r2, #1
 800655c:	2300      	movs	r3, #0
 800655e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006562:	f7ff fea7 	bl	80062b4 <__multadd>
 8006566:	4606      	mov	r6, r0
 8006568:	10ad      	asrs	r5, r5, #2
 800656a:	d03d      	beq.n	80065e8 <__pow5mult+0xa0>
 800656c:	69fc      	ldr	r4, [r7, #28]
 800656e:	b97c      	cbnz	r4, 8006590 <__pow5mult+0x48>
 8006570:	2010      	movs	r0, #16
 8006572:	f7ff fd87 	bl	8006084 <malloc>
 8006576:	4602      	mov	r2, r0
 8006578:	61f8      	str	r0, [r7, #28]
 800657a:	b928      	cbnz	r0, 8006588 <__pow5mult+0x40>
 800657c:	4b1d      	ldr	r3, [pc, #116]	@ (80065f4 <__pow5mult+0xac>)
 800657e:	481e      	ldr	r0, [pc, #120]	@ (80065f8 <__pow5mult+0xb0>)
 8006580:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006584:	f000 fbea 	bl	8006d5c <__assert_func>
 8006588:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800658c:	6004      	str	r4, [r0, #0]
 800658e:	60c4      	str	r4, [r0, #12]
 8006590:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006594:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006598:	b94c      	cbnz	r4, 80065ae <__pow5mult+0x66>
 800659a:	f240 2171 	movw	r1, #625	@ 0x271
 800659e:	4638      	mov	r0, r7
 80065a0:	f7ff ff1a 	bl	80063d8 <__i2b>
 80065a4:	2300      	movs	r3, #0
 80065a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80065aa:	4604      	mov	r4, r0
 80065ac:	6003      	str	r3, [r0, #0]
 80065ae:	f04f 0900 	mov.w	r9, #0
 80065b2:	07eb      	lsls	r3, r5, #31
 80065b4:	d50a      	bpl.n	80065cc <__pow5mult+0x84>
 80065b6:	4631      	mov	r1, r6
 80065b8:	4622      	mov	r2, r4
 80065ba:	4638      	mov	r0, r7
 80065bc:	f7ff ff22 	bl	8006404 <__multiply>
 80065c0:	4631      	mov	r1, r6
 80065c2:	4680      	mov	r8, r0
 80065c4:	4638      	mov	r0, r7
 80065c6:	f7ff fe53 	bl	8006270 <_Bfree>
 80065ca:	4646      	mov	r6, r8
 80065cc:	106d      	asrs	r5, r5, #1
 80065ce:	d00b      	beq.n	80065e8 <__pow5mult+0xa0>
 80065d0:	6820      	ldr	r0, [r4, #0]
 80065d2:	b938      	cbnz	r0, 80065e4 <__pow5mult+0x9c>
 80065d4:	4622      	mov	r2, r4
 80065d6:	4621      	mov	r1, r4
 80065d8:	4638      	mov	r0, r7
 80065da:	f7ff ff13 	bl	8006404 <__multiply>
 80065de:	6020      	str	r0, [r4, #0]
 80065e0:	f8c0 9000 	str.w	r9, [r0]
 80065e4:	4604      	mov	r4, r0
 80065e6:	e7e4      	b.n	80065b2 <__pow5mult+0x6a>
 80065e8:	4630      	mov	r0, r6
 80065ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ee:	bf00      	nop
 80065f0:	08007680 	.word	0x08007680
 80065f4:	0800754d 	.word	0x0800754d
 80065f8:	080075cd 	.word	0x080075cd

080065fc <__lshift>:
 80065fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006600:	460c      	mov	r4, r1
 8006602:	6849      	ldr	r1, [r1, #4]
 8006604:	6923      	ldr	r3, [r4, #16]
 8006606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800660a:	68a3      	ldr	r3, [r4, #8]
 800660c:	4607      	mov	r7, r0
 800660e:	4691      	mov	r9, r2
 8006610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006614:	f108 0601 	add.w	r6, r8, #1
 8006618:	42b3      	cmp	r3, r6
 800661a:	db0b      	blt.n	8006634 <__lshift+0x38>
 800661c:	4638      	mov	r0, r7
 800661e:	f7ff fde7 	bl	80061f0 <_Balloc>
 8006622:	4605      	mov	r5, r0
 8006624:	b948      	cbnz	r0, 800663a <__lshift+0x3e>
 8006626:	4602      	mov	r2, r0
 8006628:	4b28      	ldr	r3, [pc, #160]	@ (80066cc <__lshift+0xd0>)
 800662a:	4829      	ldr	r0, [pc, #164]	@ (80066d0 <__lshift+0xd4>)
 800662c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006630:	f000 fb94 	bl	8006d5c <__assert_func>
 8006634:	3101      	adds	r1, #1
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	e7ee      	b.n	8006618 <__lshift+0x1c>
 800663a:	2300      	movs	r3, #0
 800663c:	f100 0114 	add.w	r1, r0, #20
 8006640:	f100 0210 	add.w	r2, r0, #16
 8006644:	4618      	mov	r0, r3
 8006646:	4553      	cmp	r3, sl
 8006648:	db33      	blt.n	80066b2 <__lshift+0xb6>
 800664a:	6920      	ldr	r0, [r4, #16]
 800664c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006650:	f104 0314 	add.w	r3, r4, #20
 8006654:	f019 091f 	ands.w	r9, r9, #31
 8006658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800665c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006660:	d02b      	beq.n	80066ba <__lshift+0xbe>
 8006662:	f1c9 0e20 	rsb	lr, r9, #32
 8006666:	468a      	mov	sl, r1
 8006668:	2200      	movs	r2, #0
 800666a:	6818      	ldr	r0, [r3, #0]
 800666c:	fa00 f009 	lsl.w	r0, r0, r9
 8006670:	4310      	orrs	r0, r2
 8006672:	f84a 0b04 	str.w	r0, [sl], #4
 8006676:	f853 2b04 	ldr.w	r2, [r3], #4
 800667a:	459c      	cmp	ip, r3
 800667c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006680:	d8f3      	bhi.n	800666a <__lshift+0x6e>
 8006682:	ebac 0304 	sub.w	r3, ip, r4
 8006686:	3b15      	subs	r3, #21
 8006688:	f023 0303 	bic.w	r3, r3, #3
 800668c:	3304      	adds	r3, #4
 800668e:	f104 0015 	add.w	r0, r4, #21
 8006692:	4560      	cmp	r0, ip
 8006694:	bf88      	it	hi
 8006696:	2304      	movhi	r3, #4
 8006698:	50ca      	str	r2, [r1, r3]
 800669a:	b10a      	cbz	r2, 80066a0 <__lshift+0xa4>
 800669c:	f108 0602 	add.w	r6, r8, #2
 80066a0:	3e01      	subs	r6, #1
 80066a2:	4638      	mov	r0, r7
 80066a4:	612e      	str	r6, [r5, #16]
 80066a6:	4621      	mov	r1, r4
 80066a8:	f7ff fde2 	bl	8006270 <_Bfree>
 80066ac:	4628      	mov	r0, r5
 80066ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80066b6:	3301      	adds	r3, #1
 80066b8:	e7c5      	b.n	8006646 <__lshift+0x4a>
 80066ba:	3904      	subs	r1, #4
 80066bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80066c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80066c4:	459c      	cmp	ip, r3
 80066c6:	d8f9      	bhi.n	80066bc <__lshift+0xc0>
 80066c8:	e7ea      	b.n	80066a0 <__lshift+0xa4>
 80066ca:	bf00      	nop
 80066cc:	080075bc 	.word	0x080075bc
 80066d0:	080075cd 	.word	0x080075cd

080066d4 <__mcmp>:
 80066d4:	690a      	ldr	r2, [r1, #16]
 80066d6:	4603      	mov	r3, r0
 80066d8:	6900      	ldr	r0, [r0, #16]
 80066da:	1a80      	subs	r0, r0, r2
 80066dc:	b530      	push	{r4, r5, lr}
 80066de:	d10e      	bne.n	80066fe <__mcmp+0x2a>
 80066e0:	3314      	adds	r3, #20
 80066e2:	3114      	adds	r1, #20
 80066e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80066e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80066ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066f4:	4295      	cmp	r5, r2
 80066f6:	d003      	beq.n	8006700 <__mcmp+0x2c>
 80066f8:	d205      	bcs.n	8006706 <__mcmp+0x32>
 80066fa:	f04f 30ff 	mov.w	r0, #4294967295
 80066fe:	bd30      	pop	{r4, r5, pc}
 8006700:	42a3      	cmp	r3, r4
 8006702:	d3f3      	bcc.n	80066ec <__mcmp+0x18>
 8006704:	e7fb      	b.n	80066fe <__mcmp+0x2a>
 8006706:	2001      	movs	r0, #1
 8006708:	e7f9      	b.n	80066fe <__mcmp+0x2a>
	...

0800670c <__mdiff>:
 800670c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	4689      	mov	r9, r1
 8006712:	4606      	mov	r6, r0
 8006714:	4611      	mov	r1, r2
 8006716:	4648      	mov	r0, r9
 8006718:	4614      	mov	r4, r2
 800671a:	f7ff ffdb 	bl	80066d4 <__mcmp>
 800671e:	1e05      	subs	r5, r0, #0
 8006720:	d112      	bne.n	8006748 <__mdiff+0x3c>
 8006722:	4629      	mov	r1, r5
 8006724:	4630      	mov	r0, r6
 8006726:	f7ff fd63 	bl	80061f0 <_Balloc>
 800672a:	4602      	mov	r2, r0
 800672c:	b928      	cbnz	r0, 800673a <__mdiff+0x2e>
 800672e:	4b3f      	ldr	r3, [pc, #252]	@ (800682c <__mdiff+0x120>)
 8006730:	f240 2137 	movw	r1, #567	@ 0x237
 8006734:	483e      	ldr	r0, [pc, #248]	@ (8006830 <__mdiff+0x124>)
 8006736:	f000 fb11 	bl	8006d5c <__assert_func>
 800673a:	2301      	movs	r3, #1
 800673c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006740:	4610      	mov	r0, r2
 8006742:	b003      	add	sp, #12
 8006744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006748:	bfbc      	itt	lt
 800674a:	464b      	movlt	r3, r9
 800674c:	46a1      	movlt	r9, r4
 800674e:	4630      	mov	r0, r6
 8006750:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006754:	bfba      	itte	lt
 8006756:	461c      	movlt	r4, r3
 8006758:	2501      	movlt	r5, #1
 800675a:	2500      	movge	r5, #0
 800675c:	f7ff fd48 	bl	80061f0 <_Balloc>
 8006760:	4602      	mov	r2, r0
 8006762:	b918      	cbnz	r0, 800676c <__mdiff+0x60>
 8006764:	4b31      	ldr	r3, [pc, #196]	@ (800682c <__mdiff+0x120>)
 8006766:	f240 2145 	movw	r1, #581	@ 0x245
 800676a:	e7e3      	b.n	8006734 <__mdiff+0x28>
 800676c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006770:	6926      	ldr	r6, [r4, #16]
 8006772:	60c5      	str	r5, [r0, #12]
 8006774:	f109 0310 	add.w	r3, r9, #16
 8006778:	f109 0514 	add.w	r5, r9, #20
 800677c:	f104 0e14 	add.w	lr, r4, #20
 8006780:	f100 0b14 	add.w	fp, r0, #20
 8006784:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006788:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	46d9      	mov	r9, fp
 8006790:	f04f 0c00 	mov.w	ip, #0
 8006794:	9b01      	ldr	r3, [sp, #4]
 8006796:	f85e 0b04 	ldr.w	r0, [lr], #4
 800679a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	fa1f f38a 	uxth.w	r3, sl
 80067a4:	4619      	mov	r1, r3
 80067a6:	b283      	uxth	r3, r0
 80067a8:	1acb      	subs	r3, r1, r3
 80067aa:	0c00      	lsrs	r0, r0, #16
 80067ac:	4463      	add	r3, ip
 80067ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80067b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80067bc:	4576      	cmp	r6, lr
 80067be:	f849 3b04 	str.w	r3, [r9], #4
 80067c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067c6:	d8e5      	bhi.n	8006794 <__mdiff+0x88>
 80067c8:	1b33      	subs	r3, r6, r4
 80067ca:	3b15      	subs	r3, #21
 80067cc:	f023 0303 	bic.w	r3, r3, #3
 80067d0:	3415      	adds	r4, #21
 80067d2:	3304      	adds	r3, #4
 80067d4:	42a6      	cmp	r6, r4
 80067d6:	bf38      	it	cc
 80067d8:	2304      	movcc	r3, #4
 80067da:	441d      	add	r5, r3
 80067dc:	445b      	add	r3, fp
 80067de:	461e      	mov	r6, r3
 80067e0:	462c      	mov	r4, r5
 80067e2:	4544      	cmp	r4, r8
 80067e4:	d30e      	bcc.n	8006804 <__mdiff+0xf8>
 80067e6:	f108 0103 	add.w	r1, r8, #3
 80067ea:	1b49      	subs	r1, r1, r5
 80067ec:	f021 0103 	bic.w	r1, r1, #3
 80067f0:	3d03      	subs	r5, #3
 80067f2:	45a8      	cmp	r8, r5
 80067f4:	bf38      	it	cc
 80067f6:	2100      	movcc	r1, #0
 80067f8:	440b      	add	r3, r1
 80067fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067fe:	b191      	cbz	r1, 8006826 <__mdiff+0x11a>
 8006800:	6117      	str	r7, [r2, #16]
 8006802:	e79d      	b.n	8006740 <__mdiff+0x34>
 8006804:	f854 1b04 	ldr.w	r1, [r4], #4
 8006808:	46e6      	mov	lr, ip
 800680a:	0c08      	lsrs	r0, r1, #16
 800680c:	fa1c fc81 	uxtah	ip, ip, r1
 8006810:	4471      	add	r1, lr
 8006812:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006816:	b289      	uxth	r1, r1
 8006818:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800681c:	f846 1b04 	str.w	r1, [r6], #4
 8006820:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006824:	e7dd      	b.n	80067e2 <__mdiff+0xd6>
 8006826:	3f01      	subs	r7, #1
 8006828:	e7e7      	b.n	80067fa <__mdiff+0xee>
 800682a:	bf00      	nop
 800682c:	080075bc 	.word	0x080075bc
 8006830:	080075cd 	.word	0x080075cd

08006834 <__d2b>:
 8006834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006838:	460f      	mov	r7, r1
 800683a:	2101      	movs	r1, #1
 800683c:	ec59 8b10 	vmov	r8, r9, d0
 8006840:	4616      	mov	r6, r2
 8006842:	f7ff fcd5 	bl	80061f0 <_Balloc>
 8006846:	4604      	mov	r4, r0
 8006848:	b930      	cbnz	r0, 8006858 <__d2b+0x24>
 800684a:	4602      	mov	r2, r0
 800684c:	4b23      	ldr	r3, [pc, #140]	@ (80068dc <__d2b+0xa8>)
 800684e:	4824      	ldr	r0, [pc, #144]	@ (80068e0 <__d2b+0xac>)
 8006850:	f240 310f 	movw	r1, #783	@ 0x30f
 8006854:	f000 fa82 	bl	8006d5c <__assert_func>
 8006858:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800685c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006860:	b10d      	cbz	r5, 8006866 <__d2b+0x32>
 8006862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006866:	9301      	str	r3, [sp, #4]
 8006868:	f1b8 0300 	subs.w	r3, r8, #0
 800686c:	d023      	beq.n	80068b6 <__d2b+0x82>
 800686e:	4668      	mov	r0, sp
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	f7ff fd84 	bl	800637e <__lo0bits>
 8006876:	e9dd 1200 	ldrd	r1, r2, [sp]
 800687a:	b1d0      	cbz	r0, 80068b2 <__d2b+0x7e>
 800687c:	f1c0 0320 	rsb	r3, r0, #32
 8006880:	fa02 f303 	lsl.w	r3, r2, r3
 8006884:	430b      	orrs	r3, r1
 8006886:	40c2      	lsrs	r2, r0
 8006888:	6163      	str	r3, [r4, #20]
 800688a:	9201      	str	r2, [sp, #4]
 800688c:	9b01      	ldr	r3, [sp, #4]
 800688e:	61a3      	str	r3, [r4, #24]
 8006890:	2b00      	cmp	r3, #0
 8006892:	bf0c      	ite	eq
 8006894:	2201      	moveq	r2, #1
 8006896:	2202      	movne	r2, #2
 8006898:	6122      	str	r2, [r4, #16]
 800689a:	b1a5      	cbz	r5, 80068c6 <__d2b+0x92>
 800689c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80068a0:	4405      	add	r5, r0
 80068a2:	603d      	str	r5, [r7, #0]
 80068a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80068a8:	6030      	str	r0, [r6, #0]
 80068aa:	4620      	mov	r0, r4
 80068ac:	b003      	add	sp, #12
 80068ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068b2:	6161      	str	r1, [r4, #20]
 80068b4:	e7ea      	b.n	800688c <__d2b+0x58>
 80068b6:	a801      	add	r0, sp, #4
 80068b8:	f7ff fd61 	bl	800637e <__lo0bits>
 80068bc:	9b01      	ldr	r3, [sp, #4]
 80068be:	6163      	str	r3, [r4, #20]
 80068c0:	3020      	adds	r0, #32
 80068c2:	2201      	movs	r2, #1
 80068c4:	e7e8      	b.n	8006898 <__d2b+0x64>
 80068c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80068ce:	6038      	str	r0, [r7, #0]
 80068d0:	6918      	ldr	r0, [r3, #16]
 80068d2:	f7ff fd35 	bl	8006340 <__hi0bits>
 80068d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80068da:	e7e5      	b.n	80068a8 <__d2b+0x74>
 80068dc:	080075bc 	.word	0x080075bc
 80068e0:	080075cd 	.word	0x080075cd

080068e4 <__ssputs_r>:
 80068e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e8:	688e      	ldr	r6, [r1, #8]
 80068ea:	461f      	mov	r7, r3
 80068ec:	42be      	cmp	r6, r7
 80068ee:	680b      	ldr	r3, [r1, #0]
 80068f0:	4682      	mov	sl, r0
 80068f2:	460c      	mov	r4, r1
 80068f4:	4690      	mov	r8, r2
 80068f6:	d82d      	bhi.n	8006954 <__ssputs_r+0x70>
 80068f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006900:	d026      	beq.n	8006950 <__ssputs_r+0x6c>
 8006902:	6965      	ldr	r5, [r4, #20]
 8006904:	6909      	ldr	r1, [r1, #16]
 8006906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800690a:	eba3 0901 	sub.w	r9, r3, r1
 800690e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006912:	1c7b      	adds	r3, r7, #1
 8006914:	444b      	add	r3, r9
 8006916:	106d      	asrs	r5, r5, #1
 8006918:	429d      	cmp	r5, r3
 800691a:	bf38      	it	cc
 800691c:	461d      	movcc	r5, r3
 800691e:	0553      	lsls	r3, r2, #21
 8006920:	d527      	bpl.n	8006972 <__ssputs_r+0x8e>
 8006922:	4629      	mov	r1, r5
 8006924:	f7ff fbd8 	bl	80060d8 <_malloc_r>
 8006928:	4606      	mov	r6, r0
 800692a:	b360      	cbz	r0, 8006986 <__ssputs_r+0xa2>
 800692c:	6921      	ldr	r1, [r4, #16]
 800692e:	464a      	mov	r2, r9
 8006930:	f000 fa06 	bl	8006d40 <memcpy>
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800693a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800693e:	81a3      	strh	r3, [r4, #12]
 8006940:	6126      	str	r6, [r4, #16]
 8006942:	6165      	str	r5, [r4, #20]
 8006944:	444e      	add	r6, r9
 8006946:	eba5 0509 	sub.w	r5, r5, r9
 800694a:	6026      	str	r6, [r4, #0]
 800694c:	60a5      	str	r5, [r4, #8]
 800694e:	463e      	mov	r6, r7
 8006950:	42be      	cmp	r6, r7
 8006952:	d900      	bls.n	8006956 <__ssputs_r+0x72>
 8006954:	463e      	mov	r6, r7
 8006956:	6820      	ldr	r0, [r4, #0]
 8006958:	4632      	mov	r2, r6
 800695a:	4641      	mov	r1, r8
 800695c:	f000 f9c6 	bl	8006cec <memmove>
 8006960:	68a3      	ldr	r3, [r4, #8]
 8006962:	1b9b      	subs	r3, r3, r6
 8006964:	60a3      	str	r3, [r4, #8]
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	4433      	add	r3, r6
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	2000      	movs	r0, #0
 800696e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006972:	462a      	mov	r2, r5
 8006974:	f000 fa36 	bl	8006de4 <_realloc_r>
 8006978:	4606      	mov	r6, r0
 800697a:	2800      	cmp	r0, #0
 800697c:	d1e0      	bne.n	8006940 <__ssputs_r+0x5c>
 800697e:	6921      	ldr	r1, [r4, #16]
 8006980:	4650      	mov	r0, sl
 8006982:	f7ff fb35 	bl	8005ff0 <_free_r>
 8006986:	230c      	movs	r3, #12
 8006988:	f8ca 3000 	str.w	r3, [sl]
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	f04f 30ff 	mov.w	r0, #4294967295
 8006998:	e7e9      	b.n	800696e <__ssputs_r+0x8a>
	...

0800699c <_svfiprintf_r>:
 800699c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	4698      	mov	r8, r3
 80069a2:	898b      	ldrh	r3, [r1, #12]
 80069a4:	061b      	lsls	r3, r3, #24
 80069a6:	b09d      	sub	sp, #116	@ 0x74
 80069a8:	4607      	mov	r7, r0
 80069aa:	460d      	mov	r5, r1
 80069ac:	4614      	mov	r4, r2
 80069ae:	d510      	bpl.n	80069d2 <_svfiprintf_r+0x36>
 80069b0:	690b      	ldr	r3, [r1, #16]
 80069b2:	b973      	cbnz	r3, 80069d2 <_svfiprintf_r+0x36>
 80069b4:	2140      	movs	r1, #64	@ 0x40
 80069b6:	f7ff fb8f 	bl	80060d8 <_malloc_r>
 80069ba:	6028      	str	r0, [r5, #0]
 80069bc:	6128      	str	r0, [r5, #16]
 80069be:	b930      	cbnz	r0, 80069ce <_svfiprintf_r+0x32>
 80069c0:	230c      	movs	r3, #12
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	f04f 30ff 	mov.w	r0, #4294967295
 80069c8:	b01d      	add	sp, #116	@ 0x74
 80069ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ce:	2340      	movs	r3, #64	@ 0x40
 80069d0:	616b      	str	r3, [r5, #20]
 80069d2:	2300      	movs	r3, #0
 80069d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069d6:	2320      	movs	r3, #32
 80069d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80069e0:	2330      	movs	r3, #48	@ 0x30
 80069e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006b80 <_svfiprintf_r+0x1e4>
 80069e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069ea:	f04f 0901 	mov.w	r9, #1
 80069ee:	4623      	mov	r3, r4
 80069f0:	469a      	mov	sl, r3
 80069f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069f6:	b10a      	cbz	r2, 80069fc <_svfiprintf_r+0x60>
 80069f8:	2a25      	cmp	r2, #37	@ 0x25
 80069fa:	d1f9      	bne.n	80069f0 <_svfiprintf_r+0x54>
 80069fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006a00:	d00b      	beq.n	8006a1a <_svfiprintf_r+0x7e>
 8006a02:	465b      	mov	r3, fp
 8006a04:	4622      	mov	r2, r4
 8006a06:	4629      	mov	r1, r5
 8006a08:	4638      	mov	r0, r7
 8006a0a:	f7ff ff6b 	bl	80068e4 <__ssputs_r>
 8006a0e:	3001      	adds	r0, #1
 8006a10:	f000 80a7 	beq.w	8006b62 <_svfiprintf_r+0x1c6>
 8006a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a16:	445a      	add	r2, fp
 8006a18:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 809f 	beq.w	8006b62 <_svfiprintf_r+0x1c6>
 8006a24:	2300      	movs	r3, #0
 8006a26:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a2e:	f10a 0a01 	add.w	sl, sl, #1
 8006a32:	9304      	str	r3, [sp, #16]
 8006a34:	9307      	str	r3, [sp, #28]
 8006a36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a3c:	4654      	mov	r4, sl
 8006a3e:	2205      	movs	r2, #5
 8006a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a44:	484e      	ldr	r0, [pc, #312]	@ (8006b80 <_svfiprintf_r+0x1e4>)
 8006a46:	f7f9 fbc3 	bl	80001d0 <memchr>
 8006a4a:	9a04      	ldr	r2, [sp, #16]
 8006a4c:	b9d8      	cbnz	r0, 8006a86 <_svfiprintf_r+0xea>
 8006a4e:	06d0      	lsls	r0, r2, #27
 8006a50:	bf44      	itt	mi
 8006a52:	2320      	movmi	r3, #32
 8006a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a58:	0711      	lsls	r1, r2, #28
 8006a5a:	bf44      	itt	mi
 8006a5c:	232b      	movmi	r3, #43	@ 0x2b
 8006a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a62:	f89a 3000 	ldrb.w	r3, [sl]
 8006a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a68:	d015      	beq.n	8006a96 <_svfiprintf_r+0xfa>
 8006a6a:	9a07      	ldr	r2, [sp, #28]
 8006a6c:	4654      	mov	r4, sl
 8006a6e:	2000      	movs	r0, #0
 8006a70:	f04f 0c0a 	mov.w	ip, #10
 8006a74:	4621      	mov	r1, r4
 8006a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a7a:	3b30      	subs	r3, #48	@ 0x30
 8006a7c:	2b09      	cmp	r3, #9
 8006a7e:	d94b      	bls.n	8006b18 <_svfiprintf_r+0x17c>
 8006a80:	b1b0      	cbz	r0, 8006ab0 <_svfiprintf_r+0x114>
 8006a82:	9207      	str	r2, [sp, #28]
 8006a84:	e014      	b.n	8006ab0 <_svfiprintf_r+0x114>
 8006a86:	eba0 0308 	sub.w	r3, r0, r8
 8006a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	9304      	str	r3, [sp, #16]
 8006a92:	46a2      	mov	sl, r4
 8006a94:	e7d2      	b.n	8006a3c <_svfiprintf_r+0xa0>
 8006a96:	9b03      	ldr	r3, [sp, #12]
 8006a98:	1d19      	adds	r1, r3, #4
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	9103      	str	r1, [sp, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bfbb      	ittet	lt
 8006aa2:	425b      	neglt	r3, r3
 8006aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8006aa8:	9307      	strge	r3, [sp, #28]
 8006aaa:	9307      	strlt	r3, [sp, #28]
 8006aac:	bfb8      	it	lt
 8006aae:	9204      	strlt	r2, [sp, #16]
 8006ab0:	7823      	ldrb	r3, [r4, #0]
 8006ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ab4:	d10a      	bne.n	8006acc <_svfiprintf_r+0x130>
 8006ab6:	7863      	ldrb	r3, [r4, #1]
 8006ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006aba:	d132      	bne.n	8006b22 <_svfiprintf_r+0x186>
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	1d1a      	adds	r2, r3, #4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	9203      	str	r2, [sp, #12]
 8006ac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ac8:	3402      	adds	r4, #2
 8006aca:	9305      	str	r3, [sp, #20]
 8006acc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b90 <_svfiprintf_r+0x1f4>
 8006ad0:	7821      	ldrb	r1, [r4, #0]
 8006ad2:	2203      	movs	r2, #3
 8006ad4:	4650      	mov	r0, sl
 8006ad6:	f7f9 fb7b 	bl	80001d0 <memchr>
 8006ada:	b138      	cbz	r0, 8006aec <_svfiprintf_r+0x150>
 8006adc:	9b04      	ldr	r3, [sp, #16]
 8006ade:	eba0 000a 	sub.w	r0, r0, sl
 8006ae2:	2240      	movs	r2, #64	@ 0x40
 8006ae4:	4082      	lsls	r2, r0
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	3401      	adds	r4, #1
 8006aea:	9304      	str	r3, [sp, #16]
 8006aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006af0:	4824      	ldr	r0, [pc, #144]	@ (8006b84 <_svfiprintf_r+0x1e8>)
 8006af2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006af6:	2206      	movs	r2, #6
 8006af8:	f7f9 fb6a 	bl	80001d0 <memchr>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d036      	beq.n	8006b6e <_svfiprintf_r+0x1d2>
 8006b00:	4b21      	ldr	r3, [pc, #132]	@ (8006b88 <_svfiprintf_r+0x1ec>)
 8006b02:	bb1b      	cbnz	r3, 8006b4c <_svfiprintf_r+0x1b0>
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	3307      	adds	r3, #7
 8006b08:	f023 0307 	bic.w	r3, r3, #7
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	9303      	str	r3, [sp, #12]
 8006b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b12:	4433      	add	r3, r6
 8006b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b16:	e76a      	b.n	80069ee <_svfiprintf_r+0x52>
 8006b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b1c:	460c      	mov	r4, r1
 8006b1e:	2001      	movs	r0, #1
 8006b20:	e7a8      	b.n	8006a74 <_svfiprintf_r+0xd8>
 8006b22:	2300      	movs	r3, #0
 8006b24:	3401      	adds	r4, #1
 8006b26:	9305      	str	r3, [sp, #20]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	f04f 0c0a 	mov.w	ip, #10
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b34:	3a30      	subs	r2, #48	@ 0x30
 8006b36:	2a09      	cmp	r2, #9
 8006b38:	d903      	bls.n	8006b42 <_svfiprintf_r+0x1a6>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0c6      	beq.n	8006acc <_svfiprintf_r+0x130>
 8006b3e:	9105      	str	r1, [sp, #20]
 8006b40:	e7c4      	b.n	8006acc <_svfiprintf_r+0x130>
 8006b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b46:	4604      	mov	r4, r0
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e7f0      	b.n	8006b2e <_svfiprintf_r+0x192>
 8006b4c:	ab03      	add	r3, sp, #12
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	462a      	mov	r2, r5
 8006b52:	4b0e      	ldr	r3, [pc, #56]	@ (8006b8c <_svfiprintf_r+0x1f0>)
 8006b54:	a904      	add	r1, sp, #16
 8006b56:	4638      	mov	r0, r7
 8006b58:	f7fd fe98 	bl	800488c <_printf_float>
 8006b5c:	1c42      	adds	r2, r0, #1
 8006b5e:	4606      	mov	r6, r0
 8006b60:	d1d6      	bne.n	8006b10 <_svfiprintf_r+0x174>
 8006b62:	89ab      	ldrh	r3, [r5, #12]
 8006b64:	065b      	lsls	r3, r3, #25
 8006b66:	f53f af2d 	bmi.w	80069c4 <_svfiprintf_r+0x28>
 8006b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b6c:	e72c      	b.n	80069c8 <_svfiprintf_r+0x2c>
 8006b6e:	ab03      	add	r3, sp, #12
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	462a      	mov	r2, r5
 8006b74:	4b05      	ldr	r3, [pc, #20]	@ (8006b8c <_svfiprintf_r+0x1f0>)
 8006b76:	a904      	add	r1, sp, #16
 8006b78:	4638      	mov	r0, r7
 8006b7a:	f7fe f91f 	bl	8004dbc <_printf_i>
 8006b7e:	e7ed      	b.n	8006b5c <_svfiprintf_r+0x1c0>
 8006b80:	08007626 	.word	0x08007626
 8006b84:	08007630 	.word	0x08007630
 8006b88:	0800488d 	.word	0x0800488d
 8006b8c:	080068e5 	.word	0x080068e5
 8006b90:	0800762c 	.word	0x0800762c

08006b94 <__sflush_r>:
 8006b94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9c:	0716      	lsls	r6, r2, #28
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	d454      	bmi.n	8006c4e <__sflush_r+0xba>
 8006ba4:	684b      	ldr	r3, [r1, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	dc02      	bgt.n	8006bb0 <__sflush_r+0x1c>
 8006baa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	dd48      	ble.n	8006c42 <__sflush_r+0xae>
 8006bb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bb2:	2e00      	cmp	r6, #0
 8006bb4:	d045      	beq.n	8006c42 <__sflush_r+0xae>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006bbc:	682f      	ldr	r7, [r5, #0]
 8006bbe:	6a21      	ldr	r1, [r4, #32]
 8006bc0:	602b      	str	r3, [r5, #0]
 8006bc2:	d030      	beq.n	8006c26 <__sflush_r+0x92>
 8006bc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	0759      	lsls	r1, r3, #29
 8006bca:	d505      	bpl.n	8006bd8 <__sflush_r+0x44>
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	1ad2      	subs	r2, r2, r3
 8006bd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006bd2:	b10b      	cbz	r3, 8006bd8 <__sflush_r+0x44>
 8006bd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006bd6:	1ad2      	subs	r2, r2, r3
 8006bd8:	2300      	movs	r3, #0
 8006bda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bdc:	6a21      	ldr	r1, [r4, #32]
 8006bde:	4628      	mov	r0, r5
 8006be0:	47b0      	blx	r6
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	d106      	bne.n	8006bf6 <__sflush_r+0x62>
 8006be8:	6829      	ldr	r1, [r5, #0]
 8006bea:	291d      	cmp	r1, #29
 8006bec:	d82b      	bhi.n	8006c46 <__sflush_r+0xb2>
 8006bee:	4a2a      	ldr	r2, [pc, #168]	@ (8006c98 <__sflush_r+0x104>)
 8006bf0:	40ca      	lsrs	r2, r1
 8006bf2:	07d6      	lsls	r6, r2, #31
 8006bf4:	d527      	bpl.n	8006c46 <__sflush_r+0xb2>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	6062      	str	r2, [r4, #4]
 8006bfa:	04d9      	lsls	r1, r3, #19
 8006bfc:	6922      	ldr	r2, [r4, #16]
 8006bfe:	6022      	str	r2, [r4, #0]
 8006c00:	d504      	bpl.n	8006c0c <__sflush_r+0x78>
 8006c02:	1c42      	adds	r2, r0, #1
 8006c04:	d101      	bne.n	8006c0a <__sflush_r+0x76>
 8006c06:	682b      	ldr	r3, [r5, #0]
 8006c08:	b903      	cbnz	r3, 8006c0c <__sflush_r+0x78>
 8006c0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c0e:	602f      	str	r7, [r5, #0]
 8006c10:	b1b9      	cbz	r1, 8006c42 <__sflush_r+0xae>
 8006c12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c16:	4299      	cmp	r1, r3
 8006c18:	d002      	beq.n	8006c20 <__sflush_r+0x8c>
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f7ff f9e8 	bl	8005ff0 <_free_r>
 8006c20:	2300      	movs	r3, #0
 8006c22:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c24:	e00d      	b.n	8006c42 <__sflush_r+0xae>
 8006c26:	2301      	movs	r3, #1
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b0      	blx	r6
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	1c50      	adds	r0, r2, #1
 8006c30:	d1c9      	bne.n	8006bc6 <__sflush_r+0x32>
 8006c32:	682b      	ldr	r3, [r5, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0c6      	beq.n	8006bc6 <__sflush_r+0x32>
 8006c38:	2b1d      	cmp	r3, #29
 8006c3a:	d001      	beq.n	8006c40 <__sflush_r+0xac>
 8006c3c:	2b16      	cmp	r3, #22
 8006c3e:	d11e      	bne.n	8006c7e <__sflush_r+0xea>
 8006c40:	602f      	str	r7, [r5, #0]
 8006c42:	2000      	movs	r0, #0
 8006c44:	e022      	b.n	8006c8c <__sflush_r+0xf8>
 8006c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c4a:	b21b      	sxth	r3, r3
 8006c4c:	e01b      	b.n	8006c86 <__sflush_r+0xf2>
 8006c4e:	690f      	ldr	r7, [r1, #16]
 8006c50:	2f00      	cmp	r7, #0
 8006c52:	d0f6      	beq.n	8006c42 <__sflush_r+0xae>
 8006c54:	0793      	lsls	r3, r2, #30
 8006c56:	680e      	ldr	r6, [r1, #0]
 8006c58:	bf08      	it	eq
 8006c5a:	694b      	ldreq	r3, [r1, #20]
 8006c5c:	600f      	str	r7, [r1, #0]
 8006c5e:	bf18      	it	ne
 8006c60:	2300      	movne	r3, #0
 8006c62:	eba6 0807 	sub.w	r8, r6, r7
 8006c66:	608b      	str	r3, [r1, #8]
 8006c68:	f1b8 0f00 	cmp.w	r8, #0
 8006c6c:	dde9      	ble.n	8006c42 <__sflush_r+0xae>
 8006c6e:	6a21      	ldr	r1, [r4, #32]
 8006c70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c72:	4643      	mov	r3, r8
 8006c74:	463a      	mov	r2, r7
 8006c76:	4628      	mov	r0, r5
 8006c78:	47b0      	blx	r6
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	dc08      	bgt.n	8006c90 <__sflush_r+0xfc>
 8006c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c86:	81a3      	strh	r3, [r4, #12]
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c90:	4407      	add	r7, r0
 8006c92:	eba8 0800 	sub.w	r8, r8, r0
 8006c96:	e7e7      	b.n	8006c68 <__sflush_r+0xd4>
 8006c98:	20400001 	.word	0x20400001

08006c9c <_fflush_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	690b      	ldr	r3, [r1, #16]
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	b913      	cbnz	r3, 8006cac <_fflush_r+0x10>
 8006ca6:	2500      	movs	r5, #0
 8006ca8:	4628      	mov	r0, r5
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	b118      	cbz	r0, 8006cb6 <_fflush_r+0x1a>
 8006cae:	6a03      	ldr	r3, [r0, #32]
 8006cb0:	b90b      	cbnz	r3, 8006cb6 <_fflush_r+0x1a>
 8006cb2:	f7fe fa2d 	bl	8005110 <__sinit>
 8006cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0f3      	beq.n	8006ca6 <_fflush_r+0xa>
 8006cbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006cc0:	07d0      	lsls	r0, r2, #31
 8006cc2:	d404      	bmi.n	8006cce <_fflush_r+0x32>
 8006cc4:	0599      	lsls	r1, r3, #22
 8006cc6:	d402      	bmi.n	8006cce <_fflush_r+0x32>
 8006cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cca:	f7fe fb34 	bl	8005336 <__retarget_lock_acquire_recursive>
 8006cce:	4628      	mov	r0, r5
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	f7ff ff5f 	bl	8006b94 <__sflush_r>
 8006cd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cd8:	07da      	lsls	r2, r3, #31
 8006cda:	4605      	mov	r5, r0
 8006cdc:	d4e4      	bmi.n	8006ca8 <_fflush_r+0xc>
 8006cde:	89a3      	ldrh	r3, [r4, #12]
 8006ce0:	059b      	lsls	r3, r3, #22
 8006ce2:	d4e1      	bmi.n	8006ca8 <_fflush_r+0xc>
 8006ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ce6:	f7fe fb27 	bl	8005338 <__retarget_lock_release_recursive>
 8006cea:	e7dd      	b.n	8006ca8 <_fflush_r+0xc>

08006cec <memmove>:
 8006cec:	4288      	cmp	r0, r1
 8006cee:	b510      	push	{r4, lr}
 8006cf0:	eb01 0402 	add.w	r4, r1, r2
 8006cf4:	d902      	bls.n	8006cfc <memmove+0x10>
 8006cf6:	4284      	cmp	r4, r0
 8006cf8:	4623      	mov	r3, r4
 8006cfa:	d807      	bhi.n	8006d0c <memmove+0x20>
 8006cfc:	1e43      	subs	r3, r0, #1
 8006cfe:	42a1      	cmp	r1, r4
 8006d00:	d008      	beq.n	8006d14 <memmove+0x28>
 8006d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d0a:	e7f8      	b.n	8006cfe <memmove+0x12>
 8006d0c:	4402      	add	r2, r0
 8006d0e:	4601      	mov	r1, r0
 8006d10:	428a      	cmp	r2, r1
 8006d12:	d100      	bne.n	8006d16 <memmove+0x2a>
 8006d14:	bd10      	pop	{r4, pc}
 8006d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d1e:	e7f7      	b.n	8006d10 <memmove+0x24>

08006d20 <_sbrk_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4d06      	ldr	r5, [pc, #24]	@ (8006d3c <_sbrk_r+0x1c>)
 8006d24:	2300      	movs	r3, #0
 8006d26:	4604      	mov	r4, r0
 8006d28:	4608      	mov	r0, r1
 8006d2a:	602b      	str	r3, [r5, #0]
 8006d2c:	f000 fb8c 	bl	8007448 <_sbrk>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d102      	bne.n	8006d3a <_sbrk_r+0x1a>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	b103      	cbz	r3, 8006d3a <_sbrk_r+0x1a>
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	20000468 	.word	0x20000468

08006d40 <memcpy>:
 8006d40:	440a      	add	r2, r1
 8006d42:	4291      	cmp	r1, r2
 8006d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d48:	d100      	bne.n	8006d4c <memcpy+0xc>
 8006d4a:	4770      	bx	lr
 8006d4c:	b510      	push	{r4, lr}
 8006d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d56:	4291      	cmp	r1, r2
 8006d58:	d1f9      	bne.n	8006d4e <memcpy+0xe>
 8006d5a:	bd10      	pop	{r4, pc}

08006d5c <__assert_func>:
 8006d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d5e:	4614      	mov	r4, r2
 8006d60:	461a      	mov	r2, r3
 8006d62:	4b09      	ldr	r3, [pc, #36]	@ (8006d88 <__assert_func+0x2c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4605      	mov	r5, r0
 8006d68:	68d8      	ldr	r0, [r3, #12]
 8006d6a:	b14c      	cbz	r4, 8006d80 <__assert_func+0x24>
 8006d6c:	4b07      	ldr	r3, [pc, #28]	@ (8006d8c <__assert_func+0x30>)
 8006d6e:	9100      	str	r1, [sp, #0]
 8006d70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d74:	4906      	ldr	r1, [pc, #24]	@ (8006d90 <__assert_func+0x34>)
 8006d76:	462b      	mov	r3, r5
 8006d78:	f000 f870 	bl	8006e5c <fiprintf>
 8006d7c:	f000 f880 	bl	8006e80 <abort>
 8006d80:	4b04      	ldr	r3, [pc, #16]	@ (8006d94 <__assert_func+0x38>)
 8006d82:	461c      	mov	r4, r3
 8006d84:	e7f3      	b.n	8006d6e <__assert_func+0x12>
 8006d86:	bf00      	nop
 8006d88:	20000018 	.word	0x20000018
 8006d8c:	08007641 	.word	0x08007641
 8006d90:	0800764e 	.word	0x0800764e
 8006d94:	0800767c 	.word	0x0800767c

08006d98 <_calloc_r>:
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	fba1 5402 	umull	r5, r4, r1, r2
 8006d9e:	b934      	cbnz	r4, 8006dae <_calloc_r+0x16>
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7ff f999 	bl	80060d8 <_malloc_r>
 8006da6:	4606      	mov	r6, r0
 8006da8:	b928      	cbnz	r0, 8006db6 <_calloc_r+0x1e>
 8006daa:	4630      	mov	r0, r6
 8006dac:	bd70      	pop	{r4, r5, r6, pc}
 8006dae:	220c      	movs	r2, #12
 8006db0:	6002      	str	r2, [r0, #0]
 8006db2:	2600      	movs	r6, #0
 8006db4:	e7f9      	b.n	8006daa <_calloc_r+0x12>
 8006db6:	462a      	mov	r2, r5
 8006db8:	4621      	mov	r1, r4
 8006dba:	f7fe fa44 	bl	8005246 <memset>
 8006dbe:	e7f4      	b.n	8006daa <_calloc_r+0x12>

08006dc0 <__ascii_mbtowc>:
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	b901      	cbnz	r1, 8006dc6 <__ascii_mbtowc+0x6>
 8006dc4:	a901      	add	r1, sp, #4
 8006dc6:	b142      	cbz	r2, 8006dda <__ascii_mbtowc+0x1a>
 8006dc8:	b14b      	cbz	r3, 8006dde <__ascii_mbtowc+0x1e>
 8006dca:	7813      	ldrb	r3, [r2, #0]
 8006dcc:	600b      	str	r3, [r1, #0]
 8006dce:	7812      	ldrb	r2, [r2, #0]
 8006dd0:	1e10      	subs	r0, r2, #0
 8006dd2:	bf18      	it	ne
 8006dd4:	2001      	movne	r0, #1
 8006dd6:	b002      	add	sp, #8
 8006dd8:	4770      	bx	lr
 8006dda:	4610      	mov	r0, r2
 8006ddc:	e7fb      	b.n	8006dd6 <__ascii_mbtowc+0x16>
 8006dde:	f06f 0001 	mvn.w	r0, #1
 8006de2:	e7f8      	b.n	8006dd6 <__ascii_mbtowc+0x16>

08006de4 <_realloc_r>:
 8006de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de8:	4607      	mov	r7, r0
 8006dea:	4614      	mov	r4, r2
 8006dec:	460d      	mov	r5, r1
 8006dee:	b921      	cbnz	r1, 8006dfa <_realloc_r+0x16>
 8006df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006df4:	4611      	mov	r1, r2
 8006df6:	f7ff b96f 	b.w	80060d8 <_malloc_r>
 8006dfa:	b92a      	cbnz	r2, 8006e08 <_realloc_r+0x24>
 8006dfc:	f7ff f8f8 	bl	8005ff0 <_free_r>
 8006e00:	4625      	mov	r5, r4
 8006e02:	4628      	mov	r0, r5
 8006e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e08:	f000 f841 	bl	8006e8e <_malloc_usable_size_r>
 8006e0c:	4284      	cmp	r4, r0
 8006e0e:	4606      	mov	r6, r0
 8006e10:	d802      	bhi.n	8006e18 <_realloc_r+0x34>
 8006e12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e16:	d8f4      	bhi.n	8006e02 <_realloc_r+0x1e>
 8006e18:	4621      	mov	r1, r4
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	f7ff f95c 	bl	80060d8 <_malloc_r>
 8006e20:	4680      	mov	r8, r0
 8006e22:	b908      	cbnz	r0, 8006e28 <_realloc_r+0x44>
 8006e24:	4645      	mov	r5, r8
 8006e26:	e7ec      	b.n	8006e02 <_realloc_r+0x1e>
 8006e28:	42b4      	cmp	r4, r6
 8006e2a:	4622      	mov	r2, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	bf28      	it	cs
 8006e30:	4632      	movcs	r2, r6
 8006e32:	f7ff ff85 	bl	8006d40 <memcpy>
 8006e36:	4629      	mov	r1, r5
 8006e38:	4638      	mov	r0, r7
 8006e3a:	f7ff f8d9 	bl	8005ff0 <_free_r>
 8006e3e:	e7f1      	b.n	8006e24 <_realloc_r+0x40>

08006e40 <__ascii_wctomb>:
 8006e40:	4603      	mov	r3, r0
 8006e42:	4608      	mov	r0, r1
 8006e44:	b141      	cbz	r1, 8006e58 <__ascii_wctomb+0x18>
 8006e46:	2aff      	cmp	r2, #255	@ 0xff
 8006e48:	d904      	bls.n	8006e54 <__ascii_wctomb+0x14>
 8006e4a:	228a      	movs	r2, #138	@ 0x8a
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e52:	4770      	bx	lr
 8006e54:	700a      	strb	r2, [r1, #0]
 8006e56:	2001      	movs	r0, #1
 8006e58:	4770      	bx	lr
	...

08006e5c <fiprintf>:
 8006e5c:	b40e      	push	{r1, r2, r3}
 8006e5e:	b503      	push	{r0, r1, lr}
 8006e60:	4601      	mov	r1, r0
 8006e62:	ab03      	add	r3, sp, #12
 8006e64:	4805      	ldr	r0, [pc, #20]	@ (8006e7c <fiprintf+0x20>)
 8006e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e6a:	6800      	ldr	r0, [r0, #0]
 8006e6c:	9301      	str	r3, [sp, #4]
 8006e6e:	f000 f83f 	bl	8006ef0 <_vfiprintf_r>
 8006e72:	b002      	add	sp, #8
 8006e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e78:	b003      	add	sp, #12
 8006e7a:	4770      	bx	lr
 8006e7c:	20000018 	.word	0x20000018

08006e80 <abort>:
 8006e80:	b508      	push	{r3, lr}
 8006e82:	2006      	movs	r0, #6
 8006e84:	f000 fa08 	bl	8007298 <raise>
 8006e88:	2001      	movs	r0, #1
 8006e8a:	f000 faf3 	bl	8007474 <_exit>

08006e8e <_malloc_usable_size_r>:
 8006e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e92:	1f18      	subs	r0, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bfbc      	itt	lt
 8006e98:	580b      	ldrlt	r3, [r1, r0]
 8006e9a:	18c0      	addlt	r0, r0, r3
 8006e9c:	4770      	bx	lr

08006e9e <__sfputc_r>:
 8006e9e:	6893      	ldr	r3, [r2, #8]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	b410      	push	{r4}
 8006ea6:	6093      	str	r3, [r2, #8]
 8006ea8:	da08      	bge.n	8006ebc <__sfputc_r+0x1e>
 8006eaa:	6994      	ldr	r4, [r2, #24]
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	db01      	blt.n	8006eb4 <__sfputc_r+0x16>
 8006eb0:	290a      	cmp	r1, #10
 8006eb2:	d103      	bne.n	8006ebc <__sfputc_r+0x1e>
 8006eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eb8:	f000 b932 	b.w	8007120 <__swbuf_r>
 8006ebc:	6813      	ldr	r3, [r2, #0]
 8006ebe:	1c58      	adds	r0, r3, #1
 8006ec0:	6010      	str	r0, [r2, #0]
 8006ec2:	7019      	strb	r1, [r3, #0]
 8006ec4:	4608      	mov	r0, r1
 8006ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <__sfputs_r>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	4606      	mov	r6, r0
 8006ed0:	460f      	mov	r7, r1
 8006ed2:	4614      	mov	r4, r2
 8006ed4:	18d5      	adds	r5, r2, r3
 8006ed6:	42ac      	cmp	r4, r5
 8006ed8:	d101      	bne.n	8006ede <__sfputs_r+0x12>
 8006eda:	2000      	movs	r0, #0
 8006edc:	e007      	b.n	8006eee <__sfputs_r+0x22>
 8006ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee2:	463a      	mov	r2, r7
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f7ff ffda 	bl	8006e9e <__sfputc_r>
 8006eea:	1c43      	adds	r3, r0, #1
 8006eec:	d1f3      	bne.n	8006ed6 <__sfputs_r+0xa>
 8006eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ef0 <_vfiprintf_r>:
 8006ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	460d      	mov	r5, r1
 8006ef6:	b09d      	sub	sp, #116	@ 0x74
 8006ef8:	4614      	mov	r4, r2
 8006efa:	4698      	mov	r8, r3
 8006efc:	4606      	mov	r6, r0
 8006efe:	b118      	cbz	r0, 8006f08 <_vfiprintf_r+0x18>
 8006f00:	6a03      	ldr	r3, [r0, #32]
 8006f02:	b90b      	cbnz	r3, 8006f08 <_vfiprintf_r+0x18>
 8006f04:	f7fe f904 	bl	8005110 <__sinit>
 8006f08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f0a:	07d9      	lsls	r1, r3, #31
 8006f0c:	d405      	bmi.n	8006f1a <_vfiprintf_r+0x2a>
 8006f0e:	89ab      	ldrh	r3, [r5, #12]
 8006f10:	059a      	lsls	r2, r3, #22
 8006f12:	d402      	bmi.n	8006f1a <_vfiprintf_r+0x2a>
 8006f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f16:	f7fe fa0e 	bl	8005336 <__retarget_lock_acquire_recursive>
 8006f1a:	89ab      	ldrh	r3, [r5, #12]
 8006f1c:	071b      	lsls	r3, r3, #28
 8006f1e:	d501      	bpl.n	8006f24 <_vfiprintf_r+0x34>
 8006f20:	692b      	ldr	r3, [r5, #16]
 8006f22:	b99b      	cbnz	r3, 8006f4c <_vfiprintf_r+0x5c>
 8006f24:	4629      	mov	r1, r5
 8006f26:	4630      	mov	r0, r6
 8006f28:	f000 f938 	bl	800719c <__swsetup_r>
 8006f2c:	b170      	cbz	r0, 8006f4c <_vfiprintf_r+0x5c>
 8006f2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f30:	07dc      	lsls	r4, r3, #31
 8006f32:	d504      	bpl.n	8006f3e <_vfiprintf_r+0x4e>
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	b01d      	add	sp, #116	@ 0x74
 8006f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	0598      	lsls	r0, r3, #22
 8006f42:	d4f7      	bmi.n	8006f34 <_vfiprintf_r+0x44>
 8006f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f46:	f7fe f9f7 	bl	8005338 <__retarget_lock_release_recursive>
 8006f4a:	e7f3      	b.n	8006f34 <_vfiprintf_r+0x44>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f50:	2320      	movs	r3, #32
 8006f52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f5a:	2330      	movs	r3, #48	@ 0x30
 8006f5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800710c <_vfiprintf_r+0x21c>
 8006f60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f64:	f04f 0901 	mov.w	r9, #1
 8006f68:	4623      	mov	r3, r4
 8006f6a:	469a      	mov	sl, r3
 8006f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f70:	b10a      	cbz	r2, 8006f76 <_vfiprintf_r+0x86>
 8006f72:	2a25      	cmp	r2, #37	@ 0x25
 8006f74:	d1f9      	bne.n	8006f6a <_vfiprintf_r+0x7a>
 8006f76:	ebba 0b04 	subs.w	fp, sl, r4
 8006f7a:	d00b      	beq.n	8006f94 <_vfiprintf_r+0xa4>
 8006f7c:	465b      	mov	r3, fp
 8006f7e:	4622      	mov	r2, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	4630      	mov	r0, r6
 8006f84:	f7ff ffa2 	bl	8006ecc <__sfputs_r>
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f000 80a7 	beq.w	80070dc <_vfiprintf_r+0x1ec>
 8006f8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f90:	445a      	add	r2, fp
 8006f92:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f94:	f89a 3000 	ldrb.w	r3, [sl]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 809f 	beq.w	80070dc <_vfiprintf_r+0x1ec>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fa8:	f10a 0a01 	add.w	sl, sl, #1
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	9307      	str	r3, [sp, #28]
 8006fb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fb6:	4654      	mov	r4, sl
 8006fb8:	2205      	movs	r2, #5
 8006fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fbe:	4853      	ldr	r0, [pc, #332]	@ (800710c <_vfiprintf_r+0x21c>)
 8006fc0:	f7f9 f906 	bl	80001d0 <memchr>
 8006fc4:	9a04      	ldr	r2, [sp, #16]
 8006fc6:	b9d8      	cbnz	r0, 8007000 <_vfiprintf_r+0x110>
 8006fc8:	06d1      	lsls	r1, r2, #27
 8006fca:	bf44      	itt	mi
 8006fcc:	2320      	movmi	r3, #32
 8006fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fd2:	0713      	lsls	r3, r2, #28
 8006fd4:	bf44      	itt	mi
 8006fd6:	232b      	movmi	r3, #43	@ 0x2b
 8006fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8006fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fe2:	d015      	beq.n	8007010 <_vfiprintf_r+0x120>
 8006fe4:	9a07      	ldr	r2, [sp, #28]
 8006fe6:	4654      	mov	r4, sl
 8006fe8:	2000      	movs	r0, #0
 8006fea:	f04f 0c0a 	mov.w	ip, #10
 8006fee:	4621      	mov	r1, r4
 8006ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ff4:	3b30      	subs	r3, #48	@ 0x30
 8006ff6:	2b09      	cmp	r3, #9
 8006ff8:	d94b      	bls.n	8007092 <_vfiprintf_r+0x1a2>
 8006ffa:	b1b0      	cbz	r0, 800702a <_vfiprintf_r+0x13a>
 8006ffc:	9207      	str	r2, [sp, #28]
 8006ffe:	e014      	b.n	800702a <_vfiprintf_r+0x13a>
 8007000:	eba0 0308 	sub.w	r3, r0, r8
 8007004:	fa09 f303 	lsl.w	r3, r9, r3
 8007008:	4313      	orrs	r3, r2
 800700a:	9304      	str	r3, [sp, #16]
 800700c:	46a2      	mov	sl, r4
 800700e:	e7d2      	b.n	8006fb6 <_vfiprintf_r+0xc6>
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	1d19      	adds	r1, r3, #4
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	9103      	str	r1, [sp, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	bfbb      	ittet	lt
 800701c:	425b      	neglt	r3, r3
 800701e:	f042 0202 	orrlt.w	r2, r2, #2
 8007022:	9307      	strge	r3, [sp, #28]
 8007024:	9307      	strlt	r3, [sp, #28]
 8007026:	bfb8      	it	lt
 8007028:	9204      	strlt	r2, [sp, #16]
 800702a:	7823      	ldrb	r3, [r4, #0]
 800702c:	2b2e      	cmp	r3, #46	@ 0x2e
 800702e:	d10a      	bne.n	8007046 <_vfiprintf_r+0x156>
 8007030:	7863      	ldrb	r3, [r4, #1]
 8007032:	2b2a      	cmp	r3, #42	@ 0x2a
 8007034:	d132      	bne.n	800709c <_vfiprintf_r+0x1ac>
 8007036:	9b03      	ldr	r3, [sp, #12]
 8007038:	1d1a      	adds	r2, r3, #4
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	9203      	str	r2, [sp, #12]
 800703e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007042:	3402      	adds	r4, #2
 8007044:	9305      	str	r3, [sp, #20]
 8007046:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800711c <_vfiprintf_r+0x22c>
 800704a:	7821      	ldrb	r1, [r4, #0]
 800704c:	2203      	movs	r2, #3
 800704e:	4650      	mov	r0, sl
 8007050:	f7f9 f8be 	bl	80001d0 <memchr>
 8007054:	b138      	cbz	r0, 8007066 <_vfiprintf_r+0x176>
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	eba0 000a 	sub.w	r0, r0, sl
 800705c:	2240      	movs	r2, #64	@ 0x40
 800705e:	4082      	lsls	r2, r0
 8007060:	4313      	orrs	r3, r2
 8007062:	3401      	adds	r4, #1
 8007064:	9304      	str	r3, [sp, #16]
 8007066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706a:	4829      	ldr	r0, [pc, #164]	@ (8007110 <_vfiprintf_r+0x220>)
 800706c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007070:	2206      	movs	r2, #6
 8007072:	f7f9 f8ad 	bl	80001d0 <memchr>
 8007076:	2800      	cmp	r0, #0
 8007078:	d03f      	beq.n	80070fa <_vfiprintf_r+0x20a>
 800707a:	4b26      	ldr	r3, [pc, #152]	@ (8007114 <_vfiprintf_r+0x224>)
 800707c:	bb1b      	cbnz	r3, 80070c6 <_vfiprintf_r+0x1d6>
 800707e:	9b03      	ldr	r3, [sp, #12]
 8007080:	3307      	adds	r3, #7
 8007082:	f023 0307 	bic.w	r3, r3, #7
 8007086:	3308      	adds	r3, #8
 8007088:	9303      	str	r3, [sp, #12]
 800708a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800708c:	443b      	add	r3, r7
 800708e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007090:	e76a      	b.n	8006f68 <_vfiprintf_r+0x78>
 8007092:	fb0c 3202 	mla	r2, ip, r2, r3
 8007096:	460c      	mov	r4, r1
 8007098:	2001      	movs	r0, #1
 800709a:	e7a8      	b.n	8006fee <_vfiprintf_r+0xfe>
 800709c:	2300      	movs	r3, #0
 800709e:	3401      	adds	r4, #1
 80070a0:	9305      	str	r3, [sp, #20]
 80070a2:	4619      	mov	r1, r3
 80070a4:	f04f 0c0a 	mov.w	ip, #10
 80070a8:	4620      	mov	r0, r4
 80070aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070ae:	3a30      	subs	r2, #48	@ 0x30
 80070b0:	2a09      	cmp	r2, #9
 80070b2:	d903      	bls.n	80070bc <_vfiprintf_r+0x1cc>
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0c6      	beq.n	8007046 <_vfiprintf_r+0x156>
 80070b8:	9105      	str	r1, [sp, #20]
 80070ba:	e7c4      	b.n	8007046 <_vfiprintf_r+0x156>
 80070bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80070c0:	4604      	mov	r4, r0
 80070c2:	2301      	movs	r3, #1
 80070c4:	e7f0      	b.n	80070a8 <_vfiprintf_r+0x1b8>
 80070c6:	ab03      	add	r3, sp, #12
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	462a      	mov	r2, r5
 80070cc:	4b12      	ldr	r3, [pc, #72]	@ (8007118 <_vfiprintf_r+0x228>)
 80070ce:	a904      	add	r1, sp, #16
 80070d0:	4630      	mov	r0, r6
 80070d2:	f7fd fbdb 	bl	800488c <_printf_float>
 80070d6:	4607      	mov	r7, r0
 80070d8:	1c78      	adds	r0, r7, #1
 80070da:	d1d6      	bne.n	800708a <_vfiprintf_r+0x19a>
 80070dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070de:	07d9      	lsls	r1, r3, #31
 80070e0:	d405      	bmi.n	80070ee <_vfiprintf_r+0x1fe>
 80070e2:	89ab      	ldrh	r3, [r5, #12]
 80070e4:	059a      	lsls	r2, r3, #22
 80070e6:	d402      	bmi.n	80070ee <_vfiprintf_r+0x1fe>
 80070e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070ea:	f7fe f925 	bl	8005338 <__retarget_lock_release_recursive>
 80070ee:	89ab      	ldrh	r3, [r5, #12]
 80070f0:	065b      	lsls	r3, r3, #25
 80070f2:	f53f af1f 	bmi.w	8006f34 <_vfiprintf_r+0x44>
 80070f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070f8:	e71e      	b.n	8006f38 <_vfiprintf_r+0x48>
 80070fa:	ab03      	add	r3, sp, #12
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	462a      	mov	r2, r5
 8007100:	4b05      	ldr	r3, [pc, #20]	@ (8007118 <_vfiprintf_r+0x228>)
 8007102:	a904      	add	r1, sp, #16
 8007104:	4630      	mov	r0, r6
 8007106:	f7fd fe59 	bl	8004dbc <_printf_i>
 800710a:	e7e4      	b.n	80070d6 <_vfiprintf_r+0x1e6>
 800710c:	08007626 	.word	0x08007626
 8007110:	08007630 	.word	0x08007630
 8007114:	0800488d 	.word	0x0800488d
 8007118:	08006ecd 	.word	0x08006ecd
 800711c:	0800762c 	.word	0x0800762c

08007120 <__swbuf_r>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	460e      	mov	r6, r1
 8007124:	4614      	mov	r4, r2
 8007126:	4605      	mov	r5, r0
 8007128:	b118      	cbz	r0, 8007132 <__swbuf_r+0x12>
 800712a:	6a03      	ldr	r3, [r0, #32]
 800712c:	b90b      	cbnz	r3, 8007132 <__swbuf_r+0x12>
 800712e:	f7fd ffef 	bl	8005110 <__sinit>
 8007132:	69a3      	ldr	r3, [r4, #24]
 8007134:	60a3      	str	r3, [r4, #8]
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	071a      	lsls	r2, r3, #28
 800713a:	d501      	bpl.n	8007140 <__swbuf_r+0x20>
 800713c:	6923      	ldr	r3, [r4, #16]
 800713e:	b943      	cbnz	r3, 8007152 <__swbuf_r+0x32>
 8007140:	4621      	mov	r1, r4
 8007142:	4628      	mov	r0, r5
 8007144:	f000 f82a 	bl	800719c <__swsetup_r>
 8007148:	b118      	cbz	r0, 8007152 <__swbuf_r+0x32>
 800714a:	f04f 37ff 	mov.w	r7, #4294967295
 800714e:	4638      	mov	r0, r7
 8007150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	6922      	ldr	r2, [r4, #16]
 8007156:	1a98      	subs	r0, r3, r2
 8007158:	6963      	ldr	r3, [r4, #20]
 800715a:	b2f6      	uxtb	r6, r6
 800715c:	4283      	cmp	r3, r0
 800715e:	4637      	mov	r7, r6
 8007160:	dc05      	bgt.n	800716e <__swbuf_r+0x4e>
 8007162:	4621      	mov	r1, r4
 8007164:	4628      	mov	r0, r5
 8007166:	f7ff fd99 	bl	8006c9c <_fflush_r>
 800716a:	2800      	cmp	r0, #0
 800716c:	d1ed      	bne.n	800714a <__swbuf_r+0x2a>
 800716e:	68a3      	ldr	r3, [r4, #8]
 8007170:	3b01      	subs	r3, #1
 8007172:	60a3      	str	r3, [r4, #8]
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	6022      	str	r2, [r4, #0]
 800717a:	701e      	strb	r6, [r3, #0]
 800717c:	6962      	ldr	r2, [r4, #20]
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	429a      	cmp	r2, r3
 8007182:	d004      	beq.n	800718e <__swbuf_r+0x6e>
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	07db      	lsls	r3, r3, #31
 8007188:	d5e1      	bpl.n	800714e <__swbuf_r+0x2e>
 800718a:	2e0a      	cmp	r6, #10
 800718c:	d1df      	bne.n	800714e <__swbuf_r+0x2e>
 800718e:	4621      	mov	r1, r4
 8007190:	4628      	mov	r0, r5
 8007192:	f7ff fd83 	bl	8006c9c <_fflush_r>
 8007196:	2800      	cmp	r0, #0
 8007198:	d0d9      	beq.n	800714e <__swbuf_r+0x2e>
 800719a:	e7d6      	b.n	800714a <__swbuf_r+0x2a>

0800719c <__swsetup_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4b29      	ldr	r3, [pc, #164]	@ (8007244 <__swsetup_r+0xa8>)
 80071a0:	4605      	mov	r5, r0
 80071a2:	6818      	ldr	r0, [r3, #0]
 80071a4:	460c      	mov	r4, r1
 80071a6:	b118      	cbz	r0, 80071b0 <__swsetup_r+0x14>
 80071a8:	6a03      	ldr	r3, [r0, #32]
 80071aa:	b90b      	cbnz	r3, 80071b0 <__swsetup_r+0x14>
 80071ac:	f7fd ffb0 	bl	8005110 <__sinit>
 80071b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b4:	0719      	lsls	r1, r3, #28
 80071b6:	d422      	bmi.n	80071fe <__swsetup_r+0x62>
 80071b8:	06da      	lsls	r2, r3, #27
 80071ba:	d407      	bmi.n	80071cc <__swsetup_r+0x30>
 80071bc:	2209      	movs	r2, #9
 80071be:	602a      	str	r2, [r5, #0]
 80071c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ca:	e033      	b.n	8007234 <__swsetup_r+0x98>
 80071cc:	0758      	lsls	r0, r3, #29
 80071ce:	d512      	bpl.n	80071f6 <__swsetup_r+0x5a>
 80071d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071d2:	b141      	cbz	r1, 80071e6 <__swsetup_r+0x4a>
 80071d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071d8:	4299      	cmp	r1, r3
 80071da:	d002      	beq.n	80071e2 <__swsetup_r+0x46>
 80071dc:	4628      	mov	r0, r5
 80071de:	f7fe ff07 	bl	8005ff0 <_free_r>
 80071e2:	2300      	movs	r3, #0
 80071e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071ec:	81a3      	strh	r3, [r4, #12]
 80071ee:	2300      	movs	r3, #0
 80071f0:	6063      	str	r3, [r4, #4]
 80071f2:	6923      	ldr	r3, [r4, #16]
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	f043 0308 	orr.w	r3, r3, #8
 80071fc:	81a3      	strh	r3, [r4, #12]
 80071fe:	6923      	ldr	r3, [r4, #16]
 8007200:	b94b      	cbnz	r3, 8007216 <__swsetup_r+0x7a>
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800720c:	d003      	beq.n	8007216 <__swsetup_r+0x7a>
 800720e:	4621      	mov	r1, r4
 8007210:	4628      	mov	r0, r5
 8007212:	f000 f883 	bl	800731c <__smakebuf_r>
 8007216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800721a:	f013 0201 	ands.w	r2, r3, #1
 800721e:	d00a      	beq.n	8007236 <__swsetup_r+0x9a>
 8007220:	2200      	movs	r2, #0
 8007222:	60a2      	str	r2, [r4, #8]
 8007224:	6962      	ldr	r2, [r4, #20]
 8007226:	4252      	negs	r2, r2
 8007228:	61a2      	str	r2, [r4, #24]
 800722a:	6922      	ldr	r2, [r4, #16]
 800722c:	b942      	cbnz	r2, 8007240 <__swsetup_r+0xa4>
 800722e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007232:	d1c5      	bne.n	80071c0 <__swsetup_r+0x24>
 8007234:	bd38      	pop	{r3, r4, r5, pc}
 8007236:	0799      	lsls	r1, r3, #30
 8007238:	bf58      	it	pl
 800723a:	6962      	ldrpl	r2, [r4, #20]
 800723c:	60a2      	str	r2, [r4, #8]
 800723e:	e7f4      	b.n	800722a <__swsetup_r+0x8e>
 8007240:	2000      	movs	r0, #0
 8007242:	e7f7      	b.n	8007234 <__swsetup_r+0x98>
 8007244:	20000018 	.word	0x20000018

08007248 <_raise_r>:
 8007248:	291f      	cmp	r1, #31
 800724a:	b538      	push	{r3, r4, r5, lr}
 800724c:	4605      	mov	r5, r0
 800724e:	460c      	mov	r4, r1
 8007250:	d904      	bls.n	800725c <_raise_r+0x14>
 8007252:	2316      	movs	r3, #22
 8007254:	6003      	str	r3, [r0, #0]
 8007256:	f04f 30ff 	mov.w	r0, #4294967295
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800725e:	b112      	cbz	r2, 8007266 <_raise_r+0x1e>
 8007260:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007264:	b94b      	cbnz	r3, 800727a <_raise_r+0x32>
 8007266:	4628      	mov	r0, r5
 8007268:	f000 f830 	bl	80072cc <_getpid_r>
 800726c:	4622      	mov	r2, r4
 800726e:	4601      	mov	r1, r0
 8007270:	4628      	mov	r0, r5
 8007272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007276:	f000 b817 	b.w	80072a8 <_kill_r>
 800727a:	2b01      	cmp	r3, #1
 800727c:	d00a      	beq.n	8007294 <_raise_r+0x4c>
 800727e:	1c59      	adds	r1, r3, #1
 8007280:	d103      	bne.n	800728a <_raise_r+0x42>
 8007282:	2316      	movs	r3, #22
 8007284:	6003      	str	r3, [r0, #0]
 8007286:	2001      	movs	r0, #1
 8007288:	e7e7      	b.n	800725a <_raise_r+0x12>
 800728a:	2100      	movs	r1, #0
 800728c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007290:	4620      	mov	r0, r4
 8007292:	4798      	blx	r3
 8007294:	2000      	movs	r0, #0
 8007296:	e7e0      	b.n	800725a <_raise_r+0x12>

08007298 <raise>:
 8007298:	4b02      	ldr	r3, [pc, #8]	@ (80072a4 <raise+0xc>)
 800729a:	4601      	mov	r1, r0
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	f7ff bfd3 	b.w	8007248 <_raise_r>
 80072a2:	bf00      	nop
 80072a4:	20000018 	.word	0x20000018

080072a8 <_kill_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	4d07      	ldr	r5, [pc, #28]	@ (80072c8 <_kill_r+0x20>)
 80072ac:	2300      	movs	r3, #0
 80072ae:	4604      	mov	r4, r0
 80072b0:	4608      	mov	r0, r1
 80072b2:	4611      	mov	r1, r2
 80072b4:	602b      	str	r3, [r5, #0]
 80072b6:	f000 f8af 	bl	8007418 <_kill>
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	d102      	bne.n	80072c4 <_kill_r+0x1c>
 80072be:	682b      	ldr	r3, [r5, #0]
 80072c0:	b103      	cbz	r3, 80072c4 <_kill_r+0x1c>
 80072c2:	6023      	str	r3, [r4, #0]
 80072c4:	bd38      	pop	{r3, r4, r5, pc}
 80072c6:	bf00      	nop
 80072c8:	20000468 	.word	0x20000468

080072cc <_getpid_r>:
 80072cc:	f000 b894 	b.w	80073f8 <_getpid>

080072d0 <__swhatbuf_r>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	460c      	mov	r4, r1
 80072d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d8:	2900      	cmp	r1, #0
 80072da:	b096      	sub	sp, #88	@ 0x58
 80072dc:	4615      	mov	r5, r2
 80072de:	461e      	mov	r6, r3
 80072e0:	da0d      	bge.n	80072fe <__swhatbuf_r+0x2e>
 80072e2:	89a3      	ldrh	r3, [r4, #12]
 80072e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072e8:	f04f 0100 	mov.w	r1, #0
 80072ec:	bf14      	ite	ne
 80072ee:	2340      	movne	r3, #64	@ 0x40
 80072f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072f4:	2000      	movs	r0, #0
 80072f6:	6031      	str	r1, [r6, #0]
 80072f8:	602b      	str	r3, [r5, #0]
 80072fa:	b016      	add	sp, #88	@ 0x58
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	466a      	mov	r2, sp
 8007300:	f000 f848 	bl	8007394 <_fstat_r>
 8007304:	2800      	cmp	r0, #0
 8007306:	dbec      	blt.n	80072e2 <__swhatbuf_r+0x12>
 8007308:	9901      	ldr	r1, [sp, #4]
 800730a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800730e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007312:	4259      	negs	r1, r3
 8007314:	4159      	adcs	r1, r3
 8007316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800731a:	e7eb      	b.n	80072f4 <__swhatbuf_r+0x24>

0800731c <__smakebuf_r>:
 800731c:	898b      	ldrh	r3, [r1, #12]
 800731e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007320:	079d      	lsls	r5, r3, #30
 8007322:	4606      	mov	r6, r0
 8007324:	460c      	mov	r4, r1
 8007326:	d507      	bpl.n	8007338 <__smakebuf_r+0x1c>
 8007328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	6123      	str	r3, [r4, #16]
 8007330:	2301      	movs	r3, #1
 8007332:	6163      	str	r3, [r4, #20]
 8007334:	b003      	add	sp, #12
 8007336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007338:	ab01      	add	r3, sp, #4
 800733a:	466a      	mov	r2, sp
 800733c:	f7ff ffc8 	bl	80072d0 <__swhatbuf_r>
 8007340:	9f00      	ldr	r7, [sp, #0]
 8007342:	4605      	mov	r5, r0
 8007344:	4639      	mov	r1, r7
 8007346:	4630      	mov	r0, r6
 8007348:	f7fe fec6 	bl	80060d8 <_malloc_r>
 800734c:	b948      	cbnz	r0, 8007362 <__smakebuf_r+0x46>
 800734e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007352:	059a      	lsls	r2, r3, #22
 8007354:	d4ee      	bmi.n	8007334 <__smakebuf_r+0x18>
 8007356:	f023 0303 	bic.w	r3, r3, #3
 800735a:	f043 0302 	orr.w	r3, r3, #2
 800735e:	81a3      	strh	r3, [r4, #12]
 8007360:	e7e2      	b.n	8007328 <__smakebuf_r+0xc>
 8007362:	89a3      	ldrh	r3, [r4, #12]
 8007364:	6020      	str	r0, [r4, #0]
 8007366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	9b01      	ldr	r3, [sp, #4]
 800736e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007372:	b15b      	cbz	r3, 800738c <__smakebuf_r+0x70>
 8007374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007378:	4630      	mov	r0, r6
 800737a:	f000 f81d 	bl	80073b8 <_isatty_r>
 800737e:	b128      	cbz	r0, 800738c <__smakebuf_r+0x70>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	f023 0303 	bic.w	r3, r3, #3
 8007386:	f043 0301 	orr.w	r3, r3, #1
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	89a3      	ldrh	r3, [r4, #12]
 800738e:	431d      	orrs	r5, r3
 8007390:	81a5      	strh	r5, [r4, #12]
 8007392:	e7cf      	b.n	8007334 <__smakebuf_r+0x18>

08007394 <_fstat_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4d07      	ldr	r5, [pc, #28]	@ (80073b4 <_fstat_r+0x20>)
 8007398:	2300      	movs	r3, #0
 800739a:	4604      	mov	r4, r0
 800739c:	4608      	mov	r0, r1
 800739e:	4611      	mov	r1, r2
 80073a0:	602b      	str	r3, [r5, #0]
 80073a2:	f000 f821 	bl	80073e8 <_fstat>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	d102      	bne.n	80073b0 <_fstat_r+0x1c>
 80073aa:	682b      	ldr	r3, [r5, #0]
 80073ac:	b103      	cbz	r3, 80073b0 <_fstat_r+0x1c>
 80073ae:	6023      	str	r3, [r4, #0]
 80073b0:	bd38      	pop	{r3, r4, r5, pc}
 80073b2:	bf00      	nop
 80073b4:	20000468 	.word	0x20000468

080073b8 <_isatty_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4d06      	ldr	r5, [pc, #24]	@ (80073d4 <_isatty_r+0x1c>)
 80073bc:	2300      	movs	r3, #0
 80073be:	4604      	mov	r4, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	602b      	str	r3, [r5, #0]
 80073c4:	f000 f820 	bl	8007408 <_isatty>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_isatty_r+0x1a>
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_isatty_r+0x1a>
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	20000468 	.word	0x20000468

080073d8 <_close>:
 80073d8:	4b02      	ldr	r3, [pc, #8]	@ (80073e4 <_close+0xc>)
 80073da:	2258      	movs	r2, #88	@ 0x58
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	f04f 30ff 	mov.w	r0, #4294967295
 80073e2:	4770      	bx	lr
 80073e4:	20000468 	.word	0x20000468

080073e8 <_fstat>:
 80073e8:	4b02      	ldr	r3, [pc, #8]	@ (80073f4 <_fstat+0xc>)
 80073ea:	2258      	movs	r2, #88	@ 0x58
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	f04f 30ff 	mov.w	r0, #4294967295
 80073f2:	4770      	bx	lr
 80073f4:	20000468 	.word	0x20000468

080073f8 <_getpid>:
 80073f8:	4b02      	ldr	r3, [pc, #8]	@ (8007404 <_getpid+0xc>)
 80073fa:	2258      	movs	r2, #88	@ 0x58
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007402:	4770      	bx	lr
 8007404:	20000468 	.word	0x20000468

08007408 <_isatty>:
 8007408:	4b02      	ldr	r3, [pc, #8]	@ (8007414 <_isatty+0xc>)
 800740a:	2258      	movs	r2, #88	@ 0x58
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	2000      	movs	r0, #0
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	20000468 	.word	0x20000468

08007418 <_kill>:
 8007418:	4b02      	ldr	r3, [pc, #8]	@ (8007424 <_kill+0xc>)
 800741a:	2258      	movs	r2, #88	@ 0x58
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	f04f 30ff 	mov.w	r0, #4294967295
 8007422:	4770      	bx	lr
 8007424:	20000468 	.word	0x20000468

08007428 <_lseek>:
 8007428:	4b02      	ldr	r3, [pc, #8]	@ (8007434 <_lseek+0xc>)
 800742a:	2258      	movs	r2, #88	@ 0x58
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	f04f 30ff 	mov.w	r0, #4294967295
 8007432:	4770      	bx	lr
 8007434:	20000468 	.word	0x20000468

08007438 <_read>:
 8007438:	4b02      	ldr	r3, [pc, #8]	@ (8007444 <_read+0xc>)
 800743a:	2258      	movs	r2, #88	@ 0x58
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	f04f 30ff 	mov.w	r0, #4294967295
 8007442:	4770      	bx	lr
 8007444:	20000468 	.word	0x20000468

08007448 <_sbrk>:
 8007448:	4a04      	ldr	r2, [pc, #16]	@ (800745c <_sbrk+0x14>)
 800744a:	6811      	ldr	r1, [r2, #0]
 800744c:	4603      	mov	r3, r0
 800744e:	b909      	cbnz	r1, 8007454 <_sbrk+0xc>
 8007450:	4903      	ldr	r1, [pc, #12]	@ (8007460 <_sbrk+0x18>)
 8007452:	6011      	str	r1, [r2, #0]
 8007454:	6810      	ldr	r0, [r2, #0]
 8007456:	4403      	add	r3, r0
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	4770      	bx	lr
 800745c:	20000478 	.word	0x20000478
 8007460:	20000480 	.word	0x20000480

08007464 <_write>:
 8007464:	4b02      	ldr	r3, [pc, #8]	@ (8007470 <_write+0xc>)
 8007466:	2258      	movs	r2, #88	@ 0x58
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	f04f 30ff 	mov.w	r0, #4294967295
 800746e:	4770      	bx	lr
 8007470:	20000468 	.word	0x20000468

08007474 <_exit>:
 8007474:	e7fe      	b.n	8007474 <_exit>
	...

08007478 <_init>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	bf00      	nop
 800747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747e:	bc08      	pop	{r3}
 8007480:	469e      	mov	lr, r3
 8007482:	4770      	bx	lr

08007484 <_fini>:
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	bf00      	nop
 8007488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748a:	bc08      	pop	{r3}
 800748c:	469e      	mov	lr, r3
 800748e:	4770      	bx	lr
